[
    [
        {
            "test_name": "Get Users with Default Limit",
            "request": {
                "method": "GET",
                "path": "/users",
                "headers": {},
                "body": {}
            },
            "expected_response": {
                "status_code": 200,
                "body": [
                    {
                        "id": 1,
                        "username": "user1",
                        "email": "user1@example.com",
                        "createdAt": "2023-01-01T00:00:00Z"
                    },
                    {
                        "id": 2,
                        "username": "user2",
                        "email": "user2@example.com",
                        "createdAt": "2023-01-02T00:00:00Z"
                    }
                ]
            },
            "description": "Verifies that the API returns a list of users with the default limit of 20."
        },
        {
            "test_name": "Get Users with Limit of 5",
            "request": {
                "method": "GET",
                "path": "/users?limit=5",
                "headers": {},
                "body": {}
            },
            "expected_response": {
                "status_code": 200,
                "body": [
                    {
                        "id": 1,
                        "username": "user1",
                        "email": "user1@example.com",
                        "createdAt": "2023-01-01T00:00:00Z"
                    },
                    {
                        "id": 2,
                        "username": "user2",
                        "email": "user2@example.com",
                        "createdAt": "2023-01-02T00:00:00Z"
                    },
                    {
                        "id": 3,
                        "username": "user3",
                        "email": "user3@example.com",
                        "createdAt": "2023-01-03T00:00:00Z"
                    },
                    {
                        "id": 4,
                        "username": "user4",
                        "email": "user4@example.com",
                        "createdAt": "2023-01-04T00:00:00Z"
                    },
                    {
                        "id": 5,
                        "username": "user5",
                        "email": "user5@example.com",
                        "createdAt": "2023-01-05T00:00:00Z"
                    }
                ]
            },
            "description": "Verifies that the API returns a list of users with a limit of 5."
        },
        {
            "test_name": "Get Users with Limit Exceeding Total Count",
            "request": {
                "method": "GET",
                "path": "/users?limit=100",
                "headers": {},
                "body": {}
            },
            "expected_response": {
                "status_code": 200,
                "body": [
                    {
                        "id": 1,
                        "username": "user1",
                        "email": "user1@example.com",
                        "createdAt": "2023-01-01T00:00:00Z"
                    },
                    {
                        "id": 2,
                        "username": "user2",
                        "email": "user2@example.com",
                        "createdAt": "2023-01-02T00:00:00Z"
                    },
                    {
                        "id": 3,
                        "username": "user3",
                        "email": "user3@example.com",
                        "createdAt": "2023-01-03T00:00:00Z"
                    }
                ]
            },
            "description": "Verifies that the API returns all available users when the limit exceeds the total count."
        },
        {
            "test_name": "Get Users with Negative Limit",
            "request": {
                "method": "GET",
                "path": "/users?limit=-5",
                "headers": {},
                "body": {}
            },
            "expected_response": {
                "status_code": 400,
                "body": {
                    "error": "Invalid limit parameter"
                }
            },
            "description": "Verifies that the API returns an error when the limit parameter is negative."
        },
        {
            "test_name": "Get Users with Non-integer Limit",
            "request": {
                "method": "GET",
                "path": "/users?limit=abc",
                "headers": {},
                "body": {}
            },
            "expected_response": {
                "status_code": 400,
                "body": {
                    "error": "Invalid limit parameter"
                }
            },
            "description": "Verifies that the API returns an error when the limit parameter is non-integer."
        }
    ],
    [
        {
            "test_name": "Create User Successful",
            "request": {
                "method": "POST",
                "path": "/users",
                "headers": {
                    "Content-Type": "application/json"
                },
                "body": {
                    "username": "testuser",
                    "email": "testuser@example.com"
                }
            },
            "expected_response": {
                "status_code": 201,
                "body": {
                    "id": 1,
                    "username": "testuser",
                    "email": "testuser@example.com",
                    "createdAt": "2023-10-01T12:00:00Z"
                }
            },
            "description": "Verify that a user can be created successfully with valid username and email."
        },
        {
            "test_name": "Create User Missing Username",
            "request": {
                "method": "POST",
                "path": "/users",
                "headers": {
                    "Content-Type": "application/json"
                },
                "body": {
                    "email": "testuser@example.com"
                }
            },
            "expected_response": {
                "status_code": 400,
                "body": {}
            },
            "description": "Verify that the API returns a 400 error when the username is missing."
        },
        {
            "test_name": "Create User Missing Email",
            "request": {
                "method": "POST",
                "path": "/users",
                "headers": {
                    "Content-Type": "application/json"
                },
                "body": {
                    "username": "testuser"
                }
            },
            "expected_response": {
                "status_code": 400,
                "body": {}
            },
            "description": "Verify that the API returns a 400 error when the email is missing."
        },
        {
            "test_name": "Create User Invalid Email Format",
            "request": {
                "method": "POST",
                "path": "/users",
                "headers": {
                    "Content-Type": "application/json"
                },
                "body": {
                    "username": "testuser",
                    "email": "invalid-email-format"
                }
            },
            "expected_response": {
                "status_code": 400,
                "body": {}
            },
            "description": "Verify that the API returns a 400 error when the email format is invalid."
        },
        {
            "test_name": "Create User Duplicate Username",
            "request": {
                "method": "POST",
                "path": "/users",
                "headers": {
                    "Content-Type": "application/json"
                },
                "body": {
                    "username": "existinguser",
                    "email": "newuser@example.com"
                }
            },
            "expected_response": {
                "status_code": 400,
                "body": {}
            },
            "description": "Verify that the API returns a 400 error when the username already exists."
        }
    ],
    [
        {
            "test_name": "Get User - Valid User ID",
            "request": {
                "method": "get",
                "path": "/users/1",
                "headers": {},
                "body": {}
            },
            "expected_response": {
                "status_code": 200,
                "body": {
                    "id": 1,
                    "username": "testuser",
                    "email": "testuser@example.com",
                    "createdAt": "2023-01-01T00:00:00Z"
                }
            },
            "description": "Verifies that the API returns a successful response for a valid user ID."
        },
        {
            "test_name": "Get User - Invalid User ID",
            "request": {
                "method": "get",
                "path": "/users/9999",
                "headers": {},
                "body": {}
            },
            "expected_response": {
                "status_code": 404,
                "body": {}
            },
            "description": "Verifies that the API returns a 404 Not Found response for a user ID that does not exist."
        },
        {
            "test_name": "Get User - Missing User ID",
            "request": {
                "method": "get",
                "path": "/users/",
                "headers": {},
                "body": {}
            },
            "expected_response": {
                "status_code": 404,
                "body": {}
            },
            "description": "Verifies that the API returns a 404 Not Found response when the user ID is missing."
        },
        {
            "test_name": "Get User - Non-integer User ID",
            "request": {
                "method": "get",
                "path": "/users/abc",
                "headers": {},
                "body": {}
            },
            "expected_response": {
                "status_code": 404,
                "body": {}
            },
            "description": "Verifies that the API returns a 404 Not Found response when the user ID is not an integer."
        },
        {
            "test_name": "Get User - User ID as Negative Integer",
            "request": {
                "method": "get",
                "path": "/users/-1",
                "headers": {},
                "body": {}
            },
            "expected_response": {
                "status_code": 404,
                "body": {}
            },
            "description": "Verifies that the API returns a 404 Not Found response when the user ID is a negative integer."
        }
    ],
    [
        {
            "test_name": "Update User Successfully",
            "request": {
                "method": "PUT",
                "path": "/users/1",
                "headers": {
                    "Content-Type": "application/json"
                },
                "body": {
                    "username": "newUsername",
                    "email": "newEmail@example.com"
                }
            },
            "expected_response": {
                "status_code": 200,
                "body": {
                    "id": 1,
                    "username": "newUsername",
                    "email": "newEmail@example.com",
                    "createdAt": "2023-10-01T10:00:00Z"
                }
            },
            "description": "Verify that a user is updated successfully with valid input."
        },
        {
            "test_name": "User Not Found",
            "request": {
                "method": "PUT",
                "path": "/users/999",
                "headers": {
                    "Content-Type": "application/json"
                },
                "body": {
                    "username": "newUsername",
                    "email": "newEmail@example.com"
                }
            },
            "expected_response": {
                "status_code": 404,
                "body": {}
            },
            "description": "Verify that a 404 error is returned when trying to update a non-existent user."
        },
        {
            "test_name": "Invalid Input - Missing Username",
            "request": {
                "method": "PUT",
                "path": "/users/1",
                "headers": {
                    "Content-Type": "application/json"
                },
                "body": {
                    "email": "newEmail@example.com"
                }
            },
            "expected_response": {
                "status_code": 400,
                "body": {}
            },
            "description": "Verify that a 400 error is returned when the request body is missing the username."
        },
        {
            "test_name": "Invalid Input - Missing Email",
            "request": {
                "method": "PUT",
                "path": "/users/1",
                "headers": {
                    "Content-Type": "application/json"
                },
                "body": {
                    "username": "newUsername"
                }
            },
            "expected_response": {
                "status_code": 400,
                "body": {}
            },
            "description": "Verify that a 400 error is returned when the request body is missing the email."
        },
        {
            "test_name": "Invalid Input - Invalid UserId Format",
            "request": {
                "method": "PUT",
                "path": "/users/abc",
                "headers": {
                    "Content-Type": "application/json"
                },
                "body": {
                    "username": "newUsername",
                    "email": "newEmail@example.com"
                }
            },
            "expected_response": {
                "status_code": 404,
                "body": {}
            },
            "description": "Verify that the API returns a 404 error when an invalid userId format is provided."
        },
        {
            "test_name": "Invalid Email Format",
            "request": {
                "method": "PUT",
                "path": "/users/1",
                "headers": {
                    "Content-Type": "application/json"
                },
                "body": {
                    "username": "newUsername",
                    "email": "invalidEmailFormat"
                }
            },
            "expected_response": {
                "status_code": 400,
                "body": {}
            },
            "description": "Verify that a 400 error is returned when an invalid email format is provided."
        }
    ],
    [
        {
            "test_name": "Delete User Success",
            "request": {
                "method": "DELETE",
                "path": "/users/1",
                "headers": {},
                "body": {}
            },
            "expected_response": {
                "status_code": 204,
                "body": {}
            },
            "description": "Verifies that a user can be successfully deleted when a valid userId is provided."
        },
        {
            "test_name": "Delete User Not Found",
            "request": {
                "method": "DELETE",
                "path": "/users/9999",
                "headers": {},
                "body": {}
            },
            "expected_response": {
                "status_code": 404,
                "body": {}
            },
            "description": "Verifies that an appropriate error message is returned when attempting to delete a user that does not exist."
        },
        {
            "test_name": "Delete User Invalid UserId",
            "request": {
                "method": "DELETE",
                "path": "/users/abc",
                "headers": {},
                "body": {}
            },
            "expected_response": {
                "status_code": 404,
                "body": {}
            },
            "description": "Verifies that the API returns a 404 error when an invalid userId format is provided."
        },
        {
            "test_name": "Delete User Without UserId",
            "request": {
                "method": "DELETE",
                "path": "/users/",
                "headers": {},
                "body": {}
            },
            "expected_response": {
                "status_code": 404,
                "body": {}
            },
            "description": "Verifies that the API returns a 404 error when no userId is provided in the path."
        },
        {
            "test_name": "Delete User Unauthorized Access",
            "request": {
                "method": "DELETE",
                "path": "/users/1",
                "headers": {
                    "Authorization": "Bearer invalid_token"
                },
                "body": {}
            },
            "expected_response": {
                "status_code": 401,
                "body": {}
            },
            "description": "Verifies that the API returns a 401 Unauthorized response when an invalid authentication token is provided."
        }
    ]
]