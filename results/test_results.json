[
    {
        "test_name": "Update pet with valid data",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Update pet with missing name",
        "passed": false,
        "expected_status": 405,
        "actual_status": 400,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:14:32.401Z",
            "status": 400,
            "error": "Bad Request",
            "errors": [
                {
                    "codes": [
                        "NotNull.pet.name",
                        "NotNull.name",
                        "NotNull.java.lang.String",
                        "NotNull"
                    ],
                    "arguments": [
                        {
                            "codes": [
                                "pet.name",
                                "name"
                            ],
                            "arguments": null,
                            "defaultMessage": "name",
                            "code": "name"
                        }
                    ],
                    "defaultMessage": "must not be null",
                    "objectName": "pet",
                    "field": "name",
                    "rejectedValue": null,
                    "bindingFailure": false,
                    "code": "NotNull"
                }
            ],
            "message": "Validation failed for object='pet'. Error count: 1",
            "path": "/v3/pet"
        }
    },
    {
        "test_name": "Update pet with invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Add valid pet",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Add pet missing name",
        "passed": false,
        "expected_status": 405,
        "actual_status": 400,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:14:36.763Z",
            "status": 400,
            "error": "Bad Request",
            "errors": [
                {
                    "codes": [
                        "NotNull.pet.name",
                        "NotNull.name",
                        "NotNull.java.lang.String",
                        "NotNull"
                    ],
                    "arguments": [
                        {
                            "codes": [
                                "pet.name",
                                "name"
                            ],
                            "arguments": null,
                            "defaultMessage": "name",
                            "code": "name"
                        }
                    ],
                    "defaultMessage": "must not be null",
                    "objectName": "pet",
                    "field": "name",
                    "rejectedValue": null,
                    "bindingFailure": false,
                    "code": "NotNull"
                }
            ],
            "message": "Validation failed for object='pet'. Error count: 1",
            "path": "/v3/pet"
        }
    },
    {
        "test_name": "Add pet with invalid status",
        "passed": false,
        "expected_status": 405,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Find pets by available status",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Find pets by pending status",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Find pets by sold status",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Invalid status value",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Fetch pets with valid tags",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Fetch pets with empty tags",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Fetch pets with invalid tag value",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pet by valid ID",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pet by invalid ID",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pet by negative ID",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Update pet with valid data",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "message": "Pet updated successfully"
        },
        "actual_body": null
    },
    {
        "test_name": "Update pet with missing name",
        "passed": false,
        "expected_status": 405,
        "actual_status": 200,
        "expected_body": {
            "error": "Invalid input"
        },
        "actual_body": null
    },
    {
        "test_name": "Update pet with invalid petId",
        "passed": false,
        "expected_status": 405,
        "actual_status": 400,
        "expected_body": {
            "error": "Invalid input"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:14:51.687Z",
            "status": 400,
            "error": "Bad Request",
            "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: \"abc\"",
            "path": "/v3/pet/abc"
        }
    },
    {
        "test_name": "Delete pet with valid petId",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Delete pet with invalid petId",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Invalid pet value"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:14:54.034Z",
            "status": 400,
            "error": "Bad Request",
            "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: \"abc\"",
            "path": "/v3/pet/abc"
        }
    },
    {
        "test_name": "Delete pet without petId",
        "passed": false,
        "expected_status": 404,
        "actual_status": 405,
        "expected_body": {
            "error": "Pet not found"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:14:54.051Z",
            "status": 405,
            "error": "Method Not Allowed",
            "message": "Request method 'DELETE' not supported",
            "path": "/v3/pet/"
        }
    },
    {
        "test_name": "Upload image with valid petId and file",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {
            "code": 0,
            "type": "type",
            "message": "message"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:14:57.078Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "Failed to parse multipart servlet request; nested exception is java.io.IOException: org.apache.tomcat.util.http.fileupload.FileUploadException: the request was rejected because no multipart boundary was found",
            "path": "/v3/pet/1/uploadImage"
        }
    },
    {
        "test_name": "Upload image with missing petId",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "code": 400,
            "type": "error",
            "message": "petId is required"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:14:57.093Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "The request was rejected because the URL was not normalized.",
            "path": "/v3/pet//uploadImage"
        }
    },
    {
        "test_name": "Upload image without file",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "code": 400,
            "type": "error",
            "message": "file is required"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:14:57.107Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "Failed to parse multipart servlet request; nested exception is java.io.IOException: org.apache.tomcat.util.http.fileupload.FileUploadException: the request was rejected because no multipart boundary was found",
            "path": "/v3/pet/1/uploadImage"
        }
    },
    {
        "test_name": "Get inventory successfully",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:15:00.939Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "No message available",
            "path": "/v3/store/inventory"
        }
    },
    {
        "test_name": "Get inventory with no items",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:15:00.953Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "No message available",
            "path": "/v3/store/inventory"
        }
    },
    {
        "test_name": "Get inventory with valid headers",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:15:00.967Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "No message available",
            "path": "/v3/store/inventory"
        }
    },
    {
        "test_name": "Place Order with Valid Data",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Place Order with Missing Pet ID",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Place Order with Invalid Status",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Valid order ID",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Invalid order ID - too low",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Invalid order ID - too high",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Delete order with valid ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:15:13.523Z",
            "status": 404,
            "error": "Not Found",
            "message": "Response status 404",
            "path": "/v3/store/order/12345"
        }
    },
    {
        "test_name": "Delete order with invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "error": "Invalid ID supplied"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:15:13.537Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "For input string: \"invalid_id\"",
            "path": "/v3/store/order/invalid_id"
        }
    },
    {
        "test_name": "Delete non-existing order",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "error": "Order not found"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:15:13.550Z",
            "status": 404,
            "error": "Not Found",
            "message": "Response status 404",
            "path": "/v3/store/order/99999"
        }
    },
    {
        "test_name": "Create user with all valid fields",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Create user with missing required fields",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "error": "Missing required fields"
        },
        "actual_body": null
    },
    {
        "test_name": "Create user with invalid email format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "error": "Invalid email format"
        },
        "actual_body": null
    },
    {
        "test_name": "Create users with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 400,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:15:20.447Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithArray"
        }
    },
    {
        "test_name": "Create users with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Missing required fields"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:15:20.458Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithArray"
        }
    },
    {
        "test_name": "Create users with invalid email format",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Invalid email format"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:15:20.469Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithArray"
        }
    },
    {
        "test_name": "Create users with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 400,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:15:50.953Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithList"
        }
    },
    {
        "test_name": "Create users with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "First name is required"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:15:50.967Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithList"
        }
    },
    {
        "test_name": "Create users with invalid email format",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Invalid email format"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:15:50.980Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithList"
        }
    },
    {
        "test_name": "Successful login with valid credentials",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Login attempt with invalid username",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Login attempt with missing password",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Successful logout",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "message": "successful operation"
        },
        "actual_body": null
    },
    {
        "test_name": "Logout without session",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "message": "successful operation"
        },
        "actual_body": null
    },
    {
        "test_name": "Logout while already logged out",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "message": "successful operation"
        },
        "actual_body": null
    },
    {
        "test_name": "Get user with valid username",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get user with invalid username",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get user with missing username parameter",
        "passed": false,
        "expected_status": 400,
        "actual_status": 405,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:16:00.357Z",
            "status": 405,
            "error": "Method Not Allowed",
            "message": "Request method 'GET' not supported",
            "path": "/v3/user/"
        }
    },
    {
        "test_name": "Update user with valid data",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "message": "User updated successfully"
        },
        "actual_body": null
    },
    {
        "test_name": "Update user with missing required fields",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "error": "Invalid user supplied"
        },
        "actual_body": null
    },
    {
        "test_name": "Update non-existent user",
        "passed": false,
        "expected_status": 404,
        "actual_status": 200,
        "expected_body": {
            "error": "User not found"
        },
        "actual_body": null
    },
    {
        "test_name": "Delete user with valid username",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Delete user with invalid username format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 404,
        "expected_body": {
            "error": "Invalid username supplied"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:16:08.243Z",
            "status": 404,
            "error": "Not Found",
            "message": "Response status 404",
            "path": "/v3/user/1234"
        }
    },
    {
        "test_name": "Delete non-existent user",
        "passed": false,
        "expected_status": 404,
        "actual_status": 200,
        "expected_body": {
            "error": "User not found"
        },
        "actual_body": null
    },
    {
        "test_name": "Update pet with valid data",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Update pet with missing name",
        "passed": false,
        "expected_status": 405,
        "actual_status": 400,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:16:11.548Z",
            "status": 400,
            "error": "Bad Request",
            "errors": [
                {
                    "codes": [
                        "NotNull.pet.name",
                        "NotNull.name",
                        "NotNull.java.lang.String",
                        "NotNull"
                    ],
                    "arguments": [
                        {
                            "codes": [
                                "pet.name",
                                "name"
                            ],
                            "arguments": null,
                            "defaultMessage": "name",
                            "code": "name"
                        }
                    ],
                    "defaultMessage": "must not be null",
                    "objectName": "pet",
                    "field": "name",
                    "rejectedValue": null,
                    "bindingFailure": false,
                    "code": "NotNull"
                }
            ],
            "message": "Validation failed for object='pet'. Error count: 1",
            "path": "/v3/pet"
        }
    },
    {
        "test_name": "Update pet with invalid status",
        "passed": false,
        "expected_status": 405,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Add valid pet",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "message": "Pet added successfully"
        },
        "actual_body": null
    },
    {
        "test_name": "Add pet with missing name",
        "passed": false,
        "expected_status": 405,
        "actual_status": 400,
        "expected_body": {
            "message": "Invalid input"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:16:16.609Z",
            "status": 400,
            "error": "Bad Request",
            "errors": [
                {
                    "codes": [
                        "NotNull.pet.name",
                        "NotNull.name",
                        "NotNull.java.lang.String",
                        "NotNull"
                    ],
                    "arguments": [
                        {
                            "codes": [
                                "pet.name",
                                "name"
                            ],
                            "arguments": null,
                            "defaultMessage": "name",
                            "code": "name"
                        }
                    ],
                    "defaultMessage": "must not be null",
                    "objectName": "pet",
                    "field": "name",
                    "rejectedValue": null,
                    "bindingFailure": false,
                    "code": "NotNull"
                }
            ],
            "message": "Validation failed for object='pet'. Error count: 1",
            "path": "/v3/pet"
        }
    },
    {
        "test_name": "Add pet with invalid status",
        "passed": false,
        "expected_status": 405,
        "actual_status": 200,
        "expected_body": {
            "message": "Invalid input"
        },
        "actual_body": null
    },
    {
        "test_name": "Get pets by available status",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pets by pending status",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pets by sold status",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Invalid status value",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pets by a single valid tag",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pets by multiple valid tags",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pets with invalid tag",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pet by valid ID",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pet by ID that does not exist",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pet with invalid ID format",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Update pet with valid data",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "message": "Pet updated successfully"
        },
        "actual_body": null
    },
    {
        "test_name": "Update pet with missing name",
        "passed": false,
        "expected_status": 405,
        "actual_status": 200,
        "expected_body": {
            "error": "Invalid input"
        },
        "actual_body": null
    },
    {
        "test_name": "Update pet with invalid petId",
        "passed": false,
        "expected_status": 405,
        "actual_status": 400,
        "expected_body": {
            "error": "Invalid input"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:16:30.976Z",
            "status": 400,
            "error": "Bad Request",
            "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: \"abc\"",
            "path": "/v3/pet/abc"
        }
    },
    {
        "test_name": "Delete pet with valid petId",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Delete pet with invalid petId",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "message": "Invalid pet value"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:16:33.290Z",
            "status": 400,
            "error": "Bad Request",
            "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: \"invalidId\"",
            "path": "/v3/pet/invalidId"
        }
    },
    {
        "test_name": "Delete pet without petId",
        "passed": false,
        "expected_status": 400,
        "actual_status": 405,
        "expected_body": {
            "message": "Invalid pet value"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:16:33.302Z",
            "status": 405,
            "error": "Method Not Allowed",
            "message": "Request method 'DELETE' not supported",
            "path": "/v3/pet/"
        }
    },
    {
        "test_name": "Upload image for existing pet",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {
            "code": 0,
            "type": "image",
            "message": "Image uploaded successfully"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:16:36.191Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "Failed to parse multipart servlet request; nested exception is java.io.IOException: org.apache.tomcat.util.http.fileupload.FileUploadException: the request was rejected because no multipart boundary was found",
            "path": "/v3/pet/123/uploadImage"
        }
    },
    {
        "test_name": "Upload image without additional metadata",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {
            "code": 0,
            "type": "image",
            "message": "Image uploaded successfully"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:16:36.203Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "Failed to parse multipart servlet request; nested exception is java.io.IOException: org.apache.tomcat.util.http.fileupload.FileUploadException: the request was rejected because no multipart boundary was found",
            "path": "/v3/pet/456/uploadImage"
        }
    },
    {
        "test_name": "Upload image for non-existent pet",
        "passed": false,
        "expected_status": 404,
        "actual_status": 500,
        "expected_body": {
            "code": 1,
            "type": "error",
            "message": "Pet not found"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:16:36.215Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "Failed to parse multipart servlet request; nested exception is java.io.IOException: org.apache.tomcat.util.http.fileupload.FileUploadException: the request was rejected because no multipart boundary was found",
            "path": "/v3/pet/999/uploadImage"
        }
    },
    {
        "test_name": "Valid Inventory Retrieval",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:16:41.150Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "No message available",
            "path": "/v3/store/inventory"
        }
    },
    {
        "test_name": "Inventory Returns Non-empty Object",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {
            "item1": 10,
            "item2": 5
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:16:41.165Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "No message available",
            "path": "/v3/store/inventory"
        }
    },
    {
        "test_name": "Inventory Returns Correct Data Types",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {
            "itemA": 15,
            "itemB": 20
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:16:41.178Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "No message available",
            "path": "/v3/store/inventory"
        }
    },
    {
        "test_name": "Place order successfully",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Place order with missing petId",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Place order with invalid status",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Fetch existing order with valid ID",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Fetch order with minimum ID",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Fetch order with ID above maximum",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Fetch order with invalid ID",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Delete order with valid ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:16:54.890Z",
            "status": 404,
            "error": "Not Found",
            "message": "Response status 404",
            "path": "/v3/store/order/12345"
        }
    },
    {
        "test_name": "Delete order with invalid ID format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "message": "Invalid ID supplied"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:16:54.903Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "For input string: \"invalid-id\"",
            "path": "/v3/store/order/invalid-id"
        }
    },
    {
        "test_name": "Delete non-existent order",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "message": "Order not found"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:16:54.919Z",
            "status": 404,
            "error": "Not Found",
            "message": "Response status 404",
            "path": "/v3/store/order/99999"
        }
    },
    {
        "test_name": "Create user with valid data",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "message": "User created successfully"
        },
        "actual_body": null
    },
    {
        "test_name": "Create user with missing required fields",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "error": "Missing required fields"
        },
        "actual_body": null
    },
    {
        "test_name": "Create user with invalid email format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "error": "Invalid email format"
        },
        "actual_body": null
    },
    {
        "test_name": "Create multiple users with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 400,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:17:02.959Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithArray"
        }
    },
    {
        "test_name": "Create users with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Missing required fields"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:17:02.970Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithArray"
        }
    },
    {
        "test_name": "Create users with invalid email format",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Invalid email format"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:17:02.982Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithArray"
        }
    },
    {
        "test_name": "Create users with valid user list",
        "passed": false,
        "expected_status": 200,
        "actual_status": 400,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:17:13.462Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithList"
        }
    },
    {
        "test_name": "Create users with missing email",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Email is required"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:17:13.475Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithList"
        }
    },
    {
        "test_name": "Create users with invalid userStatus",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Invalid user status"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:17:13.495Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithList"
        }
    },
    {
        "test_name": "Successful login with valid credentials",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Login failure with invalid username",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Login failure with empty password",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Successful Logout",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Logout Without Authorization",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Logout with Invalid Session",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Fetch user details for existing user",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Fetch user details for non-existing user",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Fetch user details with invalid username format",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Update user successfully",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "message": "User updated successfully"
        },
        "actual_body": null
    },
    {
        "test_name": "Invalid user supplied",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "error": "Invalid user supplied"
        },
        "actual_body": null
    },
    {
        "test_name": "User not found",
        "passed": false,
        "expected_status": 404,
        "actual_status": 200,
        "expected_body": {
            "error": "User not found"
        },
        "actual_body": null
    },
    {
        "test_name": "Delete user successfully",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Invalid username supplied",
        "passed": false,
        "expected_status": 400,
        "actual_status": 405,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:17:30.058Z",
            "status": 405,
            "error": "Method Not Allowed",
            "message": "Request method 'DELETE' not supported",
            "path": "/v3/user/"
        }
    },
    {
        "test_name": "User not found",
        "passed": false,
        "expected_status": 404,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Update Pet with valid data",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Update Pet with missing required fields",
        "passed": false,
        "expected_status": 405,
        "actual_status": 400,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:17:33.635Z",
            "status": 400,
            "error": "Bad Request",
            "errors": [
                {
                    "codes": [
                        "NotNull.pet.name",
                        "NotNull.name",
                        "NotNull.java.lang.String",
                        "NotNull"
                    ],
                    "arguments": [
                        {
                            "codes": [
                                "pet.name",
                                "name"
                            ],
                            "arguments": null,
                            "defaultMessage": "name",
                            "code": "name"
                        }
                    ],
                    "defaultMessage": "must not be null",
                    "objectName": "pet",
                    "field": "name",
                    "rejectedValue": null,
                    "bindingFailure": false,
                    "code": "NotNull"
                }
            ],
            "message": "Validation failed for object='pet'. Error count: 1",
            "path": "/v3/pet"
        }
    },
    {
        "test_name": "Update Pet with invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Add a valid pet",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "message": "Pet added successfully"
        },
        "actual_body": null
    },
    {
        "test_name": "Add pet with missing name",
        "passed": false,
        "expected_status": 405,
        "actual_status": 400,
        "expected_body": {
            "message": "Invalid input"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:17:37.784Z",
            "status": 400,
            "error": "Bad Request",
            "errors": [
                {
                    "codes": [
                        "NotNull.pet.name",
                        "NotNull.name",
                        "NotNull.java.lang.String",
                        "NotNull"
                    ],
                    "arguments": [
                        {
                            "codes": [
                                "pet.name",
                                "name"
                            ],
                            "arguments": null,
                            "defaultMessage": "name",
                            "code": "name"
                        }
                    ],
                    "defaultMessage": "must not be null",
                    "objectName": "pet",
                    "field": "name",
                    "rejectedValue": null,
                    "bindingFailure": false,
                    "code": "NotNull"
                }
            ],
            "message": "Validation failed for object='pet'. Error count: 1",
            "path": "/v3/pet"
        }
    },
    {
        "test_name": "Add pet with invalid status",
        "passed": false,
        "expected_status": 405,
        "actual_status": 200,
        "expected_body": {
            "message": "Invalid input"
        },
        "actual_body": null
    },
    {
        "test_name": "Get pets by available status",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pets by pending status",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Invalid status value",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pets by valid tags",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pets by single valid tag",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pets with invalid tag value",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get existing pet by valid ID",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pet by ID that does not exist",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get pet by invalid ID format",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Update pet with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 415,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:17:51.377Z",
            "status": 415,
            "error": "Unsupported Media Type",
            "message": "Content type 'application/json' not supported",
            "path": "/v3/pet/1"
        }
    },
    {
        "test_name": "Update pet with missing status",
        "passed": false,
        "expected_status": 405,
        "actual_status": 415,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:17:51.394Z",
            "status": 415,
            "error": "Unsupported Media Type",
            "message": "Content type 'application/json' not supported",
            "path": "/v3/pet/2"
        }
    },
    {
        "test_name": "Update pet with invalid petId",
        "passed": false,
        "expected_status": 405,
        "actual_status": 415,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:17:51.412Z",
            "status": 415,
            "error": "Unsupported Media Type",
            "message": "Content type 'application/json' not supported",
            "path": "/v3/pet/abc"
        }
    },
    {
        "test_name": "Delete existing pet",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Delete pet with invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "error": "Invalid pet value"
        },
        "actual_body": null
    },
    {
        "test_name": "Delete pet without API key",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Upload image with valid petId and file",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {
            "code": 0,
            "type": "type",
            "message": "message"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:17:56.905Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "Failed to parse multipart servlet request; nested exception is java.io.IOException: org.apache.tomcat.util.http.fileupload.FileUploadException: the request was rejected because no multipart boundary was found",
            "path": "/v3/pet/123/uploadImage"
        }
    },
    {
        "test_name": "Upload image with missing petId",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "code": 400,
            "type": "error",
            "message": "petId is required"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:17:56.926Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "The request was rejected because the URL was not normalized.",
            "path": "/v3/pet//uploadImage"
        }
    },
    {
        "test_name": "Upload image without file",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "code": 400,
            "type": "error",
            "message": "file is required"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:17:56.941Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "Failed to parse multipart servlet request; nested exception is java.io.IOException: org.apache.tomcat.util.http.fileupload.FileUploadException: the request was rejected because no multipart boundary was found",
            "path": "/v3/pet/456/uploadImage"
        }
    },
    {
        "test_name": "Get inventory successfully",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:18:01.507Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "No message available",
            "path": "/v3/store/inventory"
        }
    },
    {
        "test_name": "Get inventory returns an object with integer values",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {
            "item1": 10,
            "item2": 5,
            "item3": 20
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:18:01.521Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "No message available",
            "path": "/v3/store/inventory"
        }
    },
    {
        "test_name": "Get inventory returns an empty object",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:18:01.532Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "No message available",
            "path": "/v3/store/inventory"
        }
    },
    {
        "test_name": "Place order with valid data",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Place order with missing petId",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Place order with invalid status",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get Order by Valid ID",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get Order by ID Out of Range",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Get Order by Invalid ID",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Delete order with valid ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:18:21.662Z",
            "status": 404,
            "error": "Not Found",
            "message": "Response status 404",
            "path": "/v3/store/order/12345"
        }
    },
    {
        "test_name": "Delete order with invalid ID format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "error": "Invalid ID supplied"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:18:21.678Z",
            "status": 500,
            "error": "Internal Server Error",
            "message": "For input string: \"invalid-id\"",
            "path": "/v3/store/order/invalid-id"
        }
    },
    {
        "test_name": "Delete order that does not exist",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "error": "Order not found"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:18:21.690Z",
            "status": 404,
            "error": "Not Found",
            "message": "Response status 404",
            "path": "/v3/store/order/99999"
        }
    },
    {
        "test_name": "Create user with valid data",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Create user with missing required fields",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "error": "Missing required fields"
        },
        "actual_body": null
    },
    {
        "test_name": "Create user with invalid email format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "error": "Invalid email format"
        },
        "actual_body": null
    },
    {
        "test_name": "Create users with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 400,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:18:29.420Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithArray"
        }
    },
    {
        "test_name": "Create users with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Missing required fields"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:18:29.433Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithArray"
        }
    },
    {
        "test_name": "Create users with invalid email format",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Invalid email format"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:18:29.445Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithArray"
        }
    },
    {
        "test_name": "Create users with valid user list",
        "passed": false,
        "expected_status": 200,
        "actual_status": 400,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:18:49.450Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithList"
        }
    },
    {
        "test_name": "Create users with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Missing required fields"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:18:49.463Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithList"
        }
    },
    {
        "test_name": "Create users with invalid email format",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Invalid email format"
        },
        "actual_body": {
            "timestamp": "2024-09-11T22:18:49.478Z",
            "status": 400,
            "error": "Bad Request",
            "message": "JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]",
            "path": "/v3/user/createWithList"
        }
    },
    {
        "test_name": "Successful login with valid credentials",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Login attempt with invalid username",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Login attempt with empty password",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Successful logout user",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "message": "Logout successful"
        },
        "actual_body": null
    },
    {
        "test_name": "Logout without authorization token",
        "passed": false,
        "expected_status": 401,
        "actual_status": 200,
        "expected_body": {
            "error": "Unauthorized"
        },
        "actual_body": null
    },
    {
        "test_name": "Logout with expired token",
        "passed": false,
        "expected_status": 401,
        "actual_status": 200,
        "expected_body": {
            "error": "Token has expired"
        },
        "actual_body": null
    },
    {
        "test_name": "Fetch existing user by username",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Fetch non-existing user",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Fetch user with invalid username format",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Update user successfully with valid data",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "message": "User updated successfully"
        },
        "actual_body": null
    },
    {
        "test_name": "Fail to update user due to invalid data",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "error": "Invalid user supplied"
        },
        "actual_body": null
    },
    {
        "test_name": "Fail to update user when user does not exist",
        "passed": false,
        "expected_status": 404,
        "actual_status": 200,
        "expected_body": {
            "error": "User not found"
        },
        "actual_body": null
    },
    {
        "test_name": "Delete user with valid username",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": null
    },
    {
        "test_name": "Delete user with invalid username",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:19:13.434Z",
            "status": 404,
            "error": "Not Found",
            "message": "Response status 404",
            "path": "/v3/user/invalid_user_123"
        }
    },
    {
        "test_name": "Delete user with missing username",
        "passed": false,
        "expected_status": 400,
        "actual_status": 405,
        "expected_body": {},
        "actual_body": {
            "timestamp": "2024-09-11T22:19:13.447Z",
            "status": 405,
            "error": "Method Not Allowed",
            "message": "Request method 'DELETE' not supported",
            "path": "/v3/user/"
        }
    }
]