[
    {
        "test_name": "Get visit details with valid visitId",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "description": "rabies shot",
            "date": "2023-10-01",
            "petId": 1
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:06.571186",
        "duration": 0.01396036148071289
    },
    {
        "test_name": "Get visit details with non-existing visitId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Visit not found.",
            "path": "/api/visits/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:06.580203",
        "duration": 0.008013725280761719
    },
    {
        "test_name": "Get visit details with invalid visitId",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/visits/-1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getVisit.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:37:06.587186",
        "duration": 0.005992412567138672
    },
    {
        "test_name": "Update visit with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "description": "rabies shot",
            "id": 1,
            "date": "2023-10-01",
            "petId": 1
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:10.999762",
        "duration": 0.008000373840332031
    },
    {
        "test_name": "Update visit with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/visits/1",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:37:11.006762",
        "duration": 0.005998134613037109
    },
    {
        "test_name": "Update visit with non-existent visitId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Visit not found.",
            "path": "/api/visits/999",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:11.015762",
        "duration": 0.00899958610534668
    },
    {
        "test_name": "Delete existing visit",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "description": "rabies shot",
            "id": 1,
            "date": "2023-09-01",
            "petId": 1
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:15.085691",
        "duration": 0.007975578308105469
    },
    {
        "test_name": "Delete visit with non-existing ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Visit not found.",
            "path": "/api/visits/999",
            "timestamp": "2023-09-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:15.095691",
        "duration": 0.008001565933227539
    },
    {
        "test_name": "Delete visit with invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/visits/-1",
            "timestamp": "2023-09-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "deleteVisit.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:37:15.101691",
        "duration": 0.006000518798828125
    },
    {
        "test_name": "Get vet details with valid ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "James",
            "lastName": "Carter",
            "id": 1,
            "specialties": [
                {
                    "id": 1,
                    "name": "radiology"
                }
            ]
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:18.901265",
        "duration": 0.006012678146362305
    },
    {
        "test_name": "Get vet details with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Vet not found.",
            "path": "/api/vets/999",
            "timestamp": "2023-10-01T10:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:18.911233",
        "duration": 0.008993387222290039
    },
    {
        "test_name": "Get vet details with invalid ID format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/vets/abc",
            "timestamp": "2023-10-01T10:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "Invalid type: string"
                }
            ]
        },
        "actual_body": {
            "className": "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException",
            "exMessage": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; For input string: \"abc\""
        },
        "timestamp": "2024-09-18T15:37:18.916259",
        "duration": 0.005026102066040039
    },
    {
        "test_name": "Update vet successfully with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "John",
            "lastName": "Doe",
            "id": 1,
            "specialties": [
                {
                    "id": 1,
                    "name": "surgery"
                }
            ]
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:24.027155",
        "duration": 0.013002872467041016
    },
    {
        "test_name": "Fail to update vet with missing lastName",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400,
            "path": "/api/vets/1",
            "timestamp": "2023-10-15T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "Missing required property 'lastName'"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:37:24.039179",
        "duration": 0.010024309158325195
    },
    {
        "test_name": "Fail to update vet with invalid vetId",
        "passed": false,
        "expected_status": 404,
        "actual_status": 500,
        "expected_body": {
            "error": "Not Found",
            "message": "Vet not found.",
            "status": 404,
            "path": "/api/vets/-1",
            "timestamp": "2023-10-15T12:00:00Z"
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "updateVet.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:37:24.046154",
        "duration": 0.006974220275878906
    },
    {
        "test_name": "Delete existing vet",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "James",
            "lastName": "Carter",
            "id": 1,
            "specialties": [
                {
                    "id": 1,
                    "name": "radiology"
                }
            ]
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:27.591389",
        "duration": 0.006024599075317383
    },
    {
        "test_name": "Delete non-existent vet",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Vet not found.",
            "path": "/api/vets/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:27.599538",
        "duration": 0.00718235969543457
    },
    {
        "test_name": "Delete vet with invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/vets/-1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "deleteVet.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:37:27.605505",
        "duration": 0.004998922348022461
    },
    {
        "test_name": "Get specialty with valid ID",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "id": 1,
            "name": "radiology"
        },
        "actual_body": {
            "id": 1,
            "name": "radiology"
        },
        "timestamp": "2024-09-18T15:37:31.291147",
        "duration": 0.008978128433227539
    },
    {
        "test_name": "Get specialty with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "error": "Not Found",
            "message": "Specialty not found.",
            "path": "/api/specialties/999",
            "status": 404,
            "timestamp": "2023-10-01T00:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:31.298144",
        "duration": 0.006997823715209961
    },
    {
        "test_name": "Get specialty with invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/specialties/-1",
            "status": 400,
            "timestamp": "2023-10-01T00:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getSpecialty.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:37:31.303010",
        "duration": 0.004044532775878906
    },
    {
        "test_name": "Update specialty with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 204,
        "expected_body": {
            "id": 1,
            "name": "radiology"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:36.057766",
        "duration": 0.009998083114624023
    },
    {
        "test_name": "Update specialty with missing name",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/specialties/1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:37:36.066765",
        "duration": 0.008001327514648438
    },
    {
        "test_name": "Update specialty with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Specialty not found.",
            "path": "/api/specialties/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:36.073798",
        "duration": 0.0060329437255859375
    },
    {
        "test_name": "Delete specialty with valid ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "radiology"
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: foreign key no action ; FK_VET_SPECIALTIES_SPECIALTIES table: VET_SPECIALTIES] [delete from specialties where id=?]; SQL [delete from specialties where id=?]; constraint [FK_VET_SPECIALTIES_SPECIALTIES]"
        },
        "timestamp": "2024-09-18T15:37:40.589957",
        "duration": 0.009002685546875
    },
    {
        "test_name": "Delete specialty with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "error": "Not Found",
            "message": "Specialty not found.",
            "path": "/api/specialties/999",
            "schemaValidationErrors": [],
            "status": 404,
            "timestamp": "2023-10-01T00:00:00Z"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:40.598959",
        "duration": 0.007000923156738281
    },
    {
        "test_name": "Delete specialty with invalid ID (negative number)",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/specialties/-1",
            "schemaValidationErrors": [],
            "status": 400,
            "timestamp": "2023-10-01T00:00:00Z"
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "deleteSpecialty.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:37:40.605959",
        "duration": 0.006999015808105469
    },
    {
        "test_name": "Get pet type with valid ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "cat"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:44.862787",
        "duration": 0.005738496780395508
    },
    {
        "test_name": "Get pet type with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet Type not found.",
            "path": "/api/pettypes/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:44.870787",
        "duration": 0.00699925422668457
    },
    {
        "test_name": "Get pet type with negative ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pettypes/-1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "Value must be greater than or equal to 0"
                }
            ]
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getPetType.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:37:44.876787",
        "duration": 0.004999637603759766
    },
    {
        "test_name": "Update pet type with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "dog"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:49.479747",
        "duration": 0.011964559555053711
    },
    {
        "test_name": "Update pet type with missing name",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pettypes/2",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:37:49.487744",
        "duration": 0.0059986114501953125
    },
    {
        "test_name": "Update pet type with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet Type not found.",
            "path": "/api/pettypes/999",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:49.494744",
        "duration": 0.0069997310638427734
    },
    {
        "test_name": "Delete existing pet type",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "cat"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:54.118335",
        "duration": 0.009964227676391602
    },
    {
        "test_name": "Delete pet type with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet type not found.",
            "path": "/api/pettypes/999",
            "timestamp": "2023-01-01T00:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:37:54.128338",
        "duration": 0.008999347686767578
    },
    {
        "test_name": "Delete pet type with invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pettypes/-1",
            "timestamp": "2023-01-01T00:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "The value must be greater than or equal to 0."
                }
            ]
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "deletePetType.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:37:54.136338",
        "duration": 0.006944179534912109
    },
    {
        "test_name": "Get existing pet by valid petId",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "Leo",
            "birthDate": "2020-01-01",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "ownerId": 1,
            "visits": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:00.169508",
        "duration": 0.005965232849121094
    },
    {
        "test_name": "Get pet with non-existing petId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet not found",
            "path": "/api/pets/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:00.181510",
        "duration": 0.00997471809387207
    },
    {
        "test_name": "Get pet with invalid petId (negative number)",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pets/-1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "[Path '/petId'] Instance type (-1) does not match any allowed primitive type (allowed: [\"integer\"])"
                }
            ]
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getPet.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:38:00.187509",
        "duration": 0.0059986114501953125
    },
    {
        "test_name": "Update pet successfully",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "Leo",
            "birthDate": "2020-01-01",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "visits": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:04.724160",
        "duration": 0.010967016220092773
    },
    {
        "test_name": "Update pet with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pets/1",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:38:04.732192",
        "duration": 0.007030963897705078
    },
    {
        "test_name": "Update pet not found",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet not found",
            "path": "/api/pets/999",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:04.757191",
        "duration": 0.023995161056518555
    },
    {
        "test_name": "Delete pet with valid petId",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {},
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:08.262850",
        "duration": 0.013031244277954102
    },
    {
        "test_name": "Delete pet with non-existent petId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "error": "Not Found",
            "message": "Pet not found.",
            "status": 404,
            "path": "/api/pets/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:08.272823",
        "duration": 0.009030342102050781
    },
    {
        "test_name": "Delete pet with invalid petId (negative number)",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400,
            "path": "/api/pets/-1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "deletePet.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:38:08.278855",
        "duration": 0.004999876022338867
    },
    {
        "test_name": "Get owner details with valid ownerId",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "George",
            "lastName": "Franklin",
            "address": "110 W. Liberty St.",
            "city": "Madison",
            "telephone": "6085551023",
            "id": 1,
            "pets": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:12.447362",
        "duration": 0.010966777801513672
    },
    {
        "test_name": "Get owner details with non-existent ownerId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Owner not found.",
            "path": "/api/owners/999",
            "timestamp": "2023-10-01T10:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:12.459364",
        "duration": 0.00999593734741211
    },
    {
        "test_name": "Get owner details with invalid ownerId",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/-1",
            "timestamp": "2023-10-01T10:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "Owner ID must be a positive integer."
                }
            ]
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getOwner.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:38:12.466361",
        "duration": 0.006996631622314453
    },
    {
        "test_name": "Update owner with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "George",
            "lastName": "Franklin",
            "address": "110 W. Liberty St.",
            "city": "Madison",
            "telephone": "6085551023",
            "id": 1,
            "pets": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:24.059778",
        "duration": 0.010048151016235352
    },
    {
        "test_name": "Update owner with missing firstName",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "Missing required property 'firstName'"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:38:24.066777",
        "duration": 0.005997896194458008
    },
    {
        "test_name": "Update owner with invalid telephone format",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "Invalid format for property 'telephone'"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:38:24.075377",
        "duration": 0.0075817108154296875
    },
    {
        "test_name": "Delete owner with valid ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "George",
            "lastName": "Franklin",
            "address": "110 W. Liberty St.",
            "city": "Madison",
            "telephone": "6085551023",
            "id": 1,
            "pets": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:28.759674",
        "duration": 0.007008790969848633
    },
    {
        "test_name": "Delete owner with non-existing ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "path": "/api/owners/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "message": "Owner not found",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:28.770670",
        "duration": 0.009012937545776367
    },
    {
        "test_name": "Delete owner with invalid ID format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "path": "/api/owners/abc",
            "timestamp": "2023-10-01T12:00:00Z",
            "message": "Request failed schema validation",
            "schemaValidationErrors": [
                {
                    "message": "The value 'abc' is not a valid integer."
                }
            ]
        },
        "actual_body": {
            "className": "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException",
            "exMessage": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; For input string: \"abc\""
        },
        "timestamp": "2024-09-18T15:38:28.775696",
        "duration": 0.005026340484619141
    },
    {
        "test_name": "Retrieve existing pet details",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "Leo",
            "birthDate": "2020-01-01",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "ownerId": 1,
            "visits": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:32.765787",
        "duration": 0.009023189544677734
    },
    {
        "test_name": "Pet not found",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet not found.",
            "path": "/api/owners/1/pets/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:32.776799",
        "duration": 0.010015487670898438
    },
    {
        "test_name": "Bad request due to invalid ownerId",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/-1/pets/1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getOwnersPet.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:38:32.782769",
        "duration": 0.004984140396118164
    },
    {
        "test_name": "Update pet successfully",
        "passed": false,
        "expected_status": 204,
        "actual_status": 501,
        "expected_body": {},
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:39.207980",
        "duration": 0.00799560546875
    },
    {
        "test_name": "Bad request due to missing pet name",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "path": "/api/owners/1/pets/1",
            "timestamp": "2023-10-01T12:00:00Z",
            "message": "Request failed schema validation",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:38:39.215980",
        "duration": 0.00699925422668457
    },
    {
        "test_name": "Pet not found for this owner",
        "passed": false,
        "expected_status": 404,
        "actual_status": 501,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "path": "/api/owners/1/pets/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "message": "Pet not found for this owner",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:39.221980",
        "duration": 0.005999326705932617
    },
    {
        "test_name": "Fetch visits successfully",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": [
            {
                "id": 1,
                "description": "rabies shot",
                "date": "2023-10-01",
                "petId": 1
            }
        ],
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:43.358926",
        "duration": 0.009003877639770508
    },
    {
        "test_name": "No visits found",
        "passed": false,
        "expected_status": 304,
        "actual_status": 404,
        "expected_body": [],
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:43.366957",
        "duration": 0.007033586502075195
    },
    {
        "test_name": "Bad request due to invalid parameters",
        "passed": false,
        "expected_status": 400,
        "actual_status": 404,
        "expected_body": {
            "className": "BadRequest",
            "exMessage": "Invalid request parameters"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:38:43.374927",
        "duration": 0.007004499435424805
    },
    {
        "test_name": "Successful visit creation",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "description": "rabies shot",
            "id": 1,
            "date": "2023-10-01",
            "petId": 1
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: NOT NULL check constraint ; SYS_CT_10120 table: VISITS column: PET_ID] [insert into visits (visit_date,description,pet_id,id) values (?,?,?,default)]; SQL [insert into visits (visit_date,description,pet_id,id) values (?,?,?,default)]; constraint [null]"
        },
        "timestamp": "2024-09-18T15:38:48.349509",
        "duration": 0.016004562377929688
    },
    {
        "test_name": "Missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "schemaValidationErrors": [
                {
                    "message": "description must be at least 1 characters long"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:38:48.356538",
        "duration": 0.006037235260009766
    },
    {
        "test_name": "Invalid pet ID",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "schemaValidationErrors": [
                {
                    "message": "petId must be a positive integer"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:38:48.363503",
        "duration": 0.006964683532714844
    },
    {
        "test_name": "Successful retrieval of vets",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            }
        ],
        "actual_body": [
            {
                "firstName": "Helen",
                "lastName": "Leary",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 2
            },
            {
                "firstName": "Linda",
                "lastName": "Douglas",
                "specialties": [
                    {
                        "id": 3,
                        "name": "dentistry"
                    },
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 3
            },
            {
                "firstName": "Rafael",
                "lastName": "Ortega",
                "specialties": [
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 4
            },
            {
                "firstName": "Henry",
                "lastName": "Stevens",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 5
            },
            {
                "firstName": "Sharon",
                "lastName": "Jenkins",
                "specialties": [],
                "id": 6
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 7
            }
        ],
        "timestamp": "2024-09-18T15:38:52.062664",
        "duration": 0.02933478355407715
    },
    {
        "test_name": "Not modified response",
        "passed": false,
        "expected_status": 304,
        "actual_status": 200,
        "expected_body": [],
        "actual_body": [
            {
                "firstName": "Helen",
                "lastName": "Leary",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 2
            },
            {
                "firstName": "Linda",
                "lastName": "Douglas",
                "specialties": [
                    {
                        "id": 3,
                        "name": "dentistry"
                    },
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 3
            },
            {
                "firstName": "Rafael",
                "lastName": "Ortega",
                "specialties": [
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 4
            },
            {
                "firstName": "Henry",
                "lastName": "Stevens",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 5
            },
            {
                "firstName": "Sharon",
                "lastName": "Jenkins",
                "specialties": [],
                "id": 6
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 7
            }
        ],
        "timestamp": "2024-09-18T15:38:52.074669",
        "duration": 0.010921001434326172
    },
    {
        "test_name": "Request with invalid parameters",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "className": "BadRequest",
            "exMessage": "Invalid request format"
        },
        "actual_body": [
            {
                "firstName": "Helen",
                "lastName": "Leary",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 2
            },
            {
                "firstName": "Linda",
                "lastName": "Douglas",
                "specialties": [
                    {
                        "id": 3,
                        "name": "dentistry"
                    },
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 3
            },
            {
                "firstName": "Rafael",
                "lastName": "Ortega",
                "specialties": [
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 4
            },
            {
                "firstName": "Henry",
                "lastName": "Stevens",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 5
            },
            {
                "firstName": "Sharon",
                "lastName": "Jenkins",
                "specialties": [],
                "id": 6
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 7
            }
        ],
        "timestamp": "2024-09-18T15:38:52.085662",
        "duration": 0.010003089904785156
    },
    {
        "test_name": "Add vet with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 201,
        "expected_body": {
            "firstName": "James",
            "lastName": "Carter",
            "id": 1,
            "specialties": [
                {
                    "id": 1,
                    "name": "radiology"
                }
            ]
        },
        "actual_body": {
            "firstName": "James",
            "lastName": "Carter",
            "specialties": [
                {
                    "id": 1,
                    "name": "radiology"
                }
            ],
            "id": 8
        },
        "timestamp": "2024-09-18T15:38:57.125913",
        "duration": 0.011037111282348633
    },
    {
        "test_name": "Add vet with missing lastName",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/vets",
            "schemaValidationErrors": [
                {
                    "message": "[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: [\"string\"])"
                }
            ],
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:38:57.133878",
        "duration": 0.00698542594909668
    },
    {
        "test_name": "Add vet with invalid firstName",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/vets",
            "schemaValidationErrors": [
                {
                    "message": "[Path '/firstName'] Instance type (string) does not match pattern '[a-zA-Z]*'"
                }
            ],
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:38:57.139880",
        "duration": 0.005001068115234375
    },
    {
        "test_name": "Successfully add a user with all required fields",
        "passed": false,
        "expected_status": 200,
        "actual_status": 201,
        "expected_body": {
            "username": "john.doe",
            "password": "1234abc",
            "enabled": true,
            "roles": [
                {
                    "name": "admin"
                }
            ]
        },
        "actual_body": {
            "username": "john.doe",
            "password": "1234abc",
            "enabled": true,
            "roles": [
                {
                    "name": "ROLE_admin"
                }
            ]
        },
        "timestamp": "2024-09-18T15:39:05.384449",
        "duration": 0.009989500045776367
    },
    {
        "test_name": "Fail to add a user with missing username",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/users",
            "schemaValidationErrors": [
                {
                    "message": "Missing required property 'username'"
                }
            ],
            "status": 400,
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:39:05.390432",
        "duration": 0.004996538162231445
    },
    {
        "test_name": "Fail to add a user with invalid role name",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/users",
            "schemaValidationErrors": [
                {
                    "message": "Role name must not be empty"
                }
            ],
            "status": 400,
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:39:05.397432",
        "duration": 0.00600123405456543
    },
    {
        "test_name": "Get specialties successfully",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "id": 1,
                "name": "radiology"
            },
            {
                "id": 2,
                "name": "surgery"
            }
        ],
        "actual_body": [
            {
                "id": 1,
                "name": "radiology"
            },
            {
                "id": 2,
                "name": "surgery"
            },
            {
                "id": 3,
                "name": "dentistry"
            }
        ],
        "timestamp": "2024-09-18T15:39:08.411969",
        "duration": 0.01599717140197754
    },
    {
        "test_name": "Not modified response",
        "passed": false,
        "expected_status": 304,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": [
            {
                "id": 1,
                "name": "radiology"
            },
            {
                "id": 2,
                "name": "surgery"
            },
            {
                "id": 3,
                "name": "dentistry"
            }
        ],
        "timestamp": "2024-09-18T15:39:08.427979",
        "duration": 0.015010595321655273
    },
    {
        "test_name": "Bad request error response",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "className": "BadRequest",
            "exMessage": "Invalid request parameters"
        },
        "actual_body": [
            {
                "id": 1,
                "name": "radiology"
            },
            {
                "id": 2,
                "name": "surgery"
            },
            {
                "id": 3,
                "name": "dentistry"
            }
        ],
        "timestamp": "2024-09-18T15:39:08.441968",
        "duration": 0.011998176574707031
    },
    {
        "test_name": "Get pet types successfully",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "id": 1,
                "name": "cat"
            },
            {
                "id": 2,
                "name": "dog"
            }
        ],
        "actual_body": [
            {
                "name": "dog",
                "id": 2
            },
            {
                "name": "lizard",
                "id": 3
            },
            {
                "name": "snake",
                "id": 4
            },
            {
                "name": "bird",
                "id": 5
            },
            {
                "name": "hamster",
                "id": 6
            }
        ],
        "timestamp": "2024-09-18T15:39:17.982640",
        "duration": 0.005967617034912109
    },
    {
        "test_name": "No modifications found",
        "passed": false,
        "expected_status": 304,
        "actual_status": 200,
        "expected_body": [],
        "actual_body": [
            {
                "name": "dog",
                "id": 2
            },
            {
                "name": "lizard",
                "id": 3
            },
            {
                "name": "snake",
                "id": 4
            },
            {
                "name": "bird",
                "id": 5
            },
            {
                "name": "hamster",
                "id": 6
            }
        ],
        "timestamp": "2024-09-18T15:39:17.990635",
        "duration": 0.006992816925048828
    },
    {
        "test_name": "Bad Request error",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "className": "BadRequest",
            "exMessage": "Invalid request parameters"
        },
        "actual_body": [
            {
                "name": "dog",
                "id": 2
            },
            {
                "name": "lizard",
                "id": 3
            },
            {
                "name": "snake",
                "id": 4
            },
            {
                "name": "bird",
                "id": 5
            },
            {
                "name": "hamster",
                "id": 6
            }
        ],
        "timestamp": "2024-09-18T15:39:17.997666",
        "duration": 0.006045341491699219
    },
    {
        "test_name": "Not Found error",
        "passed": false,
        "expected_status": 404,
        "actual_status": 200,
        "expected_body": {
            "className": "NotFound",
            "exMessage": "Pet types not found"
        },
        "actual_body": [
            {
                "name": "dog",
                "id": 2
            },
            {
                "name": "lizard",
                "id": 3
            },
            {
                "name": "snake",
                "id": 4
            },
            {
                "name": "bird",
                "id": 5
            },
            {
                "name": "hamster",
                "id": 6
            }
        ],
        "timestamp": "2024-09-18T15:39:18.005632",
        "duration": 0.0069997310638427734
    },
    {
        "test_name": "Server error response",
        "passed": false,
        "expected_status": 500,
        "actual_status": 200,
        "expected_body": {
            "status": 500,
            "error": "Internal Server Error",
            "path": "/api/pettypes",
            "timestamp": "2023-10-01T00:00:00Z",
            "message": "An unexpected error occurred",
            "schemaValidationErrors": [],
            "trace": "com.example.exception.ServerErrorException: ..."
        },
        "actual_body": [
            {
                "name": "dog",
                "id": 2
            },
            {
                "name": "lizard",
                "id": 3
            },
            {
                "name": "snake",
                "id": 4
            },
            {
                "name": "bird",
                "id": 5
            },
            {
                "name": "hamster",
                "id": 6
            }
        ],
        "timestamp": "2024-09-18T15:39:18.013666",
        "duration": 0.007030487060546875
    },
    {
        "test_name": "Retrieve all pets successfully",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "id": 1,
                "name": "Leo",
                "birthDate": "2015-06-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "ownerId": 1,
                "visits": []
            }
        ],
        "actual_body": [
            {
                "name": "Basil",
                "birthDate": "2012-08-06",
                "type": {
                    "name": "hamster",
                    "id": 6
                },
                "id": 2,
                "ownerId": 2,
                "visits": []
            },
            {
                "name": "Rosy",
                "birthDate": "2011-04-17",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 3,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Jewel",
                "birthDate": "2010-03-07",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 4,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Iggy",
                "birthDate": "2010-11-30",
                "type": {
                    "name": "lizard",
                    "id": 3
                },
                "id": 5,
                "ownerId": 4,
                "visits": []
            },
            {
                "name": "George",
                "birthDate": "2010-01-20",
                "type": {
                    "name": "snake",
                    "id": 4
                },
                "id": 6,
                "ownerId": 5,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2011-08-06",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 9,
                "ownerId": 7,
                "visits": []
            },
            {
                "name": "Mulligan",
                "birthDate": "2007-02-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 10,
                "ownerId": 8,
                "visits": []
            },
            {
                "name": "Freddy",
                "birthDate": "2010-03-09",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 11,
                "ownerId": 9,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2010-06-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 12,
                "ownerId": 10,
                "visits": []
            }
        ],
        "timestamp": "2024-09-18T15:39:26.718316",
        "duration": 0.013998746871948242
    },
    {
        "test_name": "Handle not modified response",
        "passed": false,
        "expected_status": 304,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": [
            {
                "name": "Basil",
                "birthDate": "2012-08-06",
                "type": {
                    "name": "hamster",
                    "id": 6
                },
                "id": 2,
                "ownerId": 2,
                "visits": []
            },
            {
                "name": "Rosy",
                "birthDate": "2011-04-17",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 3,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Jewel",
                "birthDate": "2010-03-07",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 4,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Iggy",
                "birthDate": "2010-11-30",
                "type": {
                    "name": "lizard",
                    "id": 3
                },
                "id": 5,
                "ownerId": 4,
                "visits": []
            },
            {
                "name": "George",
                "birthDate": "2010-01-20",
                "type": {
                    "name": "snake",
                    "id": 4
                },
                "id": 6,
                "ownerId": 5,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2011-08-06",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 9,
                "ownerId": 7,
                "visits": []
            },
            {
                "name": "Mulligan",
                "birthDate": "2007-02-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 10,
                "ownerId": 8,
                "visits": []
            },
            {
                "name": "Freddy",
                "birthDate": "2010-03-09",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 11,
                "ownerId": 9,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2010-06-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 12,
                "ownerId": 10,
                "visits": []
            }
        ],
        "timestamp": "2024-09-18T15:39:26.734311",
        "duration": 0.014983654022216797
    },
    {
        "test_name": "Handle not found response",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "className": "NotFoundException",
            "exMessage": "Pet not found"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:39:26.742308",
        "duration": 0.006998538970947266
    },
    {
        "test_name": "Add a valid pet",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "name": "Leo",
            "birthDate": "2023-01-01",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "visits": []
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: NOT NULL check constraint ; SYS_CT_10110 table: PETS column: OWNER_ID] [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; SQL [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; constraint [null]"
        },
        "timestamp": "2024-09-18T15:39:31.931112",
        "duration": 0.010628223419189453
    },
    {
        "test_name": "Add a pet without a name",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "schemaValidationErrors": [
                {
                    "message": "Missing required property: name"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:39:31.937589",
        "duration": 0.004984617233276367
    },
    {
        "test_name": "Add a pet with an invalid birth date format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "schemaValidationErrors": [
                {
                    "message": "Invalid format for property: birthDate"
                }
            ]
        },
        "actual_body": {
            "className": "org.springframework.http.converter.HttpMessageNotReadableException",
            "exMessage": "JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"01-01-2023\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '01-01-2023' could not be parsed at index 0"
        },
        "timestamp": "2024-09-18T15:39:31.943426",
        "duration": 0.0050144195556640625
    },
    {
        "test_name": "Retrieve all owners without last name filter",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        ],
        "actual_body": [
            {
                "firstName": "Betty",
                "lastName": "Davis",
                "address": "638 Cardinal Ave.",
                "city": "Sun Prairie",
                "telephone": "6085551749",
                "id": 2,
                "pets": [
                    {
                        "name": "Basil",
                        "birthDate": "2012-08-06",
                        "type": {
                            "name": "hamster",
                            "id": 6
                        },
                        "id": 2,
                        "ownerId": 2,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Eduardo",
                "lastName": "Rodriquez",
                "address": "2693 Commerce St.",
                "city": "McFarland",
                "telephone": "6085558763",
                "id": 3,
                "pets": [
                    {
                        "name": "Jewel",
                        "birthDate": "2010-03-07",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 4,
                        "ownerId": 3,
                        "visits": []
                    },
                    {
                        "name": "Rosy",
                        "birthDate": "2011-04-17",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 3,
                        "ownerId": 3,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Harold",
                "lastName": "Davis",
                "address": "563 Friendly St.",
                "city": "Windsor",
                "telephone": "6085553198",
                "id": 4,
                "pets": [
                    {
                        "name": "Iggy",
                        "birthDate": "2010-11-30",
                        "type": {
                            "name": "lizard",
                            "id": 3
                        },
                        "id": 5,
                        "ownerId": 4,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Peter",
                "lastName": "McTavish",
                "address": "2387 S. Fair Way",
                "city": "Madison",
                "telephone": "6085552765",
                "id": 5,
                "pets": [
                    {
                        "name": "George",
                        "birthDate": "2010-01-20",
                        "type": {
                            "name": "snake",
                            "id": 4
                        },
                        "id": 6,
                        "ownerId": 5,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Jean",
                "lastName": "Coleman",
                "address": "105 N. Lake St.",
                "city": "Monona",
                "telephone": "6085552654",
                "id": 6,
                "pets": []
            },
            {
                "firstName": "Jeff",
                "lastName": "Black",
                "address": "1450 Oak Blvd.",
                "city": "Monona",
                "telephone": "6085555387",
                "id": 7,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2011-08-06",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 9,
                        "ownerId": 7,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Maria",
                "lastName": "Escobito",
                "address": "345 Maple St.",
                "city": "Madison",
                "telephone": "6085557683",
                "id": 8,
                "pets": [
                    {
                        "name": "Mulligan",
                        "birthDate": "2007-02-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 10,
                        "ownerId": 8,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "David",
                "lastName": "Schroeder",
                "address": "2749 Blackhawk Trail",
                "city": "Madison",
                "telephone": "6085559435",
                "id": 9,
                "pets": [
                    {
                        "name": "Freddy",
                        "birthDate": "2010-03-09",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 11,
                        "ownerId": 9,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Carlos",
                "lastName": "Estaban",
                "address": "2335 Independence La.",
                "city": "Waunakee",
                "telephone": "6085555487",
                "id": 10,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2010-06-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 12,
                        "ownerId": 10,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 11,
                "pets": []
            }
        ],
        "timestamp": "2024-09-18T15:39:47.351309",
        "duration": 0.01598978042602539
    },
    {
        "test_name": "Retrieve owners with valid last name filter",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        ],
        "actual_body": [
            {
                "firstName": "Betty",
                "lastName": "Davis",
                "address": "638 Cardinal Ave.",
                "city": "Sun Prairie",
                "telephone": "6085551749",
                "id": 2,
                "pets": [
                    {
                        "name": "Basil",
                        "birthDate": "2012-08-06",
                        "type": {
                            "name": "hamster",
                            "id": 6
                        },
                        "id": 2,
                        "ownerId": 2,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Eduardo",
                "lastName": "Rodriquez",
                "address": "2693 Commerce St.",
                "city": "McFarland",
                "telephone": "6085558763",
                "id": 3,
                "pets": [
                    {
                        "name": "Jewel",
                        "birthDate": "2010-03-07",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 4,
                        "ownerId": 3,
                        "visits": []
                    },
                    {
                        "name": "Rosy",
                        "birthDate": "2011-04-17",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 3,
                        "ownerId": 3,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Harold",
                "lastName": "Davis",
                "address": "563 Friendly St.",
                "city": "Windsor",
                "telephone": "6085553198",
                "id": 4,
                "pets": [
                    {
                        "name": "Iggy",
                        "birthDate": "2010-11-30",
                        "type": {
                            "name": "lizard",
                            "id": 3
                        },
                        "id": 5,
                        "ownerId": 4,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Peter",
                "lastName": "McTavish",
                "address": "2387 S. Fair Way",
                "city": "Madison",
                "telephone": "6085552765",
                "id": 5,
                "pets": [
                    {
                        "name": "George",
                        "birthDate": "2010-01-20",
                        "type": {
                            "name": "snake",
                            "id": 4
                        },
                        "id": 6,
                        "ownerId": 5,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Jean",
                "lastName": "Coleman",
                "address": "105 N. Lake St.",
                "city": "Monona",
                "telephone": "6085552654",
                "id": 6,
                "pets": []
            },
            {
                "firstName": "Jeff",
                "lastName": "Black",
                "address": "1450 Oak Blvd.",
                "city": "Monona",
                "telephone": "6085555387",
                "id": 7,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2011-08-06",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 9,
                        "ownerId": 7,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Maria",
                "lastName": "Escobito",
                "address": "345 Maple St.",
                "city": "Madison",
                "telephone": "6085557683",
                "id": 8,
                "pets": [
                    {
                        "name": "Mulligan",
                        "birthDate": "2007-02-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 10,
                        "ownerId": 8,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "David",
                "lastName": "Schroeder",
                "address": "2749 Blackhawk Trail",
                "city": "Madison",
                "telephone": "6085559435",
                "id": 9,
                "pets": [
                    {
                        "name": "Freddy",
                        "birthDate": "2010-03-09",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 11,
                        "ownerId": 9,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Carlos",
                "lastName": "Estaban",
                "address": "2335 Independence La.",
                "city": "Waunakee",
                "telephone": "6085555487",
                "id": 10,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2010-06-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 12,
                        "ownerId": 10,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 11,
                "pets": []
            }
        ],
        "timestamp": "2024-09-18T15:39:47.371306",
        "duration": 0.018990516662597656
    },
    {
        "test_name": "Retrieve owners with last name that does not exist",
        "passed": false,
        "expected_status": 404,
        "actual_status": 200,
        "expected_body": {
            "className": "NotFoundException",
            "exMessage": "No owners found with the last name Nonexistent"
        },
        "actual_body": [
            {
                "firstName": "Betty",
                "lastName": "Davis",
                "address": "638 Cardinal Ave.",
                "city": "Sun Prairie",
                "telephone": "6085551749",
                "id": 2,
                "pets": [
                    {
                        "name": "Basil",
                        "birthDate": "2012-08-06",
                        "type": {
                            "name": "hamster",
                            "id": 6
                        },
                        "id": 2,
                        "ownerId": 2,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Eduardo",
                "lastName": "Rodriquez",
                "address": "2693 Commerce St.",
                "city": "McFarland",
                "telephone": "6085558763",
                "id": 3,
                "pets": [
                    {
                        "name": "Jewel",
                        "birthDate": "2010-03-07",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 4,
                        "ownerId": 3,
                        "visits": []
                    },
                    {
                        "name": "Rosy",
                        "birthDate": "2011-04-17",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 3,
                        "ownerId": 3,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Harold",
                "lastName": "Davis",
                "address": "563 Friendly St.",
                "city": "Windsor",
                "telephone": "6085553198",
                "id": 4,
                "pets": [
                    {
                        "name": "Iggy",
                        "birthDate": "2010-11-30",
                        "type": {
                            "name": "lizard",
                            "id": 3
                        },
                        "id": 5,
                        "ownerId": 4,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Peter",
                "lastName": "McTavish",
                "address": "2387 S. Fair Way",
                "city": "Madison",
                "telephone": "6085552765",
                "id": 5,
                "pets": [
                    {
                        "name": "George",
                        "birthDate": "2010-01-20",
                        "type": {
                            "name": "snake",
                            "id": 4
                        },
                        "id": 6,
                        "ownerId": 5,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Jean",
                "lastName": "Coleman",
                "address": "105 N. Lake St.",
                "city": "Monona",
                "telephone": "6085552654",
                "id": 6,
                "pets": []
            },
            {
                "firstName": "Jeff",
                "lastName": "Black",
                "address": "1450 Oak Blvd.",
                "city": "Monona",
                "telephone": "6085555387",
                "id": 7,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2011-08-06",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 9,
                        "ownerId": 7,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Maria",
                "lastName": "Escobito",
                "address": "345 Maple St.",
                "city": "Madison",
                "telephone": "6085557683",
                "id": 8,
                "pets": [
                    {
                        "name": "Mulligan",
                        "birthDate": "2007-02-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 10,
                        "ownerId": 8,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "David",
                "lastName": "Schroeder",
                "address": "2749 Blackhawk Trail",
                "city": "Madison",
                "telephone": "6085559435",
                "id": 9,
                "pets": [
                    {
                        "name": "Freddy",
                        "birthDate": "2010-03-09",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 11,
                        "ownerId": 9,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Carlos",
                "lastName": "Estaban",
                "address": "2335 Independence La.",
                "city": "Waunakee",
                "telephone": "6085555487",
                "id": 10,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2010-06-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 12,
                        "ownerId": 10,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 11,
                "pets": []
            }
        ],
        "timestamp": "2024-09-18T15:39:47.389308",
        "duration": 0.018002033233642578
    },
    {
        "test_name": "Add owner with valid data",
        "passed": true,
        "expected_status": 201,
        "actual_status": 201,
        "expected_body": {
            "firstName": "George",
            "lastName": "Franklin",
            "address": "110 W. Liberty St.",
            "city": "Madison",
            "telephone": "6085551023",
            "pets": []
        },
        "actual_body": {
            "firstName": "George",
            "lastName": "Franklin",
            "address": "110 W. Liberty St.",
            "city": "Madison",
            "telephone": "6085551023",
            "id": 12,
            "pets": []
        },
        "timestamp": "2024-09-18T15:39:54.135692",
        "duration": 0.006975650787353516
    },
    {
        "test_name": "Add owner with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "schemaValidationErrors": [
                {
                    "message": "[Path '/firstName'] Instance type (string) does not match any allowed primitive type (allowed: [\"string\"])"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:39:54.141692",
        "duration": 0.00599980354309082
    },
    {
        "test_name": "Add owner with invalid telephone format",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "schemaValidationErrors": [
                {
                    "message": "[Path '/telephone'] Instance type (string) does not match any allowed primitive type (allowed: [\"string\"])"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:39:54.147687",
        "duration": 0.005995512008666992
    },
    {
        "test_name": "Add pet to owner successfully",
        "passed": false,
        "expected_status": 201,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "Leo",
            "birthDate": "2023-01-01",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "ownerId": 1,
            "visits": []
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: foreign key no parent ; FK_PETS_OWNERS table: PETS value: 1] [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; SQL [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; constraint [FK_PETS_OWNERS]"
        },
        "timestamp": "2024-09-18T15:39:59.992837",
        "duration": 0.010004043579101562
    },
    {
        "test_name": "Add pet with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/1/pets",
            "schemaValidationErrors": [
                {
                    "message": "Missing required field 'birthDate'"
                },
                {
                    "message": "Missing required field 'type'"
                }
            ],
            "timestamp": "2023-10-01T00:00:00Z"
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:40:00.001802",
        "duration": 0.007001638412475586
    },
    {
        "test_name": "Add pet to non-existent owner",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Owner not found",
            "path": "/api/owners/999/pets",
            "schemaValidationErrors": [],
            "timestamp": "2023-10-01T00:00:00Z"
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: foreign key no parent ; FK_PETS_OWNERS table: PETS value: 999] [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; SQL [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; constraint [FK_PETS_OWNERS]"
        },
        "timestamp": "2024-09-18T15:40:00.011803",
        "duration": 0.009000539779663086
    },
    {
        "test_name": "Successfully add a visit to a pet owner",
        "passed": false,
        "expected_status": 201,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "description": "rabies shot",
            "date": "2023-10-01",
            "petId": 1
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: foreign key no parent ; FK_VISITS_PETS table: VISITS value: 1] [insert into visits (visit_date,description,pet_id,id) values (?,?,?,default)]; SQL [insert into visits (visit_date,description,pet_id,id) values (?,?,?,default)]; constraint [FK_VISITS_PETS]"
        },
        "timestamp": "2024-09-18T15:40:05.437585",
        "duration": 0.009969234466552734
    },
    {
        "test_name": "Missing description in request body",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/1/pets/1/visits",
            "timestamp": "2023-10-01T00:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:40:05.447200",
        "duration": 0.007993936538696289
    },
    {
        "test_name": "Invalid ownerId and petId",
        "passed": false,
        "expected_status": 404,
        "actual_status": 500,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet not found for this owner.",
            "path": "/api/owners/-1/pets/-1/visits",
            "timestamp": "2023-10-01T00:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "addVisitToOwner.arg0: must be greater than or equal to 0, addVisitToOwner.arg1: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:40:05.456203",
        "duration": 0.009002923965454102
    },
    {
        "test_name": "Successful GET request",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Bad Request response",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Not Found response",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Successful PUT request",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "PUT request with invalid data",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "PUT request to non-existing endpoint",
        "passed": false,
        "expected_status": 404,
        "actual_status": 500,
        "expected_body": {
            "className": "NotFoundException",
            "exMessage": "Resource not found"
        },
        "actual_body": {
            "className": "org.springframework.web.servlet.resource.NoResourceFoundException",
            "exMessage": "No static resource non-existing."
        },
        "timestamp": "2024-09-18T15:40:10.792410",
        "duration": 0.006999015808105469
    },
    {
        "test_name": "Successful POST request",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Bad Request with invalid data",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Not Found case",
        "passed": false,
        "expected_status": 404,
        "actual_status": 500,
        "expected_body": {
            "className": "java.lang.Exception",
            "exMessage": "Not Found"
        },
        "actual_body": {
            "className": "org.springframework.web.servlet.resource.NoResourceFoundException",
            "exMessage": "No static resource nonexistent."
        },
        "timestamp": "2024-09-18T15:40:12.982430",
        "duration": 0.006046295166015625
    },
    {
        "test_name": "Delete operation returns 200 OK",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Delete operation returns 400 Bad Request",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Delete operation returns 404 Not Found",
        "passed": false,
        "expected_status": 404,
        "actual_status": 500,
        "expected_body": {
            "className": "NotFoundException",
            "exMessage": "Resource not found"
        },
        "actual_body": {
            "className": "org.springframework.web.servlet.resource.NoResourceFoundException",
            "exMessage": "No static resource nonexistent."
        },
        "timestamp": "2024-09-18T15:40:15.448118",
        "duration": 0.008000373840332031
    },
    {
        "test_name": "Successful PATCH request",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Bad Request with invalid body",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Not Found for non-existent resource",
        "passed": false,
        "expected_status": 404,
        "actual_status": 500,
        "expected_body": {
            "className": "NotFound",
            "exMessage": "Resource not found"
        },
        "actual_body": {
            "className": "org.springframework.web.servlet.resource.NoResourceFoundException",
            "exMessage": "No static resource non-existent."
        },
        "timestamp": "2024-09-18T15:40:18.236167",
        "duration": 0.009032487869262695
    },
    {
        "test_name": "Get visit details with valid visitId",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "description": "rabies shot",
            "date": "2023-10-01",
            "petId": 1
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:21.902650",
        "duration": 0.00802755355834961
    },
    {
        "test_name": "Get visit details with non-existent visitId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Visit not found",
            "path": "/api/visits/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:21.910621",
        "duration": 0.0070056915283203125
    },
    {
        "test_name": "Get visit details with invalid visitId format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/visits/invalid",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "visitId must be an integer"
                }
            ]
        },
        "actual_body": {
            "className": "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException",
            "exMessage": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; For input string: \"invalid\""
        },
        "timestamp": "2024-09-18T15:40:21.915618",
        "duration": 0.0049974918365478516
    },
    {
        "test_name": "Update visit successfully",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "description": "rabies shot",
            "id": 1,
            "date": "2023-10-01",
            "petId": 1
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:26.267572",
        "duration": 0.008985519409179688
    },
    {
        "test_name": "Update visit with missing description",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/visits/1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:40:26.274576",
        "duration": 0.005994558334350586
    },
    {
        "test_name": "Update visit with invalid visitId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Visit not found",
            "path": "/api/visits/9999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:26.283596",
        "duration": 0.009019613265991211
    },
    {
        "test_name": "Delete visit with valid visitId",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "description": "rabies shot",
            "date": "2023-10-01",
            "petId": 1
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:31.649013",
        "duration": 0.007039785385131836
    },
    {
        "test_name": "Delete visit with non-existent visitId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Visit not found.",
            "path": "/api/visits/9999",
            "timestamp": "2023-10-01T10:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:31.656308",
        "duration": 0.006044864654541016
    },
    {
        "test_name": "Delete visit with invalid visitId (negative value)",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/visits/-1",
            "timestamp": "2023-10-01T10:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "deleteVisit.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:40:31.663330",
        "duration": 0.006033658981323242
    },
    {
        "test_name": "Get vet details successfully",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "James",
            "lastName": "Carter",
            "specialties": [
                {
                    "id": 1,
                    "name": "radiology"
                }
            ],
            "id": 1
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:35.795399",
        "duration": 0.006999015808105469
    },
    {
        "test_name": "Get vet with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Vet not found.",
            "path": "/api/vets/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:35.804405",
        "duration": 0.008005142211914062
    },
    {
        "test_name": "Get vet with invalid ID format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/vets/abc",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "Invalid type. Expected integer."
                }
            ]
        },
        "actual_body": {
            "className": "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException",
            "exMessage": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; For input string: \"abc\""
        },
        "timestamp": "2024-09-18T15:40:35.815407",
        "duration": 0.010002613067626953
    },
    {
        "test_name": "Update vet with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "James",
            "lastName": "Carter",
            "specialties": [
                {
                    "id": 1,
                    "name": "radiology"
                }
            ],
            "id": 1
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:41.602099",
        "duration": 0.0110321044921875
    },
    {
        "test_name": "Update vet with missing last name",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "path": "/api/vets/1",
            "timestamp": "2023-10-01T00:00:00Z",
            "message": "Request failed schema validation",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:40:41.613096",
        "duration": 0.009027481079101562
    },
    {
        "test_name": "Update vet with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "path": "/api/vets/999",
            "timestamp": "2023-10-01T00:00:00Z",
            "message": "Vet not found",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:41.625067",
        "duration": 0.010999679565429688
    },
    {
        "test_name": "Delete vet successfully",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "James",
            "lastName": "Carter",
            "id": 1,
            "specialties": [
                {
                    "id": 1,
                    "name": "radiology"
                }
            ]
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:45.727742",
        "duration": 0.006033658981323242
    },
    {
        "test_name": "Delete vet not found",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Vet not found.",
            "path": "/api/vets/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:45.737728",
        "duration": 0.008014678955078125
    },
    {
        "test_name": "Delete vet with invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Invalid ID format.",
            "path": "/api/vets/abc",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException",
            "exMessage": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; For input string: \"abc\""
        },
        "timestamp": "2024-09-18T15:40:45.742709",
        "duration": 0.00399470329284668
    },
    {
        "test_name": "Get specialty with valid ID",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "id": 1,
            "name": "radiology"
        },
        "actual_body": {
            "id": 1,
            "name": "radiology"
        },
        "timestamp": "2024-09-18T15:40:49.367466",
        "duration": 0.0059850215911865234
    },
    {
        "test_name": "Get specialty with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "error": "Not Found",
            "message": "Specialty not found.",
            "path": "/api/specialties/999",
            "schemaValidationErrors": [],
            "status": 404,
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:49.373468",
        "duration": 0.00600123405456543
    },
    {
        "test_name": "Get specialty with invalid ID (negative number)",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/specialties/-1",
            "schemaValidationErrors": [
                {
                    "message": "The value must be greater than or equal to 0."
                }
            ],
            "status": 400,
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getSpecialty.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:40:49.379496",
        "duration": 0.00502467155456543
    },
    {
        "test_name": "Update specialty with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 204,
        "expected_body": {
            "id": 1,
            "name": "radiology"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:54.067542",
        "duration": 0.01397562026977539
    },
    {
        "test_name": "Update specialty with missing name",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/specialties/2",
            "schemaValidationErrors": [],
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:40:54.079934",
        "duration": 0.010386943817138672
    },
    {
        "test_name": "Update specialty with non-existing ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Specialty not found.",
            "path": "/api/specialties/999",
            "schemaValidationErrors": [],
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:54.093979",
        "duration": 0.012920618057250977
    },
    {
        "test_name": "Delete specialty with valid ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "radiology"
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: foreign key no action ; FK_VET_SPECIALTIES_SPECIALTIES table: VET_SPECIALTIES] [delete from specialties where id=?]; SQL [delete from specialties where id=?]; constraint [FK_VET_SPECIALTIES_SPECIALTIES]"
        },
        "timestamp": "2024-09-18T15:40:59.165829",
        "duration": 0.010000467300415039
    },
    {
        "test_name": "Delete specialty with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "error": "Not Found",
            "message": "Specialty not found.",
            "path": "/api/specialties/999",
            "status": 404,
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:40:59.172383",
        "duration": 0.0055387020111083984
    },
    {
        "test_name": "Delete specialty with invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/specialties/-1",
            "status": 400,
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "deleteSpecialty.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:40:59.179394",
        "duration": 0.006033420562744141
    },
    {
        "test_name": "Get pet type with valid ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "cat"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:02.829419",
        "duration": 0.011002302169799805
    },
    {
        "test_name": "Get pet type with ID not found",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet Type not found.",
            "path": "/api/pettypes/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:02.843425",
        "duration": 0.012001752853393555
    },
    {
        "test_name": "Get pet type with invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pettypes/-1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "The value must be greater than or equal to 0."
                }
            ]
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getPetType.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:41:02.854415",
        "duration": 0.009996652603149414
    },
    {
        "test_name": "Delete pet type with valid ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "cat"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:10.889309",
        "duration": 0.00900125503540039
    },
    {
        "test_name": "Delete pet type with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet type not found.",
            "path": "/api/pettypes/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:10.901309",
        "duration": 0.011001110076904297
    },
    {
        "test_name": "Delete pet type with invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pettypes/-1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "ID must be greater than or equal to 0"
                }
            ]
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "deletePetType.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:41:10.908308",
        "duration": 0.006998300552368164
    },
    {
        "test_name": "Get existing pet by valid ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "Leo",
            "birthDate": "2020-01-01",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "ownerId": 1,
            "visits": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:15.090422",
        "duration": 0.005011796951293945
    },
    {
        "test_name": "Get pet with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet not found.",
            "path": "/api/pets/999",
            "timestamp": "2023-10-03T12:00:00Z"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:15.098661",
        "duration": 0.006070613861083984
    },
    {
        "test_name": "Get pet with invalid ID format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pets/abc",
            "timestamp": "2023-10-03T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException",
            "exMessage": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; For input string: \"abc\""
        },
        "timestamp": "2024-09-18T15:41:15.103664",
        "duration": 0.004034757614135742
    },
    {
        "test_name": "Update pet successfully",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "Leo",
            "birthDate": "2020-01-01",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "visits": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:19.397997",
        "duration": 0.009022712707519531
    },
    {
        "test_name": "Update pet with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pets/1",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:41:19.407961",
        "duration": 0.008000373840332031
    },
    {
        "test_name": "Update pet with non-existent pet ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet not found",
            "path": "/api/pets/999",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:19.417439",
        "duration": 0.009478092193603516
    },
    {
        "test_name": "Delete pet with valid petId",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {},
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:22.555595",
        "duration": 0.007030963897705078
    },
    {
        "test_name": "Delete pet with non-existing petId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet not found.",
            "path": "/api/pets/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:22.563598",
        "duration": 0.0070345401763916016
    },
    {
        "test_name": "Delete pet with invalid petId",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pets/-1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "deletePet.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:41:22.571584",
        "duration": 0.00798654556274414
    },
    {
        "test_name": "Get owner details with valid ownerId",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "George",
            "lastName": "Franklin",
            "address": "110 W. Liberty St.",
            "city": "Madison",
            "telephone": "6085551023",
            "id": 1,
            "pets": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:26.459985",
        "duration": 0.010999202728271484
    },
    {
        "test_name": "Get owner details with non-existent ownerId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Owner not found.",
            "path": "/api/owners/999",
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:26.467856",
        "duration": 0.007075309753417969
    },
    {
        "test_name": "Get owner details with invalid ownerId",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/-1",
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getOwner.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:41:26.473817",
        "duration": 0.004999637603759766
    },
    {
        "test_name": "Update owner with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "George",
            "lastName": "Franklin",
            "address": "110 W. Liberty St.",
            "city": "Madison",
            "telephone": "6085551023",
            "pets": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:33.765057",
        "duration": 0.008033275604248047
    },
    {
        "test_name": "Update owner with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400,
            "schemaValidationErrors": [
                {
                    "message": "Field 'lastName' is required."
                },
                {
                    "message": "Field 'address' is required."
                },
                {
                    "message": "Field 'city' is required."
                },
                {
                    "message": "Field 'telephone' is required."
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:41:33.773024",
        "duration": 0.005999565124511719
    },
    {
        "test_name": "Update owner with invalid telephone format",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400,
            "schemaValidationErrors": [
                {
                    "message": "Field 'telephone' must match pattern '^[0-9]*$'."
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:41:33.782053",
        "duration": 0.008024454116821289
    },
    {
        "test_name": "Delete Owner Successfully",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {},
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:37.564508",
        "duration": 0.01699376106262207
    },
    {
        "test_name": "Delete Non-Existent Owner",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "error": "Not Found",
            "message": "Owner not found.",
            "path": "/api/owners/999",
            "status": 404,
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:37.581552",
        "duration": 0.01503610610961914
    },
    {
        "test_name": "Delete Owner with Invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/-1",
            "status": 400,
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "deleteOwner.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:41:37.596511",
        "duration": 0.014005899429321289
    },
    {
        "test_name": "Get pet details for valid owner and pet IDs",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "Leo",
            "birthDate": "2020-01-01",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "ownerId": 1,
            "visits": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:41.166136",
        "duration": 0.007999897003173828
    },
    {
        "test_name": "Get pet details for non-existent pet",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet not found.",
            "path": "/api/owners/1/pets/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:41.175149",
        "duration": 0.008013248443603516
    },
    {
        "test_name": "Get pet details with invalid owner ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/-1/pets/1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getOwnersPet.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:41:41.181159",
        "duration": 0.005022287368774414
    },
    {
        "test_name": "Update pet successfully",
        "passed": false,
        "expected_status": 204,
        "actual_status": 501,
        "expected_body": {},
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:47.983875",
        "duration": 0.0050008296966552734
    },
    {
        "test_name": "Update pet with missing name",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/1/pets/1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "Missing required property: name"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:41:47.992875",
        "duration": 0.006989717483520508
    },
    {
        "test_name": "Update pet not found",
        "passed": false,
        "expected_status": 404,
        "actual_status": 501,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet not found for this owner.",
            "path": "/api/owners/1/pets/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:47.998879",
        "duration": 0.004982709884643555
    },
    {
        "test_name": "Successful retrieval of visits",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": [
            {
                "id": 1,
                "description": "rabies shot",
                "date": "2023-10-01",
                "petId": 1
            },
            {
                "id": 2,
                "description": "check-up",
                "date": "2023-10-02",
                "petId": 2
            }
        ],
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:55.448256",
        "duration": 0.008002996444702148
    },
    {
        "test_name": "Not Modified Response",
        "passed": false,
        "expected_status": 304,
        "actual_status": 404,
        "expected_body": [],
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:55.455254",
        "duration": 0.005999088287353516
    },
    {
        "test_name": "Bad Request with invalid parameters",
        "passed": false,
        "expected_status": 400,
        "actual_status": 404,
        "expected_body": {
            "className": "BadRequest",
            "exMessage": "Invalid request parameters"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:55.463255",
        "duration": 0.006997346878051758
    },
    {
        "test_name": "Not Found Response",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "className": "NotFound",
            "exMessage": "Visits not found"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:55.470255",
        "duration": 0.006000518798828125
    },
    {
        "test_name": "Server error response",
        "passed": false,
        "expected_status": 500,
        "actual_status": 404,
        "expected_body": {
            "status": 500,
            "error": "Internal Server Error",
            "message": "Unexpected error occurred",
            "path": "/api/visits",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [],
            "trace": "com.example.exception.InternalServerError: ..."
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:41:55.478274",
        "duration": 0.007016420364379883
    },
    {
        "test_name": "Successful visit creation with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "description": "rabies shot",
            "id": 1,
            "date": "2023-10-01",
            "petId": 1
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: NOT NULL check constraint ; SYS_CT_10120 table: VISITS column: PET_ID] [insert into visits (visit_date,description,pet_id,id) values (?,?,?,default)]; SQL [insert into visits (visit_date,description,pet_id,id) values (?,?,?,default)]; constraint [null]"
        },
        "timestamp": "2024-09-18T15:42:00.375723",
        "duration": 0.00999760627746582
    },
    {
        "test_name": "Visit creation fails with missing description",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400,
            "path": "/api/visits"
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:42:00.381727",
        "duration": 0.0050051212310791016
    },
    {
        "test_name": "Visit creation fails with invalid date format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400,
            "path": "/api/visits"
        },
        "actual_body": {
            "className": "org.springframework.http.converter.HttpMessageNotReadableException",
            "exMessage": "JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"invalid-date\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'invalid-date' could not be parsed at index 0"
        },
        "timestamp": "2024-09-18T15:42:00.387759",
        "duration": 0.005033016204833984
    },
    {
        "test_name": "Get list of vets successfully",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            }
        ],
        "actual_body": [
            {
                "firstName": "Helen",
                "lastName": "Leary",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 2
            },
            {
                "firstName": "Linda",
                "lastName": "Douglas",
                "specialties": [
                    {
                        "id": 3,
                        "name": "dentistry"
                    },
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 3
            },
            {
                "firstName": "Rafael",
                "lastName": "Ortega",
                "specialties": [
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 4
            },
            {
                "firstName": "Henry",
                "lastName": "Stevens",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 5
            },
            {
                "firstName": "Sharon",
                "lastName": "Jenkins",
                "specialties": [],
                "id": 6
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 7
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 8
            }
        ],
        "timestamp": "2024-09-18T15:42:07.676132",
        "duration": 0.01399374008178711
    },
    {
        "test_name": "Not modified response",
        "passed": false,
        "expected_status": 304,
        "actual_status": 200,
        "expected_body": [],
        "actual_body": [
            {
                "firstName": "Helen",
                "lastName": "Leary",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 2
            },
            {
                "firstName": "Linda",
                "lastName": "Douglas",
                "specialties": [
                    {
                        "id": 3,
                        "name": "dentistry"
                    },
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 3
            },
            {
                "firstName": "Rafael",
                "lastName": "Ortega",
                "specialties": [
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 4
            },
            {
                "firstName": "Henry",
                "lastName": "Stevens",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 5
            },
            {
                "firstName": "Sharon",
                "lastName": "Jenkins",
                "specialties": [],
                "id": 6
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 7
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 8
            }
        ],
        "timestamp": "2024-09-18T15:42:07.690136",
        "duration": 0.013002157211303711
    },
    {
        "test_name": "Bad Request error response",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "className": "BadRequestException",
            "exMessage": "Invalid request parameters"
        },
        "actual_body": [
            {
                "firstName": "Helen",
                "lastName": "Leary",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 2
            },
            {
                "firstName": "Linda",
                "lastName": "Douglas",
                "specialties": [
                    {
                        "id": 3,
                        "name": "dentistry"
                    },
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 3
            },
            {
                "firstName": "Rafael",
                "lastName": "Ortega",
                "specialties": [
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 4
            },
            {
                "firstName": "Henry",
                "lastName": "Stevens",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 5
            },
            {
                "firstName": "Sharon",
                "lastName": "Jenkins",
                "specialties": [],
                "id": 6
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 7
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 8
            }
        ],
        "timestamp": "2024-09-18T15:42:07.702131",
        "duration": 0.01100015640258789
    },
    {
        "test_name": "Not Found error response",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "className": "NotFoundException",
            "exMessage": "Vet not found"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:42:07.713133",
        "duration": 0.008998632431030273
    },
    {
        "test_name": "Server error response",
        "passed": false,
        "expected_status": 500,
        "actual_status": 200,
        "expected_body": {
            "status": 500,
            "error": "Internal Server Error",
            "path": "/api/vets",
            "timestamp": "2023-10-01T12:00:00Z",
            "message": "Unexpected error occurred",
            "schemaValidationErrors": [],
            "trace": "com.example.exception.InternalServerException: ..."
        },
        "actual_body": [
            {
                "firstName": "Helen",
                "lastName": "Leary",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 2
            },
            {
                "firstName": "Linda",
                "lastName": "Douglas",
                "specialties": [
                    {
                        "id": 3,
                        "name": "dentistry"
                    },
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 3
            },
            {
                "firstName": "Rafael",
                "lastName": "Ortega",
                "specialties": [
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 4
            },
            {
                "firstName": "Henry",
                "lastName": "Stevens",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 5
            },
            {
                "firstName": "Sharon",
                "lastName": "Jenkins",
                "specialties": [],
                "id": 6
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 7
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 8
            }
        ],
        "timestamp": "2024-09-18T15:42:07.728147",
        "duration": 0.014012813568115234
    },
    {
        "test_name": "Add Vet with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 201,
        "expected_body": {
            "firstName": "James",
            "lastName": "Carter",
            "id": 1,
            "specialties": [
                {
                    "id": 1,
                    "name": "radiology"
                }
            ]
        },
        "actual_body": {
            "firstName": "James",
            "lastName": "Carter",
            "specialties": [
                {
                    "id": 1,
                    "name": "radiology"
                }
            ],
            "id": 9
        },
        "timestamp": "2024-09-18T15:42:13.536949",
        "duration": 0.011964797973632812
    },
    {
        "test_name": "Add Vet with missing firstName",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/vets",
            "timestamp": "2023-10-03T10:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "Missing required property: firstName"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:42:13.544931",
        "duration": 0.00597071647644043
    },
    {
        "test_name": "Add Vet with invalid lastName format",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/vets",
            "timestamp": "2023-10-03T10:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "[Path '/lastName'] Instance type (string) does not match pattern (allowed: /^[a-zA-Z]*$/)"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:42:13.550953",
        "duration": 0.005014181137084961
    },
    {
        "test_name": "Add user with minimum required fields",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {
            "username": "john.doe",
            "enabled": true,
            "roles": []
        },
        "actual_body": {
            "className": "java.lang.IllegalArgumentException",
            "exMessage": "User must have at least a role set!"
        },
        "timestamp": "2024-09-18T15:42:18.485109",
        "duration": 0.0060007572174072266
    },
    {
        "test_name": "Add user with all fields populated",
        "passed": false,
        "expected_status": 200,
        "actual_status": 201,
        "expected_body": {
            "username": "jane.doe",
            "enabled": true,
            "roles": [
                {
                    "name": "admin"
                }
            ]
        },
        "actual_body": {
            "username": "jane.doe",
            "password": "1234abc",
            "enabled": true,
            "roles": [
                {
                    "name": "ROLE_admin"
                }
            ]
        },
        "timestamp": "2024-09-18T15:42:18.495110",
        "duration": 0.008001327514648438
    },
    {
        "test_name": "Add user with missing required field",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "schemaValidationErrors": [
                {
                    "message": "Field 'username' is required."
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:42:18.503112",
        "duration": 0.007002592086791992
    },
    {
        "test_name": "Get specialties successfully",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "id": 1,
                "name": "radiology"
            },
            {
                "id": 2,
                "name": "surgery"
            }
        ],
        "actual_body": [
            {
                "id": 1,
                "name": "radiology"
            },
            {
                "id": 2,
                "name": "surgery"
            },
            {
                "id": 3,
                "name": "dentistry"
            }
        ],
        "timestamp": "2024-09-18T15:42:25.819242",
        "duration": 0.010976552963256836
    },
    {
        "test_name": "Check for not modified response",
        "passed": false,
        "expected_status": 304,
        "actual_status": 200,
        "expected_body": [],
        "actual_body": [
            {
                "id": 1,
                "name": "radiology"
            },
            {
                "id": 2,
                "name": "surgery"
            },
            {
                "id": 3,
                "name": "dentistry"
            }
        ],
        "timestamp": "2024-09-18T15:42:25.826238",
        "duration": 0.0069963932037353516
    },
    {
        "test_name": "Handle bad request error",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "className": "BadRequest",
            "exMessage": "Invalid request parameters"
        },
        "actual_body": [
            {
                "id": 1,
                "name": "radiology"
            },
            {
                "id": 2,
                "name": "surgery"
            },
            {
                "id": 3,
                "name": "dentistry"
            }
        ],
        "timestamp": "2024-09-18T15:42:25.834239",
        "duration": 0.0070056915283203125
    },
    {
        "test_name": "Handle not found error",
        "passed": false,
        "expected_status": 404,
        "actual_status": 200,
        "expected_body": {
            "className": "NotFound",
            "exMessage": "Specialties not found"
        },
        "actual_body": [
            {
                "id": 1,
                "name": "radiology"
            },
            {
                "id": 2,
                "name": "surgery"
            },
            {
                "id": 3,
                "name": "dentistry"
            }
        ],
        "timestamp": "2024-09-18T15:42:25.842238",
        "duration": 0.006999492645263672
    },
    {
        "test_name": "Handle server error",
        "passed": false,
        "expected_status": 500,
        "actual_status": 200,
        "expected_body": {
            "status": 500,
            "error": "Internal Server Error",
            "path": "/api/specialties",
            "timestamp": "2023-10-01T12:00:00Z",
            "message": "Unexpected server error occurred",
            "schemaValidationErrors": []
        },
        "actual_body": [
            {
                "id": 1,
                "name": "radiology"
            },
            {
                "id": 2,
                "name": "surgery"
            },
            {
                "id": 3,
                "name": "dentistry"
            }
        ],
        "timestamp": "2024-09-18T15:42:25.853269",
        "duration": 0.008035421371459961
    },
    {
        "test_name": "Retrieve pet types successfully",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "id": 1,
                "name": "cat"
            },
            {
                "id": 2,
                "name": "dog"
            }
        ],
        "actual_body": [
            {
                "name": "dog",
                "id": 2
            },
            {
                "name": "lizard",
                "id": 3
            },
            {
                "name": "snake",
                "id": 4
            },
            {
                "name": "bird",
                "id": 5
            },
            {
                "name": "hamster",
                "id": 6
            }
        ],
        "timestamp": "2024-09-18T15:42:37.900752",
        "duration": 0.008000373840332031
    },
    {
        "test_name": "Check for not modified response",
        "passed": false,
        "expected_status": 304,
        "actual_status": 200,
        "expected_body": [],
        "actual_body": [
            {
                "name": "dog",
                "id": 2
            },
            {
                "name": "lizard",
                "id": 3
            },
            {
                "name": "snake",
                "id": 4
            },
            {
                "name": "bird",
                "id": 5
            },
            {
                "name": "hamster",
                "id": 6
            }
        ],
        "timestamp": "2024-09-18T15:42:37.908753",
        "duration": 0.0069806575775146484
    },
    {
        "test_name": "Handle bad request error",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "className": "BadRequest",
            "exMessage": "Invalid request parameters"
        },
        "actual_body": [
            {
                "name": "dog",
                "id": 2
            },
            {
                "name": "lizard",
                "id": 3
            },
            {
                "name": "snake",
                "id": 4
            },
            {
                "name": "bird",
                "id": 5
            },
            {
                "name": "hamster",
                "id": 6
            }
        ],
        "timestamp": "2024-09-18T15:42:37.918331",
        "duration": 0.008576393127441406
    },
    {
        "test_name": "Handle not found error",
        "passed": false,
        "expected_status": 404,
        "actual_status": 200,
        "expected_body": {
            "className": "NotFound",
            "exMessage": "Resource not found"
        },
        "actual_body": [
            {
                "name": "dog",
                "id": 2
            },
            {
                "name": "lizard",
                "id": 3
            },
            {
                "name": "snake",
                "id": 4
            },
            {
                "name": "bird",
                "id": 5
            },
            {
                "name": "hamster",
                "id": 6
            }
        ],
        "timestamp": "2024-09-18T15:42:37.927331",
        "duration": 0.007999658584594727
    },
    {
        "test_name": "Handle server error",
        "passed": false,
        "expected_status": 500,
        "actual_status": 200,
        "expected_body": {
            "status": 500,
            "error": "Internal Server Error",
            "path": "/api/pettypes",
            "timestamp": "2023-10-01T00:00:00Z",
            "message": "Unexpected server error",
            "schemaValidationErrors": [],
            "trace": "com.example.Exception: ..."
        },
        "actual_body": [
            {
                "name": "dog",
                "id": 2
            },
            {
                "name": "lizard",
                "id": 3
            },
            {
                "name": "snake",
                "id": 4
            },
            {
                "name": "bird",
                "id": 5
            },
            {
                "name": "hamster",
                "id": 6
            }
        ],
        "timestamp": "2024-09-18T15:42:37.937332",
        "duration": 0.009003162384033203
    },
    {
        "test_name": "Retrieve all pets successfully",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "ownerId": 1,
                "visits": []
            }
        ],
        "actual_body": [
            {
                "name": "Basil",
                "birthDate": "2012-08-06",
                "type": {
                    "name": "hamster",
                    "id": 6
                },
                "id": 2,
                "ownerId": 2,
                "visits": []
            },
            {
                "name": "Rosy",
                "birthDate": "2011-04-17",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 3,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Jewel",
                "birthDate": "2010-03-07",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 4,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Iggy",
                "birthDate": "2010-11-30",
                "type": {
                    "name": "lizard",
                    "id": 3
                },
                "id": 5,
                "ownerId": 4,
                "visits": []
            },
            {
                "name": "George",
                "birthDate": "2010-01-20",
                "type": {
                    "name": "snake",
                    "id": 4
                },
                "id": 6,
                "ownerId": 5,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2011-08-06",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 9,
                "ownerId": 7,
                "visits": []
            },
            {
                "name": "Mulligan",
                "birthDate": "2007-02-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 10,
                "ownerId": 8,
                "visits": []
            },
            {
                "name": "Freddy",
                "birthDate": "2010-03-09",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 11,
                "ownerId": 9,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2010-06-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 12,
                "ownerId": 10,
                "visits": []
            }
        ],
        "timestamp": "2024-09-18T15:42:45.993793",
        "duration": 0.014002084732055664
    },
    {
        "test_name": "Handle no pets found",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [],
        "actual_body": [
            {
                "name": "Basil",
                "birthDate": "2012-08-06",
                "type": {
                    "name": "hamster",
                    "id": 6
                },
                "id": 2,
                "ownerId": 2,
                "visits": []
            },
            {
                "name": "Rosy",
                "birthDate": "2011-04-17",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 3,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Jewel",
                "birthDate": "2010-03-07",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 4,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Iggy",
                "birthDate": "2010-11-30",
                "type": {
                    "name": "lizard",
                    "id": 3
                },
                "id": 5,
                "ownerId": 4,
                "visits": []
            },
            {
                "name": "George",
                "birthDate": "2010-01-20",
                "type": {
                    "name": "snake",
                    "id": 4
                },
                "id": 6,
                "ownerId": 5,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2011-08-06",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 9,
                "ownerId": 7,
                "visits": []
            },
            {
                "name": "Mulligan",
                "birthDate": "2007-02-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 10,
                "ownerId": 8,
                "visits": []
            },
            {
                "name": "Freddy",
                "birthDate": "2010-03-09",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 11,
                "ownerId": 9,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2010-06-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 12,
                "ownerId": 10,
                "visits": []
            }
        ],
        "timestamp": "2024-09-18T15:42:46.022773",
        "duration": 0.028980255126953125
    },
    {
        "test_name": "Check for not modified response",
        "passed": false,
        "expected_status": 304,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": [
            {
                "name": "Basil",
                "birthDate": "2012-08-06",
                "type": {
                    "name": "hamster",
                    "id": 6
                },
                "id": 2,
                "ownerId": 2,
                "visits": []
            },
            {
                "name": "Rosy",
                "birthDate": "2011-04-17",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 3,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Jewel",
                "birthDate": "2010-03-07",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 4,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Iggy",
                "birthDate": "2010-11-30",
                "type": {
                    "name": "lizard",
                    "id": 3
                },
                "id": 5,
                "ownerId": 4,
                "visits": []
            },
            {
                "name": "George",
                "birthDate": "2010-01-20",
                "type": {
                    "name": "snake",
                    "id": 4
                },
                "id": 6,
                "ownerId": 5,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2011-08-06",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 9,
                "ownerId": 7,
                "visits": []
            },
            {
                "name": "Mulligan",
                "birthDate": "2007-02-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 10,
                "ownerId": 8,
                "visits": []
            },
            {
                "name": "Freddy",
                "birthDate": "2010-03-09",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 11,
                "ownerId": 9,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2010-06-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 12,
                "ownerId": 10,
                "visits": []
            }
        ],
        "timestamp": "2024-09-18T15:42:46.040770",
        "duration": 0.017996788024902344
    },
    {
        "test_name": "Add pet with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 500,
        "expected_body": {
            "birthDate": "2023-01-01",
            "id": 1,
            "name": "Leo",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "visits": []
        },
        "actual_body": {
            "className": "org.springframework.orm.jpa.JpaObjectRetrievalFailureException",
            "exMessage": "Unable to find org.springframework.samples.petclinic.model.PetType with id 1"
        },
        "timestamp": "2024-09-18T15:42:54.463450",
        "duration": 0.019994497299194336
    },
    {
        "test_name": "Add pet with missing name",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:42:54.471450",
        "duration": 0.006995439529418945
    },
    {
        "test_name": "Add pet with invalid birthDate format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400
        },
        "actual_body": {
            "className": "org.springframework.http.converter.HttpMessageNotReadableException",
            "exMessage": "JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"01-01-2023\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '01-01-2023' could not be parsed at index 0"
        },
        "timestamp": "2024-09-18T15:42:54.478882",
        "duration": 0.006685495376586914
    },
    {
        "test_name": "Get all owners",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        ],
        "actual_body": [
            {
                "firstName": "Betty",
                "lastName": "Davis",
                "address": "638 Cardinal Ave.",
                "city": "Sun Prairie",
                "telephone": "6085551749",
                "id": 2,
                "pets": [
                    {
                        "name": "Basil",
                        "birthDate": "2012-08-06",
                        "type": {
                            "name": "hamster",
                            "id": 6
                        },
                        "id": 2,
                        "ownerId": 2,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Eduardo",
                "lastName": "Rodriquez",
                "address": "2693 Commerce St.",
                "city": "McFarland",
                "telephone": "6085558763",
                "id": 3,
                "pets": [
                    {
                        "name": "Jewel",
                        "birthDate": "2010-03-07",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 4,
                        "ownerId": 3,
                        "visits": []
                    },
                    {
                        "name": "Rosy",
                        "birthDate": "2011-04-17",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 3,
                        "ownerId": 3,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Harold",
                "lastName": "Davis",
                "address": "563 Friendly St.",
                "city": "Windsor",
                "telephone": "6085553198",
                "id": 4,
                "pets": [
                    {
                        "name": "Iggy",
                        "birthDate": "2010-11-30",
                        "type": {
                            "name": "lizard",
                            "id": 3
                        },
                        "id": 5,
                        "ownerId": 4,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Peter",
                "lastName": "McTavish",
                "address": "2387 S. Fair Way",
                "city": "Madison",
                "telephone": "6085552765",
                "id": 5,
                "pets": [
                    {
                        "name": "George",
                        "birthDate": "2010-01-20",
                        "type": {
                            "name": "snake",
                            "id": 4
                        },
                        "id": 6,
                        "ownerId": 5,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Jean",
                "lastName": "Coleman",
                "address": "105 N. Lake St.",
                "city": "Monona",
                "telephone": "6085552654",
                "id": 6,
                "pets": []
            },
            {
                "firstName": "Jeff",
                "lastName": "Black",
                "address": "1450 Oak Blvd.",
                "city": "Monona",
                "telephone": "6085555387",
                "id": 7,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2011-08-06",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 9,
                        "ownerId": 7,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Maria",
                "lastName": "Escobito",
                "address": "345 Maple St.",
                "city": "Madison",
                "telephone": "6085557683",
                "id": 8,
                "pets": [
                    {
                        "name": "Mulligan",
                        "birthDate": "2007-02-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 10,
                        "ownerId": 8,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "David",
                "lastName": "Schroeder",
                "address": "2749 Blackhawk Trail",
                "city": "Madison",
                "telephone": "6085559435",
                "id": 9,
                "pets": [
                    {
                        "name": "Freddy",
                        "birthDate": "2010-03-09",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 11,
                        "ownerId": 9,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Carlos",
                "lastName": "Estaban",
                "address": "2335 Independence La.",
                "city": "Waunakee",
                "telephone": "6085555487",
                "id": 10,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2010-06-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 12,
                        "ownerId": 10,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 11,
                "pets": []
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 12,
                "pets": []
            }
        ],
        "timestamp": "2024-09-18T15:42:59.718794",
        "duration": 0.023996829986572266
    },
    {
        "test_name": "Get owners by last name",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        ],
        "actual_body": [
            {
                "firstName": "Betty",
                "lastName": "Davis",
                "address": "638 Cardinal Ave.",
                "city": "Sun Prairie",
                "telephone": "6085551749",
                "id": 2,
                "pets": [
                    {
                        "name": "Basil",
                        "birthDate": "2012-08-06",
                        "type": {
                            "name": "hamster",
                            "id": 6
                        },
                        "id": 2,
                        "ownerId": 2,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Eduardo",
                "lastName": "Rodriquez",
                "address": "2693 Commerce St.",
                "city": "McFarland",
                "telephone": "6085558763",
                "id": 3,
                "pets": [
                    {
                        "name": "Jewel",
                        "birthDate": "2010-03-07",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 4,
                        "ownerId": 3,
                        "visits": []
                    },
                    {
                        "name": "Rosy",
                        "birthDate": "2011-04-17",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 3,
                        "ownerId": 3,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Harold",
                "lastName": "Davis",
                "address": "563 Friendly St.",
                "city": "Windsor",
                "telephone": "6085553198",
                "id": 4,
                "pets": [
                    {
                        "name": "Iggy",
                        "birthDate": "2010-11-30",
                        "type": {
                            "name": "lizard",
                            "id": 3
                        },
                        "id": 5,
                        "ownerId": 4,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Peter",
                "lastName": "McTavish",
                "address": "2387 S. Fair Way",
                "city": "Madison",
                "telephone": "6085552765",
                "id": 5,
                "pets": [
                    {
                        "name": "George",
                        "birthDate": "2010-01-20",
                        "type": {
                            "name": "snake",
                            "id": 4
                        },
                        "id": 6,
                        "ownerId": 5,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Jean",
                "lastName": "Coleman",
                "address": "105 N. Lake St.",
                "city": "Monona",
                "telephone": "6085552654",
                "id": 6,
                "pets": []
            },
            {
                "firstName": "Jeff",
                "lastName": "Black",
                "address": "1450 Oak Blvd.",
                "city": "Monona",
                "telephone": "6085555387",
                "id": 7,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2011-08-06",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 9,
                        "ownerId": 7,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Maria",
                "lastName": "Escobito",
                "address": "345 Maple St.",
                "city": "Madison",
                "telephone": "6085557683",
                "id": 8,
                "pets": [
                    {
                        "name": "Mulligan",
                        "birthDate": "2007-02-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 10,
                        "ownerId": 8,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "David",
                "lastName": "Schroeder",
                "address": "2749 Blackhawk Trail",
                "city": "Madison",
                "telephone": "6085559435",
                "id": 9,
                "pets": [
                    {
                        "name": "Freddy",
                        "birthDate": "2010-03-09",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 11,
                        "ownerId": 9,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Carlos",
                "lastName": "Estaban",
                "address": "2335 Independence La.",
                "city": "Waunakee",
                "telephone": "6085555487",
                "id": 10,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2010-06-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 12,
                        "ownerId": 10,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 11,
                "pets": []
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 12,
                "pets": []
            }
        ],
        "timestamp": "2024-09-18T15:42:59.730815",
        "duration": 0.011021614074707031
    },
    {
        "test_name": "Get owners with no matching last name",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [],
        "actual_body": [
            {
                "firstName": "Betty",
                "lastName": "Davis",
                "address": "638 Cardinal Ave.",
                "city": "Sun Prairie",
                "telephone": "6085551749",
                "id": 2,
                "pets": [
                    {
                        "name": "Basil",
                        "birthDate": "2012-08-06",
                        "type": {
                            "name": "hamster",
                            "id": 6
                        },
                        "id": 2,
                        "ownerId": 2,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Eduardo",
                "lastName": "Rodriquez",
                "address": "2693 Commerce St.",
                "city": "McFarland",
                "telephone": "6085558763",
                "id": 3,
                "pets": [
                    {
                        "name": "Jewel",
                        "birthDate": "2010-03-07",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 4,
                        "ownerId": 3,
                        "visits": []
                    },
                    {
                        "name": "Rosy",
                        "birthDate": "2011-04-17",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 3,
                        "ownerId": 3,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Harold",
                "lastName": "Davis",
                "address": "563 Friendly St.",
                "city": "Windsor",
                "telephone": "6085553198",
                "id": 4,
                "pets": [
                    {
                        "name": "Iggy",
                        "birthDate": "2010-11-30",
                        "type": {
                            "name": "lizard",
                            "id": 3
                        },
                        "id": 5,
                        "ownerId": 4,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Peter",
                "lastName": "McTavish",
                "address": "2387 S. Fair Way",
                "city": "Madison",
                "telephone": "6085552765",
                "id": 5,
                "pets": [
                    {
                        "name": "George",
                        "birthDate": "2010-01-20",
                        "type": {
                            "name": "snake",
                            "id": 4
                        },
                        "id": 6,
                        "ownerId": 5,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Jean",
                "lastName": "Coleman",
                "address": "105 N. Lake St.",
                "city": "Monona",
                "telephone": "6085552654",
                "id": 6,
                "pets": []
            },
            {
                "firstName": "Jeff",
                "lastName": "Black",
                "address": "1450 Oak Blvd.",
                "city": "Monona",
                "telephone": "6085555387",
                "id": 7,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2011-08-06",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 9,
                        "ownerId": 7,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Maria",
                "lastName": "Escobito",
                "address": "345 Maple St.",
                "city": "Madison",
                "telephone": "6085557683",
                "id": 8,
                "pets": [
                    {
                        "name": "Mulligan",
                        "birthDate": "2007-02-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 10,
                        "ownerId": 8,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "David",
                "lastName": "Schroeder",
                "address": "2749 Blackhawk Trail",
                "city": "Madison",
                "telephone": "6085559435",
                "id": 9,
                "pets": [
                    {
                        "name": "Freddy",
                        "birthDate": "2010-03-09",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 11,
                        "ownerId": 9,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Carlos",
                "lastName": "Estaban",
                "address": "2335 Independence La.",
                "city": "Waunakee",
                "telephone": "6085555487",
                "id": 10,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2010-06-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 12,
                        "ownerId": 10,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 11,
                "pets": []
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 12,
                "pets": []
            }
        ],
        "timestamp": "2024-09-18T15:42:59.742826",
        "duration": 0.010984420776367188
    },
    {
        "test_name": "Get owners with malformed last name parameter",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "className": "BadRequestException",
            "exMessage": "Invalid last name format"
        },
        "actual_body": [
            {
                "firstName": "Betty",
                "lastName": "Davis",
                "address": "638 Cardinal Ave.",
                "city": "Sun Prairie",
                "telephone": "6085551749",
                "id": 2,
                "pets": [
                    {
                        "name": "Basil",
                        "birthDate": "2012-08-06",
                        "type": {
                            "name": "hamster",
                            "id": 6
                        },
                        "id": 2,
                        "ownerId": 2,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Eduardo",
                "lastName": "Rodriquez",
                "address": "2693 Commerce St.",
                "city": "McFarland",
                "telephone": "6085558763",
                "id": 3,
                "pets": [
                    {
                        "name": "Jewel",
                        "birthDate": "2010-03-07",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 4,
                        "ownerId": 3,
                        "visits": []
                    },
                    {
                        "name": "Rosy",
                        "birthDate": "2011-04-17",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 3,
                        "ownerId": 3,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Harold",
                "lastName": "Davis",
                "address": "563 Friendly St.",
                "city": "Windsor",
                "telephone": "6085553198",
                "id": 4,
                "pets": [
                    {
                        "name": "Iggy",
                        "birthDate": "2010-11-30",
                        "type": {
                            "name": "lizard",
                            "id": 3
                        },
                        "id": 5,
                        "ownerId": 4,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Peter",
                "lastName": "McTavish",
                "address": "2387 S. Fair Way",
                "city": "Madison",
                "telephone": "6085552765",
                "id": 5,
                "pets": [
                    {
                        "name": "George",
                        "birthDate": "2010-01-20",
                        "type": {
                            "name": "snake",
                            "id": 4
                        },
                        "id": 6,
                        "ownerId": 5,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Jean",
                "lastName": "Coleman",
                "address": "105 N. Lake St.",
                "city": "Monona",
                "telephone": "6085552654",
                "id": 6,
                "pets": []
            },
            {
                "firstName": "Jeff",
                "lastName": "Black",
                "address": "1450 Oak Blvd.",
                "city": "Monona",
                "telephone": "6085555387",
                "id": 7,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2011-08-06",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 9,
                        "ownerId": 7,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Maria",
                "lastName": "Escobito",
                "address": "345 Maple St.",
                "city": "Madison",
                "telephone": "6085557683",
                "id": 8,
                "pets": [
                    {
                        "name": "Mulligan",
                        "birthDate": "2007-02-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 10,
                        "ownerId": 8,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "David",
                "lastName": "Schroeder",
                "address": "2749 Blackhawk Trail",
                "city": "Madison",
                "telephone": "6085559435",
                "id": 9,
                "pets": [
                    {
                        "name": "Freddy",
                        "birthDate": "2010-03-09",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 11,
                        "ownerId": 9,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Carlos",
                "lastName": "Estaban",
                "address": "2335 Independence La.",
                "city": "Waunakee",
                "telephone": "6085555487",
                "id": 10,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2010-06-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 12,
                        "ownerId": 10,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 11,
                "pets": []
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 12,
                "pets": []
            }
        ],
        "timestamp": "2024-09-18T15:42:59.759793",
        "duration": 0.0159604549407959
    },
    {
        "test_name": "Add valid owner",
        "passed": true,
        "expected_status": 201,
        "actual_status": 201,
        "expected_body": {
            "firstName": "George",
            "lastName": "Franklin",
            "address": "110 W. Liberty St.",
            "city": "Madison",
            "telephone": "6085551023",
            "id": 1,
            "pets": []
        },
        "actual_body": {
            "firstName": "George",
            "lastName": "Franklin",
            "address": "110 W. Liberty St.",
            "city": "Madison",
            "telephone": "6085551023",
            "id": 13,
            "pets": []
        },
        "timestamp": "2024-09-18T15:43:05.827763",
        "duration": 0.007006645202636719
    },
    {
        "test_name": "Add owner with missing lastName",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400,
            "path": "/api/owners",
            "timestamp": "2023-10-01T00:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "[Path '/lastName'] is required"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:43:05.835762",
        "duration": 0.007002830505371094
    },
    {
        "test_name": "Add owner with invalid telephone format",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400,
            "path": "/api/owners",
            "timestamp": "2023-10-01T00:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "[Path '/telephone'] does not match pattern '^[0-9]*$'"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:43:05.840793",
        "duration": 0.005030632019042969
    },
    {
        "test_name": "Add pet successfully",
        "passed": false,
        "expected_status": 201,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "Leo",
            "birthDate": "2020-01-01",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "ownerId": 1,
            "visits": []
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: foreign key no parent ; FK_PETS_OWNERS table: PETS value: 1] [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; SQL [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; constraint [FK_PETS_OWNERS]"
        },
        "timestamp": "2024-09-18T15:43:19.143600",
        "duration": 0.017997264862060547
    },
    {
        "test_name": "Add pet without required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/1/pets",
            "schemaValidationErrors": [
                {
                    "message": "Missing required property: name"
                },
                {
                    "message": "Missing required property: type"
                }
            ],
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:43:19.153595",
        "duration": 0.008992195129394531
    },
    {
        "test_name": "Add pet for non-existing owner",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Owner not found",
            "path": "/api/owners/999/pets",
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: foreign key no parent ; FK_PETS_OWNERS table: PETS value: 999] [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; SQL [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; constraint [FK_PETS_OWNERS]"
        },
        "timestamp": "2024-09-18T15:43:19.162619",
        "duration": 0.008022546768188477
    },
    {
        "test_name": "Successfully add a visit to an existing pet",
        "passed": false,
        "expected_status": 201,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "date": "2023-10-01",
            "description": "rabies shot",
            "petId": 1
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: foreign key no parent ; FK_VISITS_PETS table: VISITS value: 1] [insert into visits (visit_date,description,pet_id,id) values (?,?,?,default)]; SQL [insert into visits (visit_date,description,pet_id,id) values (?,?,?,default)]; constraint [FK_VISITS_PETS]"
        },
        "timestamp": "2024-09-18T15:43:24.411531",
        "duration": 0.01000356674194336
    },
    {
        "test_name": "Fail to add a visit due to missing description",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/1/pets/1/visits",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:43:24.418593",
        "duration": 0.0060558319091796875
    },
    {
        "test_name": "Fail to add a visit to a non-existing pet",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet not found for this owner.",
            "path": "/api/owners/1/pets/999/visits",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: foreign key no parent ; FK_VISITS_PETS table: VISITS value: 999] [insert into visits (visit_date,description,pet_id,id) values (?,?,?,default)]; SQL [insert into visits (visit_date,description,pet_id,id) values (?,?,?,default)]; constraint [FK_VISITS_PETS]"
        },
        "timestamp": "2024-09-18T15:43:24.426384",
        "duration": 0.007016658782958984
    },
    {
        "test_name": "Successful GET request to root path",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "GET request to root path with invalid parameters",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "GET request to non-existent path",
        "passed": false,
        "expected_status": 404,
        "actual_status": 500,
        "expected_body": {
            "className": "NotFoundException",
            "exMessage": "Resource not found"
        },
        "actual_body": {
            "className": "org.springframework.web.servlet.resource.NoResourceFoundException",
            "exMessage": "No static resource non-existent."
        },
        "timestamp": "2024-09-18T15:43:27.388664",
        "duration": 0.008035421371459961
    },
    {
        "test_name": "Successful PUT request",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "PUT request with bad request error",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "PUT request with not found error",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Successful redirect to Swagger",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Bad Request with invalid input",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Not Found error",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Successful deletion of resource",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Bad Request due to invalid input",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Resource not found",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Successful patch request",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Bad request due to invalid input",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Not found error on non-existing resource",
        "passed": false,
        "expected_status": 404,
        "actual_status": 500,
        "expected_body": {
            "className": "ResourceNotFoundError",
            "exMessage": "The requested resource was not found."
        },
        "actual_body": {
            "className": "org.springframework.web.servlet.resource.NoResourceFoundException",
            "exMessage": "No static resource non-existing-path."
        },
        "timestamp": "2024-09-18T15:43:38.345967",
        "duration": 0.007000446319580078
    },
    {
        "test_name": "Get visit details with valid visitId",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "description": "rabies shot",
            "date": "2023-10-01",
            "petId": 1
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:43:42.204922",
        "duration": 0.007005929946899414
    },
    {
        "test_name": "Get visit details with non-existent visitId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Visit not found",
            "path": "/api/visits/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:43:42.214557",
        "duration": 0.0076334476470947266
    },
    {
        "test_name": "Get visit details with invalid visitId",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/visits/-1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "Visit ID must be a positive integer."
                }
            ]
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getVisit.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:43:42.221568",
        "duration": 0.006043672561645508
    },
    {
        "test_name": "Update visit with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "description": "rabies shot",
            "id": 1,
            "date": "2023-10-01",
            "petId": 1
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:43:46.012376",
        "duration": 0.009001970291137695
    },
    {
        "test_name": "Update visit with missing description",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:43:46.019385",
        "duration": 0.005029201507568359
    },
    {
        "test_name": "Update visit with non-existent visitId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 404
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:43:46.027358",
        "duration": 0.006997108459472656
    },
    {
        "test_name": "Delete visit with valid ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "description": "rabies shot",
            "id": 1,
            "date": "2023-10-01",
            "petId": 1
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:43:51.015931",
        "duration": 0.012183904647827148
    },
    {
        "test_name": "Delete visit with non-existing ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Visit not found.",
            "path": "/api/visits/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:43:51.029887",
        "duration": 0.011998891830444336
    },
    {
        "test_name": "Delete visit with invalid ID format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/visits/abc",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "Invalid type. Expected integer."
                }
            ]
        },
        "actual_body": {
            "className": "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException",
            "exMessage": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; For input string: \"abc\""
        },
        "timestamp": "2024-09-18T15:43:51.041890",
        "duration": 0.01100015640258789
    },
    {
        "test_name": "Get vet details by valid vetId",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "James",
            "lastName": "Carter",
            "id": 1,
            "specialties": [
                {
                    "id": 1,
                    "name": "radiology"
                }
            ]
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:43:55.204854",
        "duration": 0.005004167556762695
    },
    {
        "test_name": "Get vet details by vetId not found",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "error": "Not Found",
            "message": "Vet not found.",
            "path": "/api/vets/999",
            "schemaValidationErrors": [],
            "status": 404,
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:43:55.214461",
        "duration": 0.0076253414154052734
    },
    {
        "test_name": "Get vet details with invalid vetId",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/vets/-1",
            "schemaValidationErrors": [],
            "status": 400,
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getVet.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:43:55.220495",
        "duration": 0.0060346126556396484
    },
    {
        "test_name": "Update vet with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "James",
            "lastName": "Carter",
            "id": 1,
            "specialties": [
                {
                    "id": 1,
                    "name": "radiology"
                }
            ]
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:43:59.680574",
        "duration": 0.010796785354614258
    },
    {
        "test_name": "Update vet with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/vets/1",
            "status": 400,
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "Missing required property 'firstName'"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:43:59.689565",
        "duration": 0.00799560546875
    },
    {
        "test_name": "Update vet with invalid vetId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "error": "Not Found",
            "message": "Vet not found",
            "path": "/api/vets/9999",
            "status": 404,
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:43:59.703567",
        "duration": 0.013000011444091797
    },
    {
        "test_name": "Delete existing vet",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "James",
            "lastName": "Carter",
            "id": 1,
            "specialties": [
                {
                    "id": 1,
                    "name": "radiology"
                }
            ]
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:04.311537",
        "duration": 0.008002519607543945
    },
    {
        "test_name": "Delete vet with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Vet not found",
            "path": "/api/vets/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:04.321572",
        "duration": 0.008037805557250977
    },
    {
        "test_name": "Delete vet with invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/vets/-1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "deleteVet.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:44:04.328533",
        "duration": 0.0069615840911865234
    },
    {
        "test_name": "Retrieve existing specialty by valid ID",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": {
            "id": 1,
            "name": "radiology"
        },
        "actual_body": {
            "id": 1,
            "name": "radiology"
        },
        "timestamp": "2024-09-18T15:44:08.486503",
        "duration": 0.006031036376953125
    },
    {
        "test_name": "Request specialty with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Specialty not found.",
            "path": "/api/specialties/9999",
            "timestamp": "2023-10-10T00:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:08.493475",
        "duration": 0.006972074508666992
    },
    {
        "test_name": "Request specialty with invalid ID (negative number)",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/specialties/-1",
            "timestamp": "2023-10-10T00:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getSpecialty.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:44:08.499478",
        "duration": 0.004990339279174805
    },
    {
        "test_name": "Update specialty with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 204,
        "expected_body": {
            "id": 1,
            "name": "radiology"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:13.199993",
        "duration": 0.006999492645263672
    },
    {
        "test_name": "Update specialty with missing name",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400,
            "path": "/api/specialties/1",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:44:13.206022",
        "duration": 0.005025386810302734
    },
    {
        "test_name": "Update specialty with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "error": "Not Found",
            "message": "Specialty not found.",
            "status": 404,
            "path": "/api/specialties/999",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:13.214993",
        "duration": 0.007999658584594727
    },
    {
        "test_name": "Delete specialty with valid ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "radiology"
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: foreign key no action ; FK_VET_SPECIALTIES_SPECIALTIES table: VET_SPECIALTIES] [delete from specialties where id=?]; SQL [delete from specialties where id=?]; constraint [FK_VET_SPECIALTIES_SPECIALTIES]"
        },
        "timestamp": "2024-09-18T15:44:18.574517",
        "duration": 0.008003473281860352
    },
    {
        "test_name": "Delete specialty with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Specialty not found.",
            "path": "/api/specialties/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:18.581515",
        "duration": 0.005999565124511719
    },
    {
        "test_name": "Delete specialty with invalid ID (negative number)",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/specialties/-1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "Invalid value for 'specialtyId'. Must be a positive integer."
                }
            ]
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "deleteSpecialty.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:44:18.588387",
        "duration": 0.006871938705444336
    },
    {
        "test_name": "Get pet type with valid ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "cat"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:22.678176",
        "duration": 0.009966850280761719
    },
    {
        "test_name": "Get pet type with non-existing ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet Type not found.",
            "path": "/api/pettypes/999",
            "timestamp": "2023-10-01T00:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:22.691173",
        "duration": 0.011001825332641602
    },
    {
        "test_name": "Get pet type with invalid ID format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pettypes/abc",
            "timestamp": "2023-10-01T00:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException",
            "exMessage": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; For input string: \"abc\""
        },
        "timestamp": "2024-09-18T15:44:22.699203",
        "duration": 0.007030963897705078
    },
    {
        "test_name": "Update pet type with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "dog"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:26.579653",
        "duration": 0.008975028991699219
    },
    {
        "test_name": "Update pet type with invalid ID",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pettypes/-1",
            "timestamp": "2023-10-01T00:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:44:26.588692",
        "duration": 0.007035255432128906
    },
    {
        "test_name": "Update pet type with missing name field",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pettypes/1",
            "timestamp": "2023-10-01T00:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:44:26.595687",
        "duration": 0.006994724273681641
    },
    {
        "test_name": "Delete existing pet type",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "cat"
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:30.395266",
        "duration": 0.006999492645263672
    },
    {
        "test_name": "Delete non-existing pet type",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet type not found.",
            "path": "/api/pettypes/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:30.405272",
        "duration": 0.008006572723388672
    },
    {
        "test_name": "Delete pet type with invalid ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pettypes/-1",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "[Path '/petTypeId'] Instance type (-1) does not match any allowed primitive type (allowed: [\"integer\"])",
                    "empty": false
                }
            ]
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "deletePetType.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:44:30.413266",
        "duration": 0.006998777389526367
    },
    {
        "test_name": "Get pet details with valid petId",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "Leo",
            "birthDate": "2020-01-01",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "ownerId": 1,
            "visits": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:35.510113",
        "duration": 0.00600123405456543
    },
    {
        "test_name": "Get pet details with non-existent petId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet not found.",
            "path": "/api/pets/999",
            "timestamp": "2023-10-04T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:35.518115",
        "duration": 0.006995201110839844
    },
    {
        "test_name": "Get pet details with invalid petId format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pets/abc",
            "timestamp": "2023-10-04T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException",
            "exMessage": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; For input string: \"abc\""
        },
        "timestamp": "2024-09-18T15:44:35.523914",
        "duration": 0.004799365997314453
    },
    {
        "test_name": "Update pet successfully with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "Leo",
            "birthDate": "2020-01-01",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "visits": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:39.598478",
        "duration": 0.012005329132080078
    },
    {
        "test_name": "Update pet with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:44:39.610475",
        "duration": 0.010991573333740234
    },
    {
        "test_name": "Update pet with non-existing petId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "error": "Not Found",
            "message": "Pet not found",
            "status": 404
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:39.617504",
        "duration": 0.007031440734863281
    },
    {
        "test_name": "Delete existing pet",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {},
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:43.991994",
        "duration": 0.008000612258911133
    },
    {
        "test_name": "Delete pet with non-existing ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "error": "Not Found",
            "message": "Pet not found.",
            "status": 404,
            "timestamp": "2023-10-01T00:00:00Z",
            "path": "/api/pets/999",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:44.001995",
        "duration": 0.00899505615234375
    },
    {
        "test_name": "Delete pet with invalid ID (negative)",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400,
            "timestamp": "2023-10-01T00:00:00Z",
            "path": "/api/pets/-1",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "deletePet.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:44:44.008994",
        "duration": 0.0060007572174072266
    },
    {
        "test_name": "Get Owner Details - Valid Owner ID",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "George",
            "lastName": "Franklin",
            "address": "110 W. Liberty St.",
            "city": "Madison",
            "telephone": "6085551023",
            "id": 1,
            "pets": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:48.386352",
        "duration": 0.008038043975830078
    },
    {
        "test_name": "Get Owner Details - Owner Not Found",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "path": "/api/owners/999",
            "timestamp": "2023-10-01T12:00:00Z",
            "message": "Owner not found",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:48.393351",
        "duration": 0.006035804748535156
    },
    {
        "test_name": "Get Owner Details - Bad Request with Invalid Owner ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "path": "/api/owners/-1",
            "timestamp": "2023-10-01T12:00:00Z",
            "message": "Request failed schema validation",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getOwner.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:44:48.399319",
        "duration": 0.0049991607666015625
    },
    {
        "test_name": "Update owner with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "George",
            "lastName": "Franklin",
            "address": "110 W. Liberty St.",
            "city": "Madison",
            "telephone": "6085551023",
            "id": 1,
            "pets": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:54.806148",
        "duration": 0.009038686752319336
    },
    {
        "test_name": "Update owner with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners",
            "schemaValidationErrors": [
                {
                    "message": "[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: [\"string\"])",
                    "empty": false
                }
            ],
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:44:54.811980",
        "duration": 0.0050144195556640625
    },
    {
        "test_name": "Update owner with non-existent ownerId",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Owner not found.",
            "path": "/api/owners",
            "timestamp": "2023-10-01T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:54.821011",
        "duration": 0.009031057357788086
    },
    {
        "test_name": "Delete owner successfully",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "firstName": "George",
            "lastName": "Franklin",
            "address": "110 W. Liberty St.",
            "city": "Madison",
            "telephone": "6085551023",
            "id": 1,
            "pets": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:59.660465",
        "duration": 0.01500248908996582
    },
    {
        "test_name": "Delete owner with non-existent ID",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "path": "/api/owners/9999",
            "timestamp": "2023-10-01T12:00:00Z",
            "message": "Owner not found",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:44:59.680467",
        "duration": 0.016999483108520508
    },
    {
        "test_name": "Delete owner with invalid ID format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "path": "/api/owners/abc",
            "timestamp": "2023-10-01T12:00:00Z",
            "message": "Request failed schema validation",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException",
            "exMessage": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; For input string: \"abc\""
        },
        "timestamp": "2024-09-18T15:44:59.687468",
        "duration": 0.006005048751831055
    },
    {
        "test_name": "Get existing pet details",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "name": "Leo",
            "birthDate": "2020-01-01",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "ownerId": 1,
            "visits": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:45:02.986969",
        "duration": 0.006983757019042969
    },
    {
        "test_name": "Get pet details with non-existing owner",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Pet not found.",
            "path": "/api/owners/999/pets/1",
            "timestamp": "2023-10-10T10:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:45:02.996969",
        "duration": 0.008999824523925781
    },
    {
        "test_name": "Get pet details with invalid petId",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/1/pets/-1",
            "timestamp": "2023-10-10T10:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "getOwnersPet.arg1: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:45:03.001969",
        "duration": 0.004999637603759766
    },
    {
        "test_name": "Update pet with valid data",
        "passed": false,
        "expected_status": 204,
        "actual_status": 501,
        "expected_body": {},
        "actual_body": null,
        "timestamp": "2024-09-18T15:45:07.706781",
        "duration": 0.004988431930541992
    },
    {
        "test_name": "Update pet with invalid owner ID",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/-1/pets/1",
            "timestamp": "2023-01-01T00:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "updateOwnersPet.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:45:07.715558",
        "duration": 0.007740020751953125
    },
    {
        "test_name": "Update pet with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/1/pets/1",
            "timestamp": "2023-01-01T00:00:00Z",
            "schemaValidationErrors": [
                {
                    "message": "Missing required fields: birthDate, type"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:45:07.721561",
        "duration": 0.005002498626708984
    },
    {
        "test_name": "Successful retrieval of visits",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": [
            {
                "id": 1,
                "description": "rabies shot",
                "date": "2023-10-01",
                "petId": 1
            }
        ],
        "actual_body": null,
        "timestamp": "2024-09-18T15:45:16.354958",
        "duration": 0.011968135833740234
    },
    {
        "test_name": "No visits found",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": [],
        "actual_body": null,
        "timestamp": "2024-09-18T15:45:16.365953",
        "duration": 0.008951187133789062
    },
    {
        "test_name": "Not Modified response",
        "passed": false,
        "expected_status": 304,
        "actual_status": 404,
        "expected_body": [],
        "actual_body": null,
        "timestamp": "2024-09-18T15:45:16.375952",
        "duration": 0.00799703598022461
    },
    {
        "test_name": "Bad Request response",
        "passed": false,
        "expected_status": 400,
        "actual_status": 404,
        "expected_body": {
            "className": "BadRequest",
            "exMessage": "Invalid request parameters."
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:45:16.386949",
        "duration": 0.008993387222290039
    },
    {
        "test_name": "Not Found response",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "className": "NotFound",
            "exMessage": "Visits not found."
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:45:16.398951",
        "duration": 0.009996414184570312
    },
    {
        "test_name": "Server error response",
        "passed": false,
        "expected_status": 500,
        "actual_status": 404,
        "expected_body": {
            "status": 500,
            "error": "Internal Server Error",
            "path": "/api/visits",
            "timestamp": "2023-10-01T12:00:00Z",
            "message": "Unexpected error occurred.",
            "schemaValidationErrors": []
        },
        "actual_body": null,
        "timestamp": "2024-09-18T15:45:16.408950",
        "duration": 0.00899648666381836
    },
    {
        "test_name": "Add visit with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "description": "rabies shot",
            "id": 1,
            "date": "2023-10-01",
            "petId": 1
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: NOT NULL check constraint ; SYS_CT_10120 table: VISITS column: PET_ID] [insert into visits (visit_date,description,pet_id,id) values (?,?,?,default)]; SQL [insert into visits (visit_date,description,pet_id,id) values (?,?,?,default)]; constraint [null]"
        },
        "timestamp": "2024-09-18T15:45:20.822206",
        "duration": 0.01096343994140625
    },
    {
        "test_name": "Add visit with missing description",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:45:20.829221",
        "duration": 0.006012916564941406
    },
    {
        "test_name": "Add visit with invalid ID",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:45:20.834205",
        "duration": 0.004984140396118164
    },
    {
        "test_name": "Successful retrieval of vets",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            }
        ],
        "actual_body": [
            {
                "firstName": "Helen",
                "lastName": "Leary",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 2
            },
            {
                "firstName": "Linda",
                "lastName": "Douglas",
                "specialties": [
                    {
                        "id": 3,
                        "name": "dentistry"
                    },
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 3
            },
            {
                "firstName": "Rafael",
                "lastName": "Ortega",
                "specialties": [
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 4
            },
            {
                "firstName": "Henry",
                "lastName": "Stevens",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 5
            },
            {
                "firstName": "Sharon",
                "lastName": "Jenkins",
                "specialties": [],
                "id": 6
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 7
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 8
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 9
            }
        ],
        "timestamp": "2024-09-18T15:45:25.004296",
        "duration": 0.009003639221191406
    },
    {
        "test_name": "Not modified response",
        "passed": false,
        "expected_status": 304,
        "actual_status": 200,
        "expected_body": [],
        "actual_body": [
            {
                "firstName": "Helen",
                "lastName": "Leary",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 2
            },
            {
                "firstName": "Linda",
                "lastName": "Douglas",
                "specialties": [
                    {
                        "id": 3,
                        "name": "dentistry"
                    },
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 3
            },
            {
                "firstName": "Rafael",
                "lastName": "Ortega",
                "specialties": [
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 4
            },
            {
                "firstName": "Henry",
                "lastName": "Stevens",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 5
            },
            {
                "firstName": "Sharon",
                "lastName": "Jenkins",
                "specialties": [],
                "id": 6
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 7
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 8
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 9
            }
        ],
        "timestamp": "2024-09-18T15:45:25.012297",
        "duration": 0.006975412368774414
    },
    {
        "test_name": "Bad request response",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "className": "BadRequest",
            "exMessage": "Invalid request parameters"
        },
        "actual_body": [
            {
                "firstName": "Helen",
                "lastName": "Leary",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 2
            },
            {
                "firstName": "Linda",
                "lastName": "Douglas",
                "specialties": [
                    {
                        "id": 3,
                        "name": "dentistry"
                    },
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 3
            },
            {
                "firstName": "Rafael",
                "lastName": "Ortega",
                "specialties": [
                    {
                        "id": 2,
                        "name": "surgery"
                    }
                ],
                "id": 4
            },
            {
                "firstName": "Henry",
                "lastName": "Stevens",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 5
            },
            {
                "firstName": "Sharon",
                "lastName": "Jenkins",
                "specialties": [],
                "id": 6
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 7
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 8
            },
            {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 9
            }
        ],
        "timestamp": "2024-09-18T15:45:25.022293",
        "duration": 0.00899648666381836
    },
    {
        "test_name": "Add vet with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 201,
        "expected_body": {
            "firstName": "James",
            "lastName": "Carter",
            "id": 1,
            "specialties": [
                {
                    "id": 1,
                    "name": "radiology"
                }
            ]
        },
        "actual_body": {
            "firstName": "James",
            "lastName": "Carter",
            "specialties": [
                {
                    "id": 1,
                    "name": "radiology"
                }
            ],
            "id": 10
        },
        "timestamp": "2024-09-18T15:45:28.634229",
        "duration": 0.010992288589477539
    },
    {
        "test_name": "Add vet with missing firstName",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:45:28.640257",
        "duration": 0.005033016204833984
    },
    {
        "test_name": "Add vet with invalid lastName",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:45:28.646140",
        "duration": 0.005040884017944336
    },
    {
        "test_name": "Retrieve specialties successfully",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "id": 1,
                "name": "radiology"
            },
            {
                "id": 2,
                "name": "surgery"
            }
        ],
        "actual_body": [
            {
                "id": 1,
                "name": "radiology"
            },
            {
                "id": 2,
                "name": "surgery"
            },
            {
                "id": 3,
                "name": "dentistry"
            }
        ],
        "timestamp": "2024-09-18T15:45:38.516013",
        "duration": 0.006033658981323242
    },
    {
        "test_name": "Check for not modified response",
        "passed": false,
        "expected_status": 304,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": [
            {
                "id": 1,
                "name": "radiology"
            },
            {
                "id": 2,
                "name": "surgery"
            },
            {
                "id": 3,
                "name": "dentistry"
            }
        ],
        "timestamp": "2024-09-18T15:45:38.523978",
        "duration": 0.006997823715209961
    },
    {
        "test_name": "Handle bad request response",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "className": "BadRequest",
            "exMessage": "Invalid parameters"
        },
        "actual_body": [
            {
                "id": 1,
                "name": "radiology"
            },
            {
                "id": 2,
                "name": "surgery"
            },
            {
                "id": 3,
                "name": "dentistry"
            }
        ],
        "timestamp": "2024-09-18T15:45:38.531982",
        "duration": 0.006004810333251953
    },
    {
        "test_name": "Add specialty with valid data",
        "passed": false,
        "expected_status": 200,
        "actual_status": 201,
        "expected_body": {
            "id": 1,
            "name": "radiology"
        },
        "actual_body": {
            "id": 1,
            "name": "radiology"
        },
        "timestamp": "2024-09-18T15:45:41.237085",
        "duration": 0.009965658187866211
    },
    {
        "test_name": "Add specialty with missing name",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "schemaValidationErrors": [
                {
                    "message": "Field 'name' is required."
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:45:41.242714",
        "duration": 0.004629373550415039
    },
    {
        "test_name": "Add specialty with invalid ID",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "schemaValidationErrors": [
                {
                    "message": "Field 'id' must be greater than or equal to 0."
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:45:41.248077",
        "duration": 0.004329204559326172
    },
    {
        "test_name": "Get pet types successfully",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "id": 1,
                "name": "cat"
            },
            {
                "id": 2,
                "name": "dog"
            }
        ],
        "actual_body": [
            {
                "name": "dog",
                "id": 2
            },
            {
                "name": "lizard",
                "id": 3
            },
            {
                "name": "snake",
                "id": 4
            },
            {
                "name": "bird",
                "id": 5
            },
            {
                "name": "hamster",
                "id": 6
            }
        ],
        "timestamp": "2024-09-18T15:45:45.149146",
        "duration": 0.00800466537475586
    },
    {
        "test_name": "Get pet types not modified",
        "passed": false,
        "expected_status": 304,
        "actual_status": 200,
        "expected_body": [],
        "actual_body": [
            {
                "name": "dog",
                "id": 2
            },
            {
                "name": "lizard",
                "id": 3
            },
            {
                "name": "snake",
                "id": 4
            },
            {
                "name": "bird",
                "id": 5
            },
            {
                "name": "hamster",
                "id": 6
            }
        ],
        "timestamp": "2024-09-18T15:45:45.155110",
        "duration": 0.004996299743652344
    },
    {
        "test_name": "Get pet types bad request",
        "passed": false,
        "expected_status": 400,
        "actual_status": 200,
        "expected_body": {
            "className": "BadRequest",
            "exMessage": "Invalid request"
        },
        "actual_body": [
            {
                "name": "dog",
                "id": 2
            },
            {
                "name": "lizard",
                "id": 3
            },
            {
                "name": "snake",
                "id": 4
            },
            {
                "name": "bird",
                "id": 5
            },
            {
                "name": "hamster",
                "id": 6
            }
        ],
        "timestamp": "2024-09-18T15:45:45.163112",
        "duration": 0.005991458892822266
    },
    {
        "test_name": "Add valid pet type",
        "passed": false,
        "expected_status": 200,
        "actual_status": 201,
        "expected_body": {
            "id": 1,
            "name": "dog"
        },
        "actual_body": {
            "name": "dog",
            "id": 7
        },
        "timestamp": "2024-09-18T15:45:50.206738",
        "duration": 0.014030694961547852
    },
    {
        "test_name": "Add pet type with missing name",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400,
            "path": "/api/pettypes",
            "timestamp": "2023-10-01T00:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:45:50.212490",
        "duration": 0.004784345626831055
    },
    {
        "test_name": "Add pet type with invalid name length",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "status": 400,
            "path": "/api/pettypes",
            "timestamp": "2023-10-01T00:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:45:50.219493",
        "duration": 0.0059490203857421875
    },
    {
        "test_name": "Get all pets successfully",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "ownerId": 1,
                "visits": []
            }
        ],
        "actual_body": [
            {
                "name": "Basil",
                "birthDate": "2012-08-06",
                "type": {
                    "name": "hamster",
                    "id": 6
                },
                "id": 2,
                "ownerId": 2,
                "visits": []
            },
            {
                "name": "Rosy",
                "birthDate": "2011-04-17",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 3,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Jewel",
                "birthDate": "2010-03-07",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 4,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Iggy",
                "birthDate": "2010-11-30",
                "type": {
                    "name": "lizard",
                    "id": 3
                },
                "id": 5,
                "ownerId": 4,
                "visits": []
            },
            {
                "name": "George",
                "birthDate": "2010-01-20",
                "type": {
                    "name": "snake",
                    "id": 4
                },
                "id": 6,
                "ownerId": 5,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2011-08-06",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 9,
                "ownerId": 7,
                "visits": []
            },
            {
                "name": "Mulligan",
                "birthDate": "2007-02-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 10,
                "ownerId": 8,
                "visits": []
            },
            {
                "name": "Freddy",
                "birthDate": "2010-03-09",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 11,
                "ownerId": 9,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2010-06-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 12,
                "ownerId": 10,
                "visits": []
            }
        ],
        "timestamp": "2024-09-18T15:45:53.676093",
        "duration": 0.011002302169799805
    },
    {
        "test_name": "Get pets with no pets available",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [],
        "actual_body": [
            {
                "name": "Basil",
                "birthDate": "2012-08-06",
                "type": {
                    "name": "hamster",
                    "id": 6
                },
                "id": 2,
                "ownerId": 2,
                "visits": []
            },
            {
                "name": "Rosy",
                "birthDate": "2011-04-17",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 3,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Jewel",
                "birthDate": "2010-03-07",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 4,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Iggy",
                "birthDate": "2010-11-30",
                "type": {
                    "name": "lizard",
                    "id": 3
                },
                "id": 5,
                "ownerId": 4,
                "visits": []
            },
            {
                "name": "George",
                "birthDate": "2010-01-20",
                "type": {
                    "name": "snake",
                    "id": 4
                },
                "id": 6,
                "ownerId": 5,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2011-08-06",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 9,
                "ownerId": 7,
                "visits": []
            },
            {
                "name": "Mulligan",
                "birthDate": "2007-02-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 10,
                "ownerId": 8,
                "visits": []
            },
            {
                "name": "Freddy",
                "birthDate": "2010-03-09",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 11,
                "ownerId": 9,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2010-06-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 12,
                "ownerId": 10,
                "visits": []
            }
        ],
        "timestamp": "2024-09-18T15:45:53.685090",
        "duration": 0.007999420166015625
    },
    {
        "test_name": "Get pets and receive Not Modified response",
        "passed": false,
        "expected_status": 304,
        "actual_status": 200,
        "expected_body": {},
        "actual_body": [
            {
                "name": "Basil",
                "birthDate": "2012-08-06",
                "type": {
                    "name": "hamster",
                    "id": 6
                },
                "id": 2,
                "ownerId": 2,
                "visits": []
            },
            {
                "name": "Rosy",
                "birthDate": "2011-04-17",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 3,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Jewel",
                "birthDate": "2010-03-07",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 4,
                "ownerId": 3,
                "visits": []
            },
            {
                "name": "Iggy",
                "birthDate": "2010-11-30",
                "type": {
                    "name": "lizard",
                    "id": 3
                },
                "id": 5,
                "ownerId": 4,
                "visits": []
            },
            {
                "name": "George",
                "birthDate": "2010-01-20",
                "type": {
                    "name": "snake",
                    "id": 4
                },
                "id": 6,
                "ownerId": 5,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2011-08-06",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 9,
                "ownerId": 7,
                "visits": []
            },
            {
                "name": "Mulligan",
                "birthDate": "2007-02-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 10,
                "ownerId": 8,
                "visits": []
            },
            {
                "name": "Freddy",
                "birthDate": "2010-03-09",
                "type": {
                    "name": "bird",
                    "id": 5
                },
                "id": 11,
                "ownerId": 9,
                "visits": []
            },
            {
                "name": "Lucky",
                "birthDate": "2010-06-24",
                "type": {
                    "name": "dog",
                    "id": 2
                },
                "id": 12,
                "ownerId": 10,
                "visits": []
            }
        ],
        "timestamp": "2024-09-18T15:45:53.697109",
        "duration": 0.011013984680175781
    },
    {
        "test_name": "Add pet with valid details",
        "passed": false,
        "expected_status": 200,
        "actual_status": 404,
        "expected_body": {
            "name": "Leo",
            "birthDate": "2023-01-01",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "id": 1,
            "ownerId": 1,
            "visits": []
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: NOT NULL check constraint ; SYS_CT_10110 table: PETS column: OWNER_ID] [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; SQL [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; constraint [null]"
        },
        "timestamp": "2024-09-18T15:46:04.502095",
        "duration": 0.010980844497680664
    },
    {
        "test_name": "Add pet with missing name",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pets",
            "schemaValidationErrors": [
                {
                    "message": "'name' is a required property"
                }
            ],
            "timestamp": "2023-10-01T00:00:00Z"
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:46:04.512742",
        "duration": 0.00864720344543457
    },
    {
        "test_name": "Add pet with invalid birthDate format",
        "passed": false,
        "expected_status": 400,
        "actual_status": 500,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/pets",
            "schemaValidationErrors": [
                {
                    "message": "'birthDate' must match format 'date'"
                }
            ],
            "timestamp": "2023-10-01T00:00:00Z"
        },
        "actual_body": {
            "className": "org.springframework.http.converter.HttpMessageNotReadableException",
            "exMessage": "JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"01-01-2023\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '01-01-2023' could not be parsed at index 0"
        },
        "timestamp": "2024-09-18T15:46:04.518740",
        "duration": 0.004945516586303711
    },
    {
        "test_name": "Retrieve all owners without last name filter",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        ],
        "actual_body": [
            {
                "firstName": "Betty",
                "lastName": "Davis",
                "address": "638 Cardinal Ave.",
                "city": "Sun Prairie",
                "telephone": "6085551749",
                "id": 2,
                "pets": [
                    {
                        "name": "Basil",
                        "birthDate": "2012-08-06",
                        "type": {
                            "name": "hamster",
                            "id": 6
                        },
                        "id": 2,
                        "ownerId": 2,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Eduardo",
                "lastName": "Rodriquez",
                "address": "2693 Commerce St.",
                "city": "McFarland",
                "telephone": "6085558763",
                "id": 3,
                "pets": [
                    {
                        "name": "Jewel",
                        "birthDate": "2010-03-07",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 4,
                        "ownerId": 3,
                        "visits": []
                    },
                    {
                        "name": "Rosy",
                        "birthDate": "2011-04-17",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 3,
                        "ownerId": 3,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Harold",
                "lastName": "Davis",
                "address": "563 Friendly St.",
                "city": "Windsor",
                "telephone": "6085553198",
                "id": 4,
                "pets": [
                    {
                        "name": "Iggy",
                        "birthDate": "2010-11-30",
                        "type": {
                            "name": "lizard",
                            "id": 3
                        },
                        "id": 5,
                        "ownerId": 4,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Peter",
                "lastName": "McTavish",
                "address": "2387 S. Fair Way",
                "city": "Madison",
                "telephone": "6085552765",
                "id": 5,
                "pets": [
                    {
                        "name": "George",
                        "birthDate": "2010-01-20",
                        "type": {
                            "name": "snake",
                            "id": 4
                        },
                        "id": 6,
                        "ownerId": 5,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Jean",
                "lastName": "Coleman",
                "address": "105 N. Lake St.",
                "city": "Monona",
                "telephone": "6085552654",
                "id": 6,
                "pets": []
            },
            {
                "firstName": "Jeff",
                "lastName": "Black",
                "address": "1450 Oak Blvd.",
                "city": "Monona",
                "telephone": "6085555387",
                "id": 7,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2011-08-06",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 9,
                        "ownerId": 7,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Maria",
                "lastName": "Escobito",
                "address": "345 Maple St.",
                "city": "Madison",
                "telephone": "6085557683",
                "id": 8,
                "pets": [
                    {
                        "name": "Mulligan",
                        "birthDate": "2007-02-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 10,
                        "ownerId": 8,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "David",
                "lastName": "Schroeder",
                "address": "2749 Blackhawk Trail",
                "city": "Madison",
                "telephone": "6085559435",
                "id": 9,
                "pets": [
                    {
                        "name": "Freddy",
                        "birthDate": "2010-03-09",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 11,
                        "ownerId": 9,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Carlos",
                "lastName": "Estaban",
                "address": "2335 Independence La.",
                "city": "Waunakee",
                "telephone": "6085555487",
                "id": 10,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2010-06-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 12,
                        "ownerId": 10,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 11,
                "pets": []
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 12,
                "pets": []
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 13,
                "pets": []
            }
        ],
        "timestamp": "2024-09-18T15:46:08.774476",
        "duration": 0.011005878448486328
    },
    {
        "test_name": "Retrieve owners with last name filter",
        "passed": true,
        "expected_status": 200,
        "actual_status": 200,
        "expected_body": [
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        ],
        "actual_body": [
            {
                "firstName": "Betty",
                "lastName": "Davis",
                "address": "638 Cardinal Ave.",
                "city": "Sun Prairie",
                "telephone": "6085551749",
                "id": 2,
                "pets": [
                    {
                        "name": "Basil",
                        "birthDate": "2012-08-06",
                        "type": {
                            "name": "hamster",
                            "id": 6
                        },
                        "id": 2,
                        "ownerId": 2,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Eduardo",
                "lastName": "Rodriquez",
                "address": "2693 Commerce St.",
                "city": "McFarland",
                "telephone": "6085558763",
                "id": 3,
                "pets": [
                    {
                        "name": "Jewel",
                        "birthDate": "2010-03-07",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 4,
                        "ownerId": 3,
                        "visits": []
                    },
                    {
                        "name": "Rosy",
                        "birthDate": "2011-04-17",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 3,
                        "ownerId": 3,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Harold",
                "lastName": "Davis",
                "address": "563 Friendly St.",
                "city": "Windsor",
                "telephone": "6085553198",
                "id": 4,
                "pets": [
                    {
                        "name": "Iggy",
                        "birthDate": "2010-11-30",
                        "type": {
                            "name": "lizard",
                            "id": 3
                        },
                        "id": 5,
                        "ownerId": 4,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Peter",
                "lastName": "McTavish",
                "address": "2387 S. Fair Way",
                "city": "Madison",
                "telephone": "6085552765",
                "id": 5,
                "pets": [
                    {
                        "name": "George",
                        "birthDate": "2010-01-20",
                        "type": {
                            "name": "snake",
                            "id": 4
                        },
                        "id": 6,
                        "ownerId": 5,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Jean",
                "lastName": "Coleman",
                "address": "105 N. Lake St.",
                "city": "Monona",
                "telephone": "6085552654",
                "id": 6,
                "pets": []
            },
            {
                "firstName": "Jeff",
                "lastName": "Black",
                "address": "1450 Oak Blvd.",
                "city": "Monona",
                "telephone": "6085555387",
                "id": 7,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2011-08-06",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 9,
                        "ownerId": 7,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Maria",
                "lastName": "Escobito",
                "address": "345 Maple St.",
                "city": "Madison",
                "telephone": "6085557683",
                "id": 8,
                "pets": [
                    {
                        "name": "Mulligan",
                        "birthDate": "2007-02-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 10,
                        "ownerId": 8,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "David",
                "lastName": "Schroeder",
                "address": "2749 Blackhawk Trail",
                "city": "Madison",
                "telephone": "6085559435",
                "id": 9,
                "pets": [
                    {
                        "name": "Freddy",
                        "birthDate": "2010-03-09",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 11,
                        "ownerId": 9,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Carlos",
                "lastName": "Estaban",
                "address": "2335 Independence La.",
                "city": "Waunakee",
                "telephone": "6085555487",
                "id": 10,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2010-06-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 12,
                        "ownerId": 10,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 11,
                "pets": []
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 12,
                "pets": []
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 13,
                "pets": []
            }
        ],
        "timestamp": "2024-09-18T15:46:08.787471",
        "duration": 0.012000083923339844
    },
    {
        "test_name": "Handle not found case when querying non-existent last name",
        "passed": false,
        "expected_status": 404,
        "actual_status": 200,
        "expected_body": {
            "className": "OwnerNotFoundException",
            "exMessage": "No owners found with last name 'Nonexistent'."
        },
        "actual_body": [
            {
                "firstName": "Betty",
                "lastName": "Davis",
                "address": "638 Cardinal Ave.",
                "city": "Sun Prairie",
                "telephone": "6085551749",
                "id": 2,
                "pets": [
                    {
                        "name": "Basil",
                        "birthDate": "2012-08-06",
                        "type": {
                            "name": "hamster",
                            "id": 6
                        },
                        "id": 2,
                        "ownerId": 2,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Eduardo",
                "lastName": "Rodriquez",
                "address": "2693 Commerce St.",
                "city": "McFarland",
                "telephone": "6085558763",
                "id": 3,
                "pets": [
                    {
                        "name": "Jewel",
                        "birthDate": "2010-03-07",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 4,
                        "ownerId": 3,
                        "visits": []
                    },
                    {
                        "name": "Rosy",
                        "birthDate": "2011-04-17",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 3,
                        "ownerId": 3,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Harold",
                "lastName": "Davis",
                "address": "563 Friendly St.",
                "city": "Windsor",
                "telephone": "6085553198",
                "id": 4,
                "pets": [
                    {
                        "name": "Iggy",
                        "birthDate": "2010-11-30",
                        "type": {
                            "name": "lizard",
                            "id": 3
                        },
                        "id": 5,
                        "ownerId": 4,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Peter",
                "lastName": "McTavish",
                "address": "2387 S. Fair Way",
                "city": "Madison",
                "telephone": "6085552765",
                "id": 5,
                "pets": [
                    {
                        "name": "George",
                        "birthDate": "2010-01-20",
                        "type": {
                            "name": "snake",
                            "id": 4
                        },
                        "id": 6,
                        "ownerId": 5,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Jean",
                "lastName": "Coleman",
                "address": "105 N. Lake St.",
                "city": "Monona",
                "telephone": "6085552654",
                "id": 6,
                "pets": []
            },
            {
                "firstName": "Jeff",
                "lastName": "Black",
                "address": "1450 Oak Blvd.",
                "city": "Monona",
                "telephone": "6085555387",
                "id": 7,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2011-08-06",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 9,
                        "ownerId": 7,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Maria",
                "lastName": "Escobito",
                "address": "345 Maple St.",
                "city": "Madison",
                "telephone": "6085557683",
                "id": 8,
                "pets": [
                    {
                        "name": "Mulligan",
                        "birthDate": "2007-02-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 10,
                        "ownerId": 8,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "David",
                "lastName": "Schroeder",
                "address": "2749 Blackhawk Trail",
                "city": "Madison",
                "telephone": "6085559435",
                "id": 9,
                "pets": [
                    {
                        "name": "Freddy",
                        "birthDate": "2010-03-09",
                        "type": {
                            "name": "bird",
                            "id": 5
                        },
                        "id": 11,
                        "ownerId": 9,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "Carlos",
                "lastName": "Estaban",
                "address": "2335 Independence La.",
                "city": "Waunakee",
                "telephone": "6085555487",
                "id": 10,
                "pets": [
                    {
                        "name": "Lucky",
                        "birthDate": "2010-06-24",
                        "type": {
                            "name": "dog",
                            "id": 2
                        },
                        "id": 12,
                        "ownerId": 10,
                        "visits": []
                    }
                ]
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 11,
                "pets": []
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 12,
                "pets": []
            },
            {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 13,
                "pets": []
            }
        ],
        "timestamp": "2024-09-18T15:46:08.796663",
        "duration": 0.009191274642944336
    },
    {
        "test_name": "Successful owner addition",
        "passed": true,
        "expected_status": 201,
        "actual_status": 201,
        "expected_body": {
            "firstName": "George",
            "lastName": "Franklin",
            "address": "110 W. Liberty St.",
            "city": "Madison",
            "telephone": "6085551023",
            "id": 1,
            "pets": []
        },
        "actual_body": {
            "firstName": "George",
            "lastName": "Franklin",
            "address": "110 W. Liberty St.",
            "city": "Madison",
            "telephone": "6085551023",
            "id": 14,
            "pets": []
        },
        "timestamp": "2024-09-18T15:46:15.996028",
        "duration": 0.009969234466552734
    },
    {
        "test_name": "Missing lastName field",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "path": "/api/owners",
            "timestamp": "2023-10-01T12:00:00Z",
            "message": "Request failed schema validation",
            "schemaValidationErrors": [
                {
                    "message": "Missing required field 'lastName'"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:46:16.001030",
        "duration": 0.004000186920166016
    },
    {
        "test_name": "Invalid telephone format",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "path": "/api/owners",
            "timestamp": "2023-10-01T12:00:00Z",
            "message": "Request failed schema validation",
            "schemaValidationErrors": [
                {
                    "message": "[Path '/telephone'] Instance type (string) does not match the required pattern '^[0-9]*$'"
                }
            ]
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:46:16.007031",
        "duration": 0.0060007572174072266
    },
    {
        "test_name": "Add pet to owner successfully",
        "passed": false,
        "expected_status": 201,
        "actual_status": 404,
        "expected_body": {
            "name": "Leo",
            "birthDate": "2023-01-01",
            "type": {
                "id": 1,
                "name": "cat"
            },
            "id": 1,
            "ownerId": 1,
            "visits": []
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: foreign key no parent ; FK_PETS_OWNERS table: PETS value: 1] [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; SQL [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; constraint [FK_PETS_OWNERS]"
        },
        "timestamp": "2024-09-18T15:46:22.746754",
        "duration": 0.008966922760009766
    },
    {
        "test_name": "Add pet with missing required fields",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/1/pets",
            "schemaValidationErrors": [
                {
                    "message": "Missing required property: birthDate"
                },
                {
                    "message": "Missing required property: type"
                }
            ],
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:46:22.752788",
        "duration": 0.005014181137084961
    },
    {
        "test_name": "Add pet to non-existing owner",
        "passed": true,
        "expected_status": 404,
        "actual_status": 404,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Owner not found",
            "path": "/api/owners/999/pets",
            "timestamp": "2023-10-01T12:00:00Z"
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: foreign key no parent ; FK_PETS_OWNERS table: PETS value: 999] [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; SQL [insert into pets (birth_date,name,owner_id,type_id,id) values (?,?,?,?,default)]; constraint [FK_PETS_OWNERS]"
        },
        "timestamp": "2024-09-18T15:46:22.761788",
        "duration": 0.008036375045776367
    },
    {
        "test_name": "Add visit with valid data",
        "passed": false,
        "expected_status": 201,
        "actual_status": 404,
        "expected_body": {
            "id": 1,
            "date": "2023-10-15",
            "description": "rabies shot",
            "petId": 1
        },
        "actual_body": {
            "className": "org.springframework.dao.DataIntegrityViolationException",
            "exMessage": "could not execute statement [integrity constraint violation: foreign key no parent ; FK_VISITS_PETS table: VISITS value: 1] [insert into visits (visit_date,description,pet_id,id) values (?,?,?,default)]; SQL [insert into visits (visit_date,description,pet_id,id) values (?,?,?,default)]; constraint [FK_VISITS_PETS]"
        },
        "timestamp": "2024-09-18T15:46:29.835096",
        "duration": 0.010994672775268555
    },
    {
        "test_name": "Add visit with missing description",
        "passed": true,
        "expected_status": 400,
        "actual_status": 400,
        "expected_body": {
            "status": 400,
            "error": "Bad Request",
            "message": "Request failed schema validation",
            "path": "/api/owners/1/pets/1/visits",
            "timestamp": "2023-10-15T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "MethodArgumentNotValidException",
            "exMessage": "Validation failed"
        },
        "timestamp": "2024-09-18T15:46:29.841122",
        "duration": 0.005025386810302734
    },
    {
        "test_name": "Add visit with invalid ownerId",
        "passed": false,
        "expected_status": 404,
        "actual_status": 500,
        "expected_body": {
            "status": 404,
            "error": "Not Found",
            "message": "Owner not found",
            "path": "/api/owners/-1/pets/1/visits",
            "timestamp": "2023-10-15T12:00:00Z",
            "schemaValidationErrors": []
        },
        "actual_body": {
            "className": "jakarta.validation.ConstraintViolationException",
            "exMessage": "addVisitToOwner.arg0: must be greater than or equal to 0"
        },
        "timestamp": "2024-09-18T15:46:29.847110",
        "duration": 0.005988121032714844
    },
    {
        "test_name": "Successful request to root path",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Bad request without parameters",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Not found for invalid endpoint",
        "passed": false,
        "expected_status": 404,
        "actual_status": 500,
        "expected_body": {
            "className": "NotFound",
            "exMessage": "Resource not found"
        },
        "actual_body": {
            "className": "org.springframework.web.servlet.resource.NoResourceFoundException",
            "exMessage": "No static resource invalid."
        },
        "timestamp": "2024-09-18T15:46:32.293664",
        "duration": 0.007421970367431641
    },
    {
        "test_name": "Successful PUT request",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "PUT request with Bad Request",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "PUT request for Not Found",
        "passed": false,
        "expected_status": 404,
        "actual_status": 500,
        "expected_body": {
            "className": "NotFoundException",
            "exMessage": "Resource not found"
        },
        "actual_body": {
            "className": "org.springframework.web.servlet.resource.NoResourceFoundException",
            "exMessage": "No static resource nonexistent."
        },
        "timestamp": "2024-09-18T15:46:35.391116",
        "duration": 0.006768226623535156
    },
    {
        "test_name": "Successful redirect to Swagger",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Bad request with invalid payload",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Not found error on invalid endpoint",
        "passed": false,
        "expected_status": 404,
        "actual_status": 500,
        "expected_body": {
            "className": "NotFoundException",
            "exMessage": "Endpoint not found"
        },
        "actual_body": {
            "className": "org.springframework.web.servlet.resource.NoResourceFoundException",
            "exMessage": "No static resource invalid-endpoint."
        },
        "timestamp": "2024-09-18T15:46:37.700807",
        "duration": 0.005998849868774414
    },
    {
        "test_name": "Successful deletion of resource",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Bad request due to invalid parameters",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Resource not found",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "Successful PATCH request",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "PATCH request with bad request",
        "passed": false,
        "error": "Expecting value: line 1 column 1 (char 0)"
    },
    {
        "test_name": "PATCH request to non-existent endpoint",
        "passed": false,
        "expected_status": 404,
        "actual_status": 500,
        "expected_body": {
            "className": "NotFoundException",
            "exMessage": "Endpoint not found"
        },
        "actual_body": {
            "className": "org.springframework.web.servlet.resource.NoResourceFoundException",
            "exMessage": "No static resource non-existent."
        },
        "timestamp": "2024-09-18T15:46:43.536470",
        "duration": 0.007173299789428711
    }
]