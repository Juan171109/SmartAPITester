[
    {
        "test_name": "Get visit details with valid visitId",
        "request": {
            "method": "GET",
            "path": "/api/visits/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "description": "rabies shot",
                "date": "2023-10-01",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:37:06.557226"
    },
    {
        "test_name": "Get visit details with non-existing visitId",
        "request": {
            "method": "GET",
            "path": "/api/visits/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Visit not found.",
                "path": "/api/visits/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:06.557226"
    },
    {
        "test_name": "Get visit details with invalid visitId",
        "request": {
            "method": "GET",
            "path": "/api/visits/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/visits/-1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:06.557226"
    },
    {
        "test_name": "Update visit with valid data",
        "request": {
            "method": "PUT",
            "path": "/api/visits/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:37:10.990761"
    },
    {
        "test_name": "Update visit with missing required fields",
        "request": {
            "method": "PUT",
            "path": "/api/visits/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/visits/1",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:10.991762"
    },
    {
        "test_name": "Update visit with non-existent visitId",
        "request": {
            "method": "PUT",
            "path": "/api/visits/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "rabies shot",
                "id": 999,
                "date": "2023-10-01",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Visit not found.",
                "path": "/api/visits/999",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:10.991762"
    },
    {
        "test_name": "Delete existing visit",
        "request": {
            "method": "DELETE",
            "path": "/api/visits/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-09-01",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:37:15.076690"
    },
    {
        "test_name": "Delete visit with non-existing ID",
        "request": {
            "method": "DELETE",
            "path": "/api/visits/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Visit not found.",
                "path": "/api/visits/999",
                "timestamp": "2023-09-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:15.076690"
    },
    {
        "test_name": "Delete visit with invalid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/visits/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/visits/-1",
                "timestamp": "2023-09-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:15.076690"
    },
    {
        "test_name": "Get vet details with valid ID",
        "request": {
            "method": "GET",
            "path": "/api/vets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:37:18.895252"
    },
    {
        "test_name": "Get vet details with non-existent ID",
        "request": {
            "method": "GET",
            "path": "/api/vets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Vet not found.",
                "path": "/api/vets/999",
                "timestamp": "2023-10-01T10:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:18.895252"
    },
    {
        "test_name": "Get vet details with invalid ID format",
        "request": {
            "method": "GET",
            "path": "/api/vets/abc",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/vets/abc",
                "timestamp": "2023-10-01T10:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "Invalid type: string"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:37:18.895252"
    },
    {
        "test_name": "Update vet successfully with valid data",
        "request": {
            "method": "PUT",
            "path": "/api/vets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "John",
                "lastName": "Doe",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "surgery"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "John",
                "lastName": "Doe",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "surgery"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:37:24.014152"
    },
    {
        "test_name": "Fail to update vet with missing lastName",
        "request": {
            "method": "PUT",
            "path": "/api/vets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "John",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "surgery"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400,
                "path": "/api/vets/1",
                "timestamp": "2023-10-15T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "Missing required property 'lastName'"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:37:24.014152"
    },
    {
        "test_name": "Fail to update vet with invalid vetId",
        "request": {
            "method": "PUT",
            "path": "/api/vets/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "John",
                "lastName": "Doe",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "surgery"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "error": "Not Found",
                "message": "Vet not found.",
                "status": 404,
                "path": "/api/vets/-1",
                "timestamp": "2023-10-15T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:37:24.014152"
    },
    {
        "test_name": "Delete existing vet",
        "request": {
            "method": "DELETE",
            "path": "/api/vets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:37:27.584354"
    },
    {
        "test_name": "Delete non-existent vet",
        "request": {
            "method": "DELETE",
            "path": "/api/vets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Vet not found.",
                "path": "/api/vets/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:27.584354"
    },
    {
        "test_name": "Delete vet with invalid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/vets/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/vets/-1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:27.584354"
    },
    {
        "test_name": "Get specialty with valid ID",
        "request": {
            "method": "GET",
            "path": "/api/specialties/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "radiology"
            }
        },
        "timestamp": "2024-09-18T15:37:31.281167"
    },
    {
        "test_name": "Get specialty with non-existent ID",
        "request": {
            "method": "GET",
            "path": "/api/specialties/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "error": "Not Found",
                "message": "Specialty not found.",
                "path": "/api/specialties/999",
                "status": 404,
                "timestamp": "2023-10-01T00:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:31.281167"
    },
    {
        "test_name": "Get specialty with invalid ID",
        "request": {
            "method": "GET",
            "path": "/api/specialties/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/specialties/-1",
                "status": 400,
                "timestamp": "2023-10-01T00:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:31.281167"
    },
    {
        "test_name": "Update specialty with valid data",
        "request": {
            "method": "PUT",
            "path": "/api/specialties/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1,
                "name": "radiology"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "radiology"
            }
        },
        "timestamp": "2024-09-18T15:37:36.047768"
    },
    {
        "test_name": "Update specialty with missing name",
        "request": {
            "method": "PUT",
            "path": "/api/specialties/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/specialties/1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:36.047768"
    },
    {
        "test_name": "Update specialty with non-existent ID",
        "request": {
            "method": "PUT",
            "path": "/api/specialties/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 999,
                "name": "cardiology"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Specialty not found.",
                "path": "/api/specialties/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:36.047768"
    },
    {
        "test_name": "Delete specialty with valid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/specialties/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "radiology"
            }
        },
        "timestamp": "2024-09-18T15:37:40.580955"
    },
    {
        "test_name": "Delete specialty with non-existent ID",
        "request": {
            "method": "DELETE",
            "path": "/api/specialties/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "error": "Not Found",
                "message": "Specialty not found.",
                "path": "/api/specialties/999",
                "schemaValidationErrors": [],
                "status": 404,
                "timestamp": "2023-10-01T00:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:37:40.580955"
    },
    {
        "test_name": "Delete specialty with invalid ID (negative number)",
        "request": {
            "method": "DELETE",
            "path": "/api/specialties/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/specialties/-1",
                "schemaValidationErrors": [],
                "status": 400,
                "timestamp": "2023-10-01T00:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:37:40.580955"
    },
    {
        "test_name": "Get pet type with valid ID",
        "request": {
            "method": "GET",
            "path": "/api/pettypes/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "cat"
            }
        },
        "timestamp": "2024-09-18T15:37:44.857048"
    },
    {
        "test_name": "Get pet type with non-existent ID",
        "request": {
            "method": "GET",
            "path": "/api/pettypes/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet Type not found.",
                "path": "/api/pettypes/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:44.857048"
    },
    {
        "test_name": "Get pet type with negative ID",
        "request": {
            "method": "GET",
            "path": "/api/pettypes/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pettypes/-1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "Value must be greater than or equal to 0"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:37:44.857048"
    },
    {
        "test_name": "Update pet type with valid data",
        "request": {
            "method": "PUT",
            "path": "/api/pettypes/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1,
                "name": "dog"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "dog"
            }
        },
        "timestamp": "2024-09-18T15:37:49.467782"
    },
    {
        "test_name": "Update pet type with missing name",
        "request": {
            "method": "PUT",
            "path": "/api/pettypes/2",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 2
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pettypes/2",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:49.467782"
    },
    {
        "test_name": "Update pet type with non-existent ID",
        "request": {
            "method": "PUT",
            "path": "/api/pettypes/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 999,
                "name": "bird"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet Type not found.",
                "path": "/api/pettypes/999",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:49.467782"
    },
    {
        "test_name": "Delete existing pet type",
        "request": {
            "method": "DELETE",
            "path": "/api/pettypes/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "cat"
            }
        },
        "timestamp": "2024-09-18T15:37:54.108371"
    },
    {
        "test_name": "Delete pet type with non-existent ID",
        "request": {
            "method": "DELETE",
            "path": "/api/pettypes/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet type not found.",
                "path": "/api/pettypes/999",
                "timestamp": "2023-01-01T00:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:37:54.108371"
    },
    {
        "test_name": "Delete pet type with invalid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/pettypes/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pettypes/-1",
                "timestamp": "2023-01-01T00:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "The value must be greater than or equal to 0."
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:37:54.108371"
    },
    {
        "test_name": "Get existing pet by valid petId",
        "request": {
            "method": "GET",
            "path": "/api/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "ownerId": 1,
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:38:00.162506"
    },
    {
        "test_name": "Get pet with non-existing petId",
        "request": {
            "method": "GET",
            "path": "/api/pets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet not found",
                "path": "/api/pets/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:38:00.162506"
    },
    {
        "test_name": "Get pet with invalid petId (negative number)",
        "request": {
            "method": "GET",
            "path": "/api/pets/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pets/-1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "[Path '/petId'] Instance type (-1) does not match any allowed primitive type (allowed: [\"integer\"])"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:38:00.162506"
    },
    {
        "test_name": "Update pet successfully",
        "request": {
            "method": "PUT",
            "path": "/api/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:38:04.712193"
    },
    {
        "test_name": "Update pet with missing required fields",
        "request": {
            "method": "PUT",
            "path": "/api/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pets/1",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:38:04.712193"
    },
    {
        "test_name": "Update pet not found",
        "request": {
            "method": "PUT",
            "path": "/api/pets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 999,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet not found",
                "path": "/api/pets/999",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:38:04.712193"
    },
    {
        "test_name": "Delete pet with valid petId",
        "request": {
            "method": "DELETE",
            "path": "/api/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:38:08.249819"
    },
    {
        "test_name": "Delete pet with non-existent petId",
        "request": {
            "method": "DELETE",
            "path": "/api/pets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "error": "Not Found",
                "message": "Pet not found.",
                "status": 404,
                "path": "/api/pets/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:38:08.249819"
    },
    {
        "test_name": "Delete pet with invalid petId (negative number)",
        "request": {
            "method": "DELETE",
            "path": "/api/pets/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400,
                "path": "/api/pets/-1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:38:08.249819"
    },
    {
        "test_name": "Get owner details with valid ownerId",
        "request": {
            "method": "GET",
            "path": "/api/owners/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        },
        "timestamp": "2024-09-18T15:38:12.436395"
    },
    {
        "test_name": "Get owner details with non-existent ownerId",
        "request": {
            "method": "GET",
            "path": "/api/owners/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Owner not found.",
                "path": "/api/owners/999",
                "timestamp": "2023-10-01T10:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:38:12.436395"
    },
    {
        "test_name": "Get owner details with invalid ownerId",
        "request": {
            "method": "GET",
            "path": "/api/owners/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/-1",
                "timestamp": "2023-10-01T10:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "Owner ID must be a positive integer."
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:38:12.436395"
    },
    {
        "test_name": "Update owner with valid data",
        "request": {
            "method": "PUT",
            "path": "/api/owners/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        },
        "timestamp": "2024-09-18T15:38:24.049730"
    },
    {
        "test_name": "Update owner with missing firstName",
        "request": {
            "method": "PUT",
            "path": "/api/owners/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "Missing required property 'firstName'"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:38:24.049730"
    },
    {
        "test_name": "Update owner with invalid telephone format",
        "request": {
            "method": "PUT",
            "path": "/api/owners/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "invalidTelephone"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "Invalid format for property 'telephone'"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:38:24.049730"
    },
    {
        "test_name": "Delete owner with valid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/owners/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        },
        "timestamp": "2024-09-18T15:38:28.751661"
    },
    {
        "test_name": "Delete owner with non-existing ID",
        "request": {
            "method": "DELETE",
            "path": "/api/owners/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "path": "/api/owners/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "message": "Owner not found",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:38:28.751661"
    },
    {
        "test_name": "Delete owner with invalid ID format",
        "request": {
            "method": "DELETE",
            "path": "/api/owners/abc",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "path": "/api/owners/abc",
                "timestamp": "2023-10-01T12:00:00Z",
                "message": "Request failed schema validation",
                "schemaValidationErrors": [
                    {
                        "message": "The value 'abc' is not a valid integer."
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:38:28.751661"
    },
    {
        "test_name": "Retrieve existing pet details",
        "request": {
            "method": "GET",
            "path": "/api/owners/1/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "ownerId": 1,
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:38:32.756764"
    },
    {
        "test_name": "Pet not found",
        "request": {
            "method": "GET",
            "path": "/api/owners/1/pets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet not found.",
                "path": "/api/owners/1/pets/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:38:32.756764"
    },
    {
        "test_name": "Bad request due to invalid ownerId",
        "request": {
            "method": "GET",
            "path": "/api/owners/-1/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/-1/pets/1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:38:32.756764"
    },
    {
        "test_name": "Update pet successfully",
        "request": {
            "method": "PUT",
            "path": "/api/owners/1/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                }
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 204,
            "body": {}
        },
        "timestamp": "2024-09-18T15:38:39.198986"
    },
    {
        "test_name": "Bad request due to missing pet name",
        "request": {
            "method": "PUT",
            "path": "/api/owners/1/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                }
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "path": "/api/owners/1/pets/1",
                "timestamp": "2023-10-01T12:00:00Z",
                "message": "Request failed schema validation",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:38:39.198986"
    },
    {
        "test_name": "Pet not found for this owner",
        "request": {
            "method": "PUT",
            "path": "/api/owners/1/pets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                }
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "path": "/api/owners/1/pets/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "message": "Pet not found for this owner",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:38:39.198986"
    },
    {
        "test_name": "Fetch visits successfully",
        "request": {
            "method": "GET",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "id": 1,
                    "description": "rabies shot",
                    "date": "2023-10-01",
                    "petId": 1
                }
            ]
        },
        "timestamp": "2024-09-18T15:38:43.349922"
    },
    {
        "test_name": "No visits found",
        "request": {
            "method": "GET",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": []
        },
        "timestamp": "2024-09-18T15:38:43.349922"
    },
    {
        "test_name": "Bad request due to invalid parameters",
        "request": {
            "method": "GET",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequest",
                "exMessage": "Invalid request parameters"
            }
        },
        "timestamp": "2024-09-18T15:38:43.349922"
    },
    {
        "test_name": "Successful visit creation",
        "request": {
            "method": "POST",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:38:48.332505"
    },
    {
        "test_name": "Missing required fields",
        "request": {
            "method": "POST",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "schemaValidationErrors": [
                    {
                        "message": "description must be at least 1 characters long"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:38:48.332505"
    },
    {
        "test_name": "Invalid pet ID",
        "request": {
            "method": "POST",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "checkup",
                "id": 1,
                "date": "2023-10-01",
                "petId": -1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "schemaValidationErrors": [
                    {
                        "message": "petId must be a positive integer"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:38:48.332505"
    },
    {
        "test_name": "Successful retrieval of vets",
        "request": {
            "method": "GET",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "firstName": "James",
                    "lastName": "Carter",
                    "id": 1,
                    "specialties": [
                        {
                            "id": 1,
                            "name": "radiology"
                        }
                    ]
                }
            ]
        },
        "timestamp": "2024-09-18T15:38:52.032331"
    },
    {
        "test_name": "Not modified response",
        "request": {
            "method": "GET",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": []
        },
        "timestamp": "2024-09-18T15:38:52.032331"
    },
    {
        "test_name": "Request with invalid parameters",
        "request": {
            "method": "GET",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequest",
                "exMessage": "Invalid request format"
            }
        },
        "timestamp": "2024-09-18T15:38:52.032331"
    },
    {
        "test_name": "Add vet with valid data",
        "request": {
            "method": "POST",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:38:57.113977"
    },
    {
        "test_name": "Add vet with missing lastName",
        "request": {
            "method": "POST",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "James",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/vets",
                "schemaValidationErrors": [
                    {
                        "message": "[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: [\"string\"])"
                    }
                ],
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:38:57.113977"
    },
    {
        "test_name": "Add vet with invalid firstName",
        "request": {
            "method": "POST",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "J@mes",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/vets",
                "schemaValidationErrors": [
                    {
                        "message": "[Path '/firstName'] Instance type (string) does not match pattern '[a-zA-Z]*'"
                    }
                ],
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:38:57.113977"
    },
    {
        "test_name": "Successfully add a user with all required fields",
        "request": {
            "method": "POST",
            "path": "/api/users",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "username": "john.doe",
                "password": "1234abc",
                "enabled": true,
                "roles": [
                    {
                        "name": "admin"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "username": "john.doe",
                "password": "1234abc",
                "enabled": true,
                "roles": [
                    {
                        "name": "admin"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:39:05.374459"
    },
    {
        "test_name": "Fail to add a user with missing username",
        "request": {
            "method": "POST",
            "path": "/api/users",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "password": "1234abc",
                "enabled": true,
                "roles": [
                    {
                        "name": "user"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/users",
                "schemaValidationErrors": [
                    {
                        "message": "Missing required property 'username'"
                    }
                ],
                "status": 400,
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:39:05.374459"
    },
    {
        "test_name": "Fail to add a user with invalid role name",
        "request": {
            "method": "POST",
            "path": "/api/users",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "username": "john.doe",
                "password": "1234abc",
                "enabled": true,
                "roles": [
                    {
                        "name": ""
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/users",
                "schemaValidationErrors": [
                    {
                        "message": "Role name must not be empty"
                    }
                ],
                "status": 400,
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:39:05.374459"
    },
    {
        "test_name": "Get specialties successfully",
        "request": {
            "method": "GET",
            "path": "/api/specialties",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "id": 1,
                    "name": "radiology"
                },
                {
                    "id": 2,
                    "name": "surgery"
                }
            ]
        },
        "timestamp": "2024-09-18T15:39:08.394979"
    },
    {
        "test_name": "Not modified response",
        "request": {
            "method": "GET",
            "path": "/api/specialties",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": {}
        },
        "timestamp": "2024-09-18T15:39:08.394979"
    },
    {
        "test_name": "Bad request error response",
        "request": {
            "method": "GET",
            "path": "/api/specialties",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequest",
                "exMessage": "Invalid request parameters"
            }
        },
        "timestamp": "2024-09-18T15:39:08.394979"
    },
    {
        "test_name": "Get pet types successfully",
        "request": {
            "method": "GET",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "id": 1,
                    "name": "cat"
                },
                {
                    "id": 2,
                    "name": "dog"
                }
            ]
        },
        "timestamp": "2024-09-18T15:39:17.976672"
    },
    {
        "test_name": "No modifications found",
        "request": {
            "method": "GET",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": []
        },
        "timestamp": "2024-09-18T15:39:17.976672"
    },
    {
        "test_name": "Bad Request error",
        "request": {
            "method": "GET",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequest",
                "exMessage": "Invalid request parameters"
            }
        },
        "timestamp": "2024-09-18T15:39:17.976672"
    },
    {
        "test_name": "Not Found error",
        "request": {
            "method": "GET",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFound",
                "exMessage": "Pet types not found"
            }
        },
        "timestamp": "2024-09-18T15:39:17.976672"
    },
    {
        "test_name": "Server error response",
        "request": {
            "method": "GET",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 500,
            "body": {
                "status": 500,
                "error": "Internal Server Error",
                "path": "/api/pettypes",
                "timestamp": "2023-10-01T00:00:00Z",
                "message": "An unexpected error occurred",
                "schemaValidationErrors": [],
                "trace": "com.example.exception.ServerErrorException: ..."
            }
        },
        "timestamp": "2024-09-18T15:39:17.976672"
    },
    {
        "test_name": "Retrieve all pets successfully",
        "request": {
            "method": "GET",
            "path": "/api/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "id": 1,
                    "name": "Leo",
                    "birthDate": "2015-06-01",
                    "type": {
                        "id": 1,
                        "name": "cat"
                    },
                    "ownerId": 1,
                    "visits": []
                }
            ]
        },
        "timestamp": "2024-09-18T15:39:26.703342"
    },
    {
        "test_name": "Handle not modified response",
        "request": {
            "method": "GET",
            "path": "/api/pets",
            "headers": {
                "If-None-Match": "etag_value",
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": {}
        },
        "timestamp": "2024-09-18T15:39:26.703342"
    },
    {
        "test_name": "Handle not found response",
        "request": {
            "method": "GET",
            "path": "/api/pets/9999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFoundException",
                "exMessage": "Pet not found"
            }
        },
        "timestamp": "2024-09-18T15:39:26.703342"
    },
    {
        "test_name": "Add a valid pet",
        "request": {
            "method": "POST",
            "path": "/api/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "2023-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "name": "Leo",
                "birthDate": "2023-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:39:31.919624"
    },
    {
        "test_name": "Add a pet without a name",
        "request": {
            "method": "POST",
            "path": "/api/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "birthDate": "2023-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "schemaValidationErrors": [
                    {
                        "message": "Missing required property: name"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:39:31.919624"
    },
    {
        "test_name": "Add a pet with an invalid birth date format",
        "request": {
            "method": "POST",
            "path": "/api/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "01-01-2023",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "schemaValidationErrors": [
                    {
                        "message": "Invalid format for property: birthDate"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:39:31.919624"
    },
    {
        "test_name": "Retrieve all owners without last name filter",
        "request": {
            "method": "GET",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "firstName": "George",
                    "lastName": "Franklin",
                    "address": "110 W. Liberty St.",
                    "city": "Madison",
                    "telephone": "6085551023",
                    "id": 1,
                    "pets": []
                }
            ]
        },
        "timestamp": "2024-09-18T15:39:47.335319"
    },
    {
        "test_name": "Retrieve owners with valid last name filter",
        "request": {
            "method": "GET",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "lastName": "Franklin"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "firstName": "George",
                    "lastName": "Franklin",
                    "address": "110 W. Liberty St.",
                    "city": "Madison",
                    "telephone": "6085551023",
                    "id": 1,
                    "pets": []
                }
            ]
        },
        "timestamp": "2024-09-18T15:39:47.335319"
    },
    {
        "test_name": "Retrieve owners with last name that does not exist",
        "request": {
            "method": "GET",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "lastName": "Nonexistent"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFoundException",
                "exMessage": "No owners found with the last name Nonexistent"
            }
        },
        "timestamp": "2024-09-18T15:39:47.335319"
    },
    {
        "test_name": "Add owner with valid data",
        "request": {
            "method": "POST",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 201,
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "pets": []
            }
        },
        "timestamp": "2024-09-18T15:39:54.127687"
    },
    {
        "test_name": "Add owner with missing required fields",
        "request": {
            "method": "POST",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "schemaValidationErrors": [
                    {
                        "message": "[Path '/firstName'] Instance type (string) does not match any allowed primitive type (allowed: [\"string\"])"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:39:54.127687"
    },
    {
        "test_name": "Add owner with invalid telephone format",
        "request": {
            "method": "POST",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "invalid_number"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "schemaValidationErrors": [
                    {
                        "message": "[Path '/telephone'] Instance type (string) does not match any allowed primitive type (allowed: [\"string\"])"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:39:54.127687"
    },
    {
        "test_name": "Add pet to owner successfully",
        "request": {
            "method": "POST",
            "path": "/api/owners/1/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "2023-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                }
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 201,
            "body": {
                "id": 1,
                "name": "Leo",
                "birthDate": "2023-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "ownerId": 1,
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:39:59.982833"
    },
    {
        "test_name": "Add pet with missing required fields",
        "request": {
            "method": "POST",
            "path": "/api/owners/1/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/1/pets",
                "schemaValidationErrors": [
                    {
                        "message": "Missing required field 'birthDate'"
                    },
                    {
                        "message": "Missing required field 'type'"
                    }
                ],
                "timestamp": "2023-10-01T00:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:39:59.982833"
    },
    {
        "test_name": "Add pet to non-existent owner",
        "request": {
            "method": "POST",
            "path": "/api/owners/999/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "2023-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                }
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Owner not found",
                "path": "/api/owners/999/pets",
                "schemaValidationErrors": [],
                "timestamp": "2023-10-01T00:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:39:59.982833"
    },
    {
        "test_name": "Successfully add a visit to a pet owner",
        "request": {
            "method": "POST",
            "path": "/api/owners/1/pets/1/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "rabies shot",
                "date": "2023-10-01"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 201,
            "body": {
                "id": 1,
                "description": "rabies shot",
                "date": "2023-10-01",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:40:05.427616"
    },
    {
        "test_name": "Missing description in request body",
        "request": {
            "method": "POST",
            "path": "/api/owners/1/pets/1/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "date": "2023-10-01"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/1/pets/1/visits",
                "timestamp": "2023-10-01T00:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:40:05.427616"
    },
    {
        "test_name": "Invalid ownerId and petId",
        "request": {
            "method": "POST",
            "path": "/api/owners/-1/pets/-1/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "vaccination",
                "date": "2023-10-01"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet not found for this owner.",
                "path": "/api/owners/-1/pets/-1/visits",
                "timestamp": "2023-10-01T00:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:40:05.427616"
    },
    {
        "test_name": "Successful GET request",
        "request": {
            "method": "GET",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:40:07.805329"
    },
    {
        "test_name": "Bad Request response",
        "request": {
            "method": "GET",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "string",
                "exMessage": "string"
            }
        },
        "timestamp": "2024-09-18T15:40:07.805329"
    },
    {
        "test_name": "Not Found response",
        "request": {
            "method": "GET",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "string",
                "exMessage": "string"
            }
        },
        "timestamp": "2024-09-18T15:40:07.805329"
    },
    {
        "test_name": "Successful PUT request",
        "request": {
            "method": "PUT",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:40:10.761408"
    },
    {
        "test_name": "PUT request with invalid data",
        "request": {
            "method": "PUT",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "invalidKey": "invalidValue"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequestException",
                "exMessage": "Invalid request data"
            }
        },
        "timestamp": "2024-09-18T15:40:10.761408"
    },
    {
        "test_name": "PUT request to non-existing endpoint",
        "request": {
            "method": "PUT",
            "path": "/non-existing",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFoundException",
                "exMessage": "Resource not found"
            }
        },
        "timestamp": "2024-09-18T15:40:10.761408"
    },
    {
        "test_name": "Successful POST request",
        "request": {
            "method": "POST",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:40:12.954942"
    },
    {
        "test_name": "Bad Request with invalid data",
        "request": {
            "method": "POST",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "invalidKey": "invalidValue"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "java.lang.Exception",
                "exMessage": "Bad Request"
            }
        },
        "timestamp": "2024-09-18T15:40:12.954942"
    },
    {
        "test_name": "Not Found case",
        "request": {
            "method": "POST",
            "path": "/nonexistent",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "java.lang.Exception",
                "exMessage": "Not Found"
            }
        },
        "timestamp": "2024-09-18T15:40:12.954942"
    },
    {
        "test_name": "Delete operation returns 200 OK",
        "request": {
            "method": "DELETE",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:40:15.418117"
    },
    {
        "test_name": "Delete operation returns 400 Bad Request",
        "request": {
            "method": "DELETE",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequestException",
                "exMessage": "Invalid request"
            }
        },
        "timestamp": "2024-09-18T15:40:15.418117"
    },
    {
        "test_name": "Delete operation returns 404 Not Found",
        "request": {
            "method": "DELETE",
            "path": "/nonexistent",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFoundException",
                "exMessage": "Resource not found"
            }
        },
        "timestamp": "2024-09-18T15:40:15.418117"
    },
    {
        "test_name": "Successful PATCH request",
        "request": {
            "method": "PATCH",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:40:18.188352"
    },
    {
        "test_name": "Bad Request with invalid body",
        "request": {
            "method": "PATCH",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "invalid_key": "invalid_value"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequest",
                "exMessage": "Invalid request body"
            }
        },
        "timestamp": "2024-09-18T15:40:18.188352"
    },
    {
        "test_name": "Not Found for non-existent resource",
        "request": {
            "method": "PATCH",
            "path": "/non-existent",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFound",
                "exMessage": "Resource not found"
            }
        },
        "timestamp": "2024-09-18T15:40:18.188352"
    },
    {
        "test_name": "Get visit details with valid visitId",
        "request": {
            "method": "GET",
            "path": "/api/visits/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "description": "rabies shot",
                "date": "2023-10-01",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:40:21.894623"
    },
    {
        "test_name": "Get visit details with non-existent visitId",
        "request": {
            "method": "GET",
            "path": "/api/visits/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Visit not found",
                "path": "/api/visits/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:40:21.894623"
    },
    {
        "test_name": "Get visit details with invalid visitId format",
        "request": {
            "method": "GET",
            "path": "/api/visits/invalid",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/visits/invalid",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "visitId must be an integer"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:40:21.894623"
    },
    {
        "test_name": "Update visit successfully",
        "request": {
            "method": "PUT",
            "path": "/api/visits/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:40:26.258586"
    },
    {
        "test_name": "Update visit with missing description",
        "request": {
            "method": "PUT",
            "path": "/api/visits/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/visits/1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:40:26.258586"
    },
    {
        "test_name": "Update visit with invalid visitId",
        "request": {
            "method": "PUT",
            "path": "/api/visits/9999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Visit not found",
                "path": "/api/visits/9999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:40:26.258586"
    },
    {
        "test_name": "Delete visit with valid visitId",
        "request": {
            "method": "DELETE",
            "path": "/api/visits/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "description": "rabies shot",
                "date": "2023-10-01",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:40:31.641973"
    },
    {
        "test_name": "Delete visit with non-existent visitId",
        "request": {
            "method": "DELETE",
            "path": "/api/visits/9999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Visit not found.",
                "path": "/api/visits/9999",
                "timestamp": "2023-10-01T10:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:40:31.641973"
    },
    {
        "test_name": "Delete visit with invalid visitId (negative value)",
        "request": {
            "method": "DELETE",
            "path": "/api/visits/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/visits/-1",
                "timestamp": "2023-10-01T10:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:40:31.641973"
    },
    {
        "test_name": "Get vet details successfully",
        "request": {
            "method": "GET",
            "path": "/api/vets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 1
            }
        },
        "timestamp": "2024-09-18T15:40:35.788400"
    },
    {
        "test_name": "Get vet with non-existent ID",
        "request": {
            "method": "GET",
            "path": "/api/vets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Vet not found.",
                "path": "/api/vets/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:40:35.788400"
    },
    {
        "test_name": "Get vet with invalid ID format",
        "request": {
            "method": "GET",
            "path": "/api/vets/abc",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/vets/abc",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "Invalid type. Expected integer."
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:40:35.788400"
    },
    {
        "test_name": "Update vet with valid data",
        "request": {
            "method": "PUT",
            "path": "/api/vets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 1
            }
        },
        "timestamp": "2024-09-18T15:40:41.590067"
    },
    {
        "test_name": "Update vet with missing last name",
        "request": {
            "method": "PUT",
            "path": "/api/vets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "James",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "path": "/api/vets/1",
                "timestamp": "2023-10-01T00:00:00Z",
                "message": "Request failed schema validation",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:40:41.590067"
    },
    {
        "test_name": "Update vet with non-existent ID",
        "request": {
            "method": "PUT",
            "path": "/api/vets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ],
                "id": 999
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "path": "/api/vets/999",
                "timestamp": "2023-10-01T00:00:00Z",
                "message": "Vet not found",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:40:41.590067"
    },
    {
        "test_name": "Delete vet successfully",
        "request": {
            "method": "DELETE",
            "path": "/api/vets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:40:45.721708"
    },
    {
        "test_name": "Delete vet not found",
        "request": {
            "method": "DELETE",
            "path": "/api/vets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Vet not found.",
                "path": "/api/vets/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:40:45.721708"
    },
    {
        "test_name": "Delete vet with invalid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/vets/abc",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Invalid ID format.",
                "path": "/api/vets/abc",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:40:45.721708"
    },
    {
        "test_name": "Get specialty with valid ID",
        "request": {
            "method": "GET",
            "path": "/api/specialties/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "radiology"
            }
        },
        "timestamp": "2024-09-18T15:40:49.360468"
    },
    {
        "test_name": "Get specialty with non-existent ID",
        "request": {
            "method": "GET",
            "path": "/api/specialties/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "error": "Not Found",
                "message": "Specialty not found.",
                "path": "/api/specialties/999",
                "schemaValidationErrors": [],
                "status": 404,
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:40:49.360468"
    },
    {
        "test_name": "Get specialty with invalid ID (negative number)",
        "request": {
            "method": "GET",
            "path": "/api/specialties/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/specialties/-1",
                "schemaValidationErrors": [
                    {
                        "message": "The value must be greater than or equal to 0."
                    }
                ],
                "status": 400,
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:40:49.360468"
    },
    {
        "test_name": "Update specialty with valid data",
        "request": {
            "method": "PUT",
            "path": "/api/specialties/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1,
                "name": "radiology"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "radiology"
            }
        },
        "timestamp": "2024-09-18T15:40:54.053566"
    },
    {
        "test_name": "Update specialty with missing name",
        "request": {
            "method": "PUT",
            "path": "/api/specialties/2",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 2
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/specialties/2",
                "schemaValidationErrors": [],
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:40:54.053566"
    },
    {
        "test_name": "Update specialty with non-existing ID",
        "request": {
            "method": "PUT",
            "path": "/api/specialties/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 999,
                "name": "cardiology"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Specialty not found.",
                "path": "/api/specialties/999",
                "schemaValidationErrors": [],
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:40:54.053566"
    },
    {
        "test_name": "Delete specialty with valid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/specialties/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "radiology"
            }
        },
        "timestamp": "2024-09-18T15:40:59.155829"
    },
    {
        "test_name": "Delete specialty with non-existent ID",
        "request": {
            "method": "DELETE",
            "path": "/api/specialties/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "error": "Not Found",
                "message": "Specialty not found.",
                "path": "/api/specialties/999",
                "status": 404,
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:40:59.155829"
    },
    {
        "test_name": "Delete specialty with invalid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/specialties/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/specialties/-1",
                "status": 400,
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:40:59.155829"
    },
    {
        "test_name": "Get pet type with valid ID",
        "request": {
            "method": "GET",
            "path": "/api/pettypes/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "cat"
            }
        },
        "timestamp": "2024-09-18T15:41:02.818416"
    },
    {
        "test_name": "Get pet type with ID not found",
        "request": {
            "method": "GET",
            "path": "/api/pettypes/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet Type not found.",
                "path": "/api/pettypes/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:41:02.818416"
    },
    {
        "test_name": "Get pet type with invalid ID",
        "request": {
            "method": "GET",
            "path": "/api/pettypes/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pettypes/-1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "The value must be greater than or equal to 0."
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:41:02.818416"
    },
    {
        "test_name": "Delete pet type with valid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/pettypes/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "cat"
            }
        },
        "timestamp": "2024-09-18T15:41:10.880308"
    },
    {
        "test_name": "Delete pet type with non-existent ID",
        "request": {
            "method": "DELETE",
            "path": "/api/pettypes/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet type not found.",
                "path": "/api/pettypes/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:41:10.880308"
    },
    {
        "test_name": "Delete pet type with invalid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/pettypes/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pettypes/-1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "ID must be greater than or equal to 0"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:41:10.880308"
    },
    {
        "test_name": "Get existing pet by valid ID",
        "request": {
            "method": "GET",
            "path": "/api/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "ownerId": 1,
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:41:15.084387"
    },
    {
        "test_name": "Get pet with non-existent ID",
        "request": {
            "method": "GET",
            "path": "/api/pets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet not found.",
                "path": "/api/pets/999",
                "timestamp": "2023-10-03T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:41:15.084387"
    },
    {
        "test_name": "Get pet with invalid ID format",
        "request": {
            "method": "GET",
            "path": "/api/pets/abc",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pets/abc",
                "timestamp": "2023-10-03T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:41:15.084387"
    },
    {
        "test_name": "Update pet successfully",
        "request": {
            "method": "PUT",
            "path": "/api/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:41:19.387993"
    },
    {
        "test_name": "Update pet with missing required fields",
        "request": {
            "method": "PUT",
            "path": "/api/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pets/1",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:41:19.387993"
    },
    {
        "test_name": "Update pet with non-existent pet ID",
        "request": {
            "method": "PUT",
            "path": "/api/pets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 999,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet not found",
                "path": "/api/pets/999",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:41:19.387993"
    },
    {
        "test_name": "Delete pet with valid petId",
        "request": {
            "method": "DELETE",
            "path": "/api/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:41:22.548564"
    },
    {
        "test_name": "Delete pet with non-existing petId",
        "request": {
            "method": "DELETE",
            "path": "/api/pets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet not found.",
                "path": "/api/pets/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:41:22.548564"
    },
    {
        "test_name": "Delete pet with invalid petId",
        "request": {
            "method": "DELETE",
            "path": "/api/pets/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pets/-1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:41:22.548564"
    },
    {
        "test_name": "Get owner details with valid ownerId",
        "request": {
            "method": "GET",
            "path": "/api/owners/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        },
        "timestamp": "2024-09-18T15:41:26.447983"
    },
    {
        "test_name": "Get owner details with non-existent ownerId",
        "request": {
            "method": "GET",
            "path": "/api/owners/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Owner not found.",
                "path": "/api/owners/999",
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:41:26.447983"
    },
    {
        "test_name": "Get owner details with invalid ownerId",
        "request": {
            "method": "GET",
            "path": "/api/owners/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/-1",
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:41:26.447983"
    },
    {
        "test_name": "Update owner with valid data",
        "request": {
            "method": "put",
            "path": "/api/owners/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "pets": []
            }
        },
        "timestamp": "2024-09-18T15:41:33.757023"
    },
    {
        "test_name": "Update owner with missing required fields",
        "request": {
            "method": "put",
            "path": "/api/owners/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400,
                "schemaValidationErrors": [
                    {
                        "message": "Field 'lastName' is required."
                    },
                    {
                        "message": "Field 'address' is required."
                    },
                    {
                        "message": "Field 'city' is required."
                    },
                    {
                        "message": "Field 'telephone' is required."
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:41:33.757023"
    },
    {
        "test_name": "Update owner with invalid telephone format",
        "request": {
            "method": "put",
            "path": "/api/owners/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "invalid_telephone"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400,
                "schemaValidationErrors": [
                    {
                        "message": "Field 'telephone' must match pattern '^[0-9]*$'."
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:41:33.757023"
    },
    {
        "test_name": "Delete Owner Successfully",
        "request": {
            "method": "DELETE",
            "path": "/api/owners/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:41:37.547514"
    },
    {
        "test_name": "Delete Non-Existent Owner",
        "request": {
            "method": "DELETE",
            "path": "/api/owners/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "error": "Not Found",
                "message": "Owner not found.",
                "path": "/api/owners/999",
                "status": 404,
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:41:37.547514"
    },
    {
        "test_name": "Delete Owner with Invalid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/owners/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/-1",
                "status": 400,
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:41:37.547514"
    },
    {
        "test_name": "Get pet details for valid owner and pet IDs",
        "request": {
            "method": "GET",
            "path": "/api/owners/1/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "ownerId": 1,
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:41:41.157149"
    },
    {
        "test_name": "Get pet details for non-existent pet",
        "request": {
            "method": "GET",
            "path": "/api/owners/1/pets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet not found.",
                "path": "/api/owners/1/pets/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:41:41.157149"
    },
    {
        "test_name": "Get pet details with invalid owner ID",
        "request": {
            "method": "GET",
            "path": "/api/owners/-1/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/-1/pets/1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:41:41.157149"
    },
    {
        "test_name": "Update pet successfully",
        "request": {
            "method": "PUT",
            "path": "/api/owners/1/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                }
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 204,
            "body": {}
        },
        "timestamp": "2024-09-18T15:41:47.977876"
    },
    {
        "test_name": "Update pet with missing name",
        "request": {
            "method": "PUT",
            "path": "/api/owners/1/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                }
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/1/pets/1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "Missing required property: name"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:41:47.977876"
    },
    {
        "test_name": "Update pet not found",
        "request": {
            "method": "PUT",
            "path": "/api/owners/1/pets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                }
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet not found for this owner.",
                "path": "/api/owners/1/pets/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:41:47.977876"
    },
    {
        "test_name": "Successful retrieval of visits",
        "request": {
            "method": "GET",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "id": 1,
                    "description": "rabies shot",
                    "date": "2023-10-01",
                    "petId": 1
                },
                {
                    "id": 2,
                    "description": "check-up",
                    "date": "2023-10-02",
                    "petId": 2
                }
            ]
        },
        "timestamp": "2024-09-18T15:41:55.440253"
    },
    {
        "test_name": "Not Modified Response",
        "request": {
            "method": "GET",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": []
        },
        "timestamp": "2024-09-18T15:41:55.440253"
    },
    {
        "test_name": "Bad Request with invalid parameters",
        "request": {
            "method": "GET",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequest",
                "exMessage": "Invalid request parameters"
            }
        },
        "timestamp": "2024-09-18T15:41:55.440253"
    },
    {
        "test_name": "Not Found Response",
        "request": {
            "method": "GET",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFound",
                "exMessage": "Visits not found"
            }
        },
        "timestamp": "2024-09-18T15:41:55.440253"
    },
    {
        "test_name": "Server error response",
        "request": {
            "method": "GET",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 500,
            "body": {
                "status": 500,
                "error": "Internal Server Error",
                "message": "Unexpected error occurred",
                "path": "/api/visits",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [],
                "trace": "com.example.exception.InternalServerError: ..."
            }
        },
        "timestamp": "2024-09-18T15:41:55.440253"
    },
    {
        "test_name": "Successful visit creation with valid data",
        "request": {
            "method": "POST",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:42:00.365726"
    },
    {
        "test_name": "Visit creation fails with missing description",
        "request": {
            "method": "POST",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400,
                "path": "/api/visits"
            }
        },
        "timestamp": "2024-09-18T15:42:00.365726"
    },
    {
        "test_name": "Visit creation fails with invalid date format",
        "request": {
            "method": "POST",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "invalid-date",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400,
                "path": "/api/visits"
            }
        },
        "timestamp": "2024-09-18T15:42:00.365726"
    },
    {
        "test_name": "Get list of vets successfully",
        "request": {
            "method": "GET",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "firstName": "James",
                    "lastName": "Carter",
                    "id": 1,
                    "specialties": [
                        {
                            "id": 1,
                            "name": "radiology"
                        }
                    ]
                }
            ]
        },
        "timestamp": "2024-09-18T15:42:07.661131"
    },
    {
        "test_name": "Not modified response",
        "request": {
            "method": "GET",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": []
        },
        "timestamp": "2024-09-18T15:42:07.661131"
    },
    {
        "test_name": "Bad Request error response",
        "request": {
            "method": "GET",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequestException",
                "exMessage": "Invalid request parameters"
            }
        },
        "timestamp": "2024-09-18T15:42:07.661131"
    },
    {
        "test_name": "Not Found error response",
        "request": {
            "method": "GET",
            "path": "/api/vets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFoundException",
                "exMessage": "Vet not found"
            }
        },
        "timestamp": "2024-09-18T15:42:07.661131"
    },
    {
        "test_name": "Server error response",
        "request": {
            "method": "GET",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 500,
            "body": {
                "status": 500,
                "error": "Internal Server Error",
                "path": "/api/vets",
                "timestamp": "2023-10-01T12:00:00Z",
                "message": "Unexpected error occurred",
                "schemaValidationErrors": [],
                "trace": "com.example.exception.InternalServerException: ..."
            }
        },
        "timestamp": "2024-09-18T15:42:07.661131"
    },
    {
        "test_name": "Add Vet with valid data",
        "request": {
            "method": "POST",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:42:13.523961"
    },
    {
        "test_name": "Add Vet with missing firstName",
        "request": {
            "method": "POST",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/vets",
                "timestamp": "2023-10-03T10:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "Missing required property: firstName"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:42:13.523961"
    },
    {
        "test_name": "Add Vet with invalid lastName format",
        "request": {
            "method": "POST",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "James",
                "lastName": "C@rter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/vets",
                "timestamp": "2023-10-03T10:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "[Path '/lastName'] Instance type (string) does not match pattern (allowed: /^[a-zA-Z]*$/)"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:42:13.523961"
    },
    {
        "test_name": "Add user with minimum required fields",
        "request": {
            "method": "POST",
            "path": "/api/users",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "username": "john.doe"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "username": "john.doe",
                "enabled": true,
                "roles": []
            }
        },
        "timestamp": "2024-09-18T15:42:18.479108"
    },
    {
        "test_name": "Add user with all fields populated",
        "request": {
            "method": "POST",
            "path": "/api/users",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "username": "jane.doe",
                "password": "1234abc",
                "enabled": true,
                "roles": [
                    {
                        "name": "admin"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "username": "jane.doe",
                "enabled": true,
                "roles": [
                    {
                        "name": "admin"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:42:18.479108"
    },
    {
        "test_name": "Add user with missing required field",
        "request": {
            "method": "POST",
            "path": "/api/users",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "password": "1234abc"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "schemaValidationErrors": [
                    {
                        "message": "Field 'username' is required."
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:42:18.479108"
    },
    {
        "test_name": "Get specialties successfully",
        "request": {
            "method": "GET",
            "path": "/api/specialties",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "id": 1,
                    "name": "radiology"
                },
                {
                    "id": 2,
                    "name": "surgery"
                }
            ]
        },
        "timestamp": "2024-09-18T15:42:25.808265"
    },
    {
        "test_name": "Check for not modified response",
        "request": {
            "method": "GET",
            "path": "/api/specialties",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": []
        },
        "timestamp": "2024-09-18T15:42:25.808265"
    },
    {
        "test_name": "Handle bad request error",
        "request": {
            "method": "GET",
            "path": "/api/specialties",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequest",
                "exMessage": "Invalid request parameters"
            }
        },
        "timestamp": "2024-09-18T15:42:25.808265"
    },
    {
        "test_name": "Handle not found error",
        "request": {
            "method": "GET",
            "path": "/api/specialties",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFound",
                "exMessage": "Specialties not found"
            }
        },
        "timestamp": "2024-09-18T15:42:25.808265"
    },
    {
        "test_name": "Handle server error",
        "request": {
            "method": "GET",
            "path": "/api/specialties",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 500,
            "body": {
                "status": 500,
                "error": "Internal Server Error",
                "path": "/api/specialties",
                "timestamp": "2023-10-01T12:00:00Z",
                "message": "Unexpected server error occurred",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:42:25.808265"
    },
    {
        "test_name": "Retrieve pet types successfully",
        "request": {
            "method": "GET",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "id": 1,
                    "name": "cat"
                },
                {
                    "id": 2,
                    "name": "dog"
                }
            ]
        },
        "timestamp": "2024-09-18T15:42:37.891752"
    },
    {
        "test_name": "Check for not modified response",
        "request": {
            "method": "GET",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": []
        },
        "timestamp": "2024-09-18T15:42:37.891752"
    },
    {
        "test_name": "Handle bad request error",
        "request": {
            "method": "GET",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequest",
                "exMessage": "Invalid request parameters"
            }
        },
        "timestamp": "2024-09-18T15:42:37.891752"
    },
    {
        "test_name": "Handle not found error",
        "request": {
            "method": "GET",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFound",
                "exMessage": "Resource not found"
            }
        },
        "timestamp": "2024-09-18T15:42:37.891752"
    },
    {
        "test_name": "Handle server error",
        "request": {
            "method": "GET",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 500,
            "body": {
                "status": 500,
                "error": "Internal Server Error",
                "path": "/api/pettypes",
                "timestamp": "2023-10-01T00:00:00Z",
                "message": "Unexpected server error",
                "schemaValidationErrors": [],
                "trace": "com.example.Exception: ..."
            }
        },
        "timestamp": "2024-09-18T15:42:37.891752"
    },
    {
        "test_name": "Retrieve all pets successfully",
        "request": {
            "method": "GET",
            "path": "/api/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "id": 1,
                    "name": "Leo",
                    "birthDate": "2020-01-01",
                    "type": {
                        "id": 1,
                        "name": "cat"
                    },
                    "ownerId": 1,
                    "visits": []
                }
            ]
        },
        "timestamp": "2024-09-18T15:42:45.979790"
    },
    {
        "test_name": "Handle no pets found",
        "request": {
            "method": "GET",
            "path": "/api/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": []
        },
        "timestamp": "2024-09-18T15:42:45.979790"
    },
    {
        "test_name": "Check for not modified response",
        "request": {
            "method": "GET",
            "path": "/api/pets",
            "headers": {
                "If-None-Match": "some-etag-value",
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": {}
        },
        "timestamp": "2024-09-18T15:42:45.979790"
    },
    {
        "test_name": "Add pet with valid data",
        "request": {
            "method": "POST",
            "path": "/api/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "birthDate": "2023-01-01",
                "id": 1,
                "name": "Leo",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "birthDate": "2023-01-01",
                "id": 1,
                "name": "Leo",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:42:54.443455"
    },
    {
        "test_name": "Add pet with missing name",
        "request": {
            "method": "POST",
            "path": "/api/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "birthDate": "2023-01-01",
                "id": 1,
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400
            }
        },
        "timestamp": "2024-09-18T15:42:54.443455"
    },
    {
        "test_name": "Add pet with invalid birthDate format",
        "request": {
            "method": "POST",
            "path": "/api/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "birthDate": "01-01-2023",
                "id": 1,
                "name": "Leo",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400
            }
        },
        "timestamp": "2024-09-18T15:42:54.443455"
    },
    {
        "test_name": "Get all owners",
        "request": {
            "method": "GET",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "firstName": "George",
                    "lastName": "Franklin",
                    "address": "110 W. Liberty St.",
                    "city": "Madison",
                    "telephone": "6085551023",
                    "id": 1,
                    "pets": []
                }
            ]
        },
        "timestamp": "2024-09-18T15:42:59.693797"
    },
    {
        "test_name": "Get owners by last name",
        "request": {
            "method": "GET",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "lastName": "Franklin"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "firstName": "George",
                    "lastName": "Franklin",
                    "address": "110 W. Liberty St.",
                    "city": "Madison",
                    "telephone": "6085551023",
                    "id": 1,
                    "pets": []
                }
            ]
        },
        "timestamp": "2024-09-18T15:42:59.693797"
    },
    {
        "test_name": "Get owners with no matching last name",
        "request": {
            "method": "GET",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "lastName": "NonExistent"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": []
        },
        "timestamp": "2024-09-18T15:42:59.693797"
    },
    {
        "test_name": "Get owners with malformed last name parameter",
        "request": {
            "method": "GET",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "lastName": "12345"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequestException",
                "exMessage": "Invalid last name format"
            }
        },
        "timestamp": "2024-09-18T15:42:59.693797"
    },
    {
        "test_name": "Add valid owner",
        "request": {
            "method": "POST",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 201,
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        },
        "timestamp": "2024-09-18T15:43:05.820757"
    },
    {
        "test_name": "Add owner with missing lastName",
        "request": {
            "method": "POST",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400,
                "path": "/api/owners",
                "timestamp": "2023-10-01T00:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "[Path '/lastName'] is required"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:43:05.820757"
    },
    {
        "test_name": "Add owner with invalid telephone format",
        "request": {
            "method": "POST",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "608-555-1023"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400,
                "path": "/api/owners",
                "timestamp": "2023-10-01T00:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "[Path '/telephone'] does not match pattern '^[0-9]*$'"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:43:05.820757"
    },
    {
        "test_name": "Add pet successfully",
        "request": {
            "method": "POST",
            "path": "/api/owners/1/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                }
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 201,
            "body": {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "ownerId": 1,
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:43:19.125603"
    },
    {
        "test_name": "Add pet without required fields",
        "request": {
            "method": "POST",
            "path": "/api/owners/1/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "birthDate": "2020-01-01"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/1/pets",
                "schemaValidationErrors": [
                    {
                        "message": "Missing required property: name"
                    },
                    {
                        "message": "Missing required property: type"
                    }
                ],
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:43:19.125603"
    },
    {
        "test_name": "Add pet for non-existing owner",
        "request": {
            "method": "POST",
            "path": "/api/owners/999/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                }
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Owner not found",
                "path": "/api/owners/999/pets",
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:43:19.125603"
    },
    {
        "test_name": "Successfully add a visit to an existing pet",
        "request": {
            "method": "POST",
            "path": "/api/owners/1/pets/1/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "date": "2023-10-01",
                "description": "rabies shot"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 201,
            "body": {
                "id": 1,
                "date": "2023-10-01",
                "description": "rabies shot",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:43:24.401527"
    },
    {
        "test_name": "Fail to add a visit due to missing description",
        "request": {
            "method": "POST",
            "path": "/api/owners/1/pets/1/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "date": "2023-10-01"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/1/pets/1/visits",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:43:24.401527"
    },
    {
        "test_name": "Fail to add a visit to a non-existing pet",
        "request": {
            "method": "POST",
            "path": "/api/owners/1/pets/999/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "date": "2023-10-01",
                "description": "rabies shot"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet not found for this owner.",
                "path": "/api/owners/1/pets/999/visits",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:43:24.401527"
    },
    {
        "test_name": "Successful GET request to root path",
        "request": {
            "method": "GET",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:43:27.343288"
    },
    {
        "test_name": "GET request to root path with invalid parameters",
        "request": {
            "method": "GET",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequestException",
                "exMessage": "Invalid request"
            }
        },
        "timestamp": "2024-09-18T15:43:27.343288"
    },
    {
        "test_name": "GET request to non-existent path",
        "request": {
            "method": "GET",
            "path": "/non-existent",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFoundException",
                "exMessage": "Resource not found"
            }
        },
        "timestamp": "2024-09-18T15:43:27.343288"
    },
    {
        "test_name": "Successful PUT request",
        "request": {
            "method": "PUT",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:43:30.746046"
    },
    {
        "test_name": "PUT request with bad request error",
        "request": {
            "method": "PUT",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequestException",
                "exMessage": "Invalid request format"
            }
        },
        "timestamp": "2024-09-18T15:43:30.746046"
    },
    {
        "test_name": "PUT request with not found error",
        "request": {
            "method": "PUT",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFoundException",
                "exMessage": "Resource not found"
            }
        },
        "timestamp": "2024-09-18T15:43:30.746046"
    },
    {
        "test_name": "Successful redirect to Swagger",
        "request": {
            "method": "POST",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:43:33.252225"
    },
    {
        "test_name": "Bad Request with invalid input",
        "request": {
            "method": "POST",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "invalidKey": "invalidValue"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequestException",
                "exMessage": "Invalid input provided"
            }
        },
        "timestamp": "2024-09-18T15:43:33.252225"
    },
    {
        "test_name": "Not Found error",
        "request": {
            "method": "POST",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFoundException",
                "exMessage": "Resource not found"
            }
        },
        "timestamp": "2024-09-18T15:43:33.252225"
    },
    {
        "test_name": "Successful deletion of resource",
        "request": {
            "method": "DELETE",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:43:35.747542"
    },
    {
        "test_name": "Bad Request due to invalid input",
        "request": {
            "method": "DELETE",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "InvalidInputException",
                "exMessage": "The input provided is not valid."
            }
        },
        "timestamp": "2024-09-18T15:43:35.747542"
    },
    {
        "test_name": "Resource not found",
        "request": {
            "method": "DELETE",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "ResourceNotFoundException",
                "exMessage": "The requested resource could not be found."
            }
        },
        "timestamp": "2024-09-18T15:43:35.747542"
    },
    {
        "test_name": "Successful patch request",
        "request": {
            "method": "PATCH",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:43:38.319294"
    },
    {
        "test_name": "Bad request due to invalid input",
        "request": {
            "method": "PATCH",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "InvalidInputError",
                "exMessage": "The request is not valid."
            }
        },
        "timestamp": "2024-09-18T15:43:38.319294"
    },
    {
        "test_name": "Not found error on non-existing resource",
        "request": {
            "method": "PATCH",
            "path": "/non-existing-path",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "ResourceNotFoundError",
                "exMessage": "The requested resource was not found."
            }
        },
        "timestamp": "2024-09-18T15:43:38.319294"
    },
    {
        "test_name": "Get visit details with valid visitId",
        "request": {
            "method": "GET",
            "path": "/api/visits/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "description": "rabies shot",
                "date": "2023-10-01",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:43:42.196918"
    },
    {
        "test_name": "Get visit details with non-existent visitId",
        "request": {
            "method": "GET",
            "path": "/api/visits/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Visit not found",
                "path": "/api/visits/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:43:42.196918"
    },
    {
        "test_name": "Get visit details with invalid visitId",
        "request": {
            "method": "GET",
            "path": "/api/visits/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/visits/-1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "Visit ID must be a positive integer."
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:43:42.196918"
    },
    {
        "test_name": "Update visit with valid data",
        "request": {
            "method": "PUT",
            "path": "/api/visits/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:43:46.003374"
    },
    {
        "test_name": "Update visit with missing description",
        "request": {
            "method": "PUT",
            "path": "/api/visits/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400
            }
        },
        "timestamp": "2024-09-18T15:43:46.003374"
    },
    {
        "test_name": "Update visit with non-existent visitId",
        "request": {
            "method": "PUT",
            "path": "/api/visits/9999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 404
            }
        },
        "timestamp": "2024-09-18T15:43:46.003374"
    },
    {
        "test_name": "Delete visit with valid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/visits/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:43:51.002746"
    },
    {
        "test_name": "Delete visit with non-existing ID",
        "request": {
            "method": "DELETE",
            "path": "/api/visits/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Visit not found.",
                "path": "/api/visits/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:43:51.002746"
    },
    {
        "test_name": "Delete visit with invalid ID format",
        "request": {
            "method": "DELETE",
            "path": "/api/visits/abc",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/visits/abc",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "Invalid type. Expected integer."
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:43:51.002746"
    },
    {
        "test_name": "Get vet details by valid vetId",
        "request": {
            "method": "GET",
            "path": "/api/vets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:43:55.198834"
    },
    {
        "test_name": "Get vet details by vetId not found",
        "request": {
            "method": "GET",
            "path": "/api/vets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "error": "Not Found",
                "message": "Vet not found.",
                "path": "/api/vets/999",
                "schemaValidationErrors": [],
                "status": 404,
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:43:55.198834"
    },
    {
        "test_name": "Get vet details with invalid vetId",
        "request": {
            "method": "GET",
            "path": "/api/vets/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/vets/-1",
                "schemaValidationErrors": [],
                "status": 400,
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:43:55.198834"
    },
    {
        "test_name": "Update vet with valid data",
        "request": {
            "method": "PUT",
            "path": "/api/vets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:43:59.669777"
    },
    {
        "test_name": "Update vet with missing required fields",
        "request": {
            "method": "PUT",
            "path": "/api/vets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "lastName": "Carter",
                "id": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/vets/1",
                "status": 400,
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "Missing required property 'firstName'"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:43:59.669777"
    },
    {
        "test_name": "Update vet with invalid vetId",
        "request": {
            "method": "PUT",
            "path": "/api/vets/9999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "id": 9999,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "error": "Not Found",
                "message": "Vet not found",
                "path": "/api/vets/9999",
                "status": 404,
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:43:59.669777"
    },
    {
        "test_name": "Delete existing vet",
        "request": {
            "method": "DELETE",
            "path": "/api/vets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:44:04.303534"
    },
    {
        "test_name": "Delete vet with non-existent ID",
        "request": {
            "method": "DELETE",
            "path": "/api/vets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Vet not found",
                "path": "/api/vets/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:04.303534"
    },
    {
        "test_name": "Delete vet with invalid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/vets/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/vets/-1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:04.303534"
    },
    {
        "test_name": "Retrieve existing specialty by valid ID",
        "request": {
            "method": "GET",
            "path": "/api/specialties/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "radiology"
            }
        },
        "timestamp": "2024-09-18T15:44:08.480472"
    },
    {
        "test_name": "Request specialty with non-existent ID",
        "request": {
            "method": "GET",
            "path": "/api/specialties/9999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Specialty not found.",
                "path": "/api/specialties/9999",
                "timestamp": "2023-10-10T00:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:08.480472"
    },
    {
        "test_name": "Request specialty with invalid ID (negative number)",
        "request": {
            "method": "GET",
            "path": "/api/specialties/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/specialties/-1",
                "timestamp": "2023-10-10T00:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:08.480472"
    },
    {
        "test_name": "Update specialty with valid data",
        "request": {
            "method": "PUT",
            "path": "/api/specialties/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1,
                "name": "radiology"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "radiology"
            }
        },
        "timestamp": "2024-09-18T15:44:13.192993"
    },
    {
        "test_name": "Update specialty with missing name",
        "request": {
            "method": "PUT",
            "path": "/api/specialties/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400,
                "path": "/api/specialties/1",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:13.192993"
    },
    {
        "test_name": "Update specialty with non-existent ID",
        "request": {
            "method": "PUT",
            "path": "/api/specialties/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 999,
                "name": "unknown specialty"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "error": "Not Found",
                "message": "Specialty not found.",
                "status": 404,
                "path": "/api/specialties/999",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:13.192993"
    },
    {
        "test_name": "Delete specialty with valid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/specialties/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "radiology"
            }
        },
        "timestamp": "2024-09-18T15:44:18.566514"
    },
    {
        "test_name": "Delete specialty with non-existent ID",
        "request": {
            "method": "DELETE",
            "path": "/api/specialties/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Specialty not found.",
                "path": "/api/specialties/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:18.566514"
    },
    {
        "test_name": "Delete specialty with invalid ID (negative number)",
        "request": {
            "method": "DELETE",
            "path": "/api/specialties/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/specialties/-1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "Invalid value for 'specialtyId'. Must be a positive integer."
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:44:18.566514"
    },
    {
        "test_name": "Get pet type with valid ID",
        "request": {
            "method": "GET",
            "path": "/api/pettypes/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "cat"
            }
        },
        "timestamp": "2024-09-18T15:44:22.668209"
    },
    {
        "test_name": "Get pet type with non-existing ID",
        "request": {
            "method": "GET",
            "path": "/api/pettypes/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet Type not found.",
                "path": "/api/pettypes/999",
                "timestamp": "2023-10-01T00:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:22.668209"
    },
    {
        "test_name": "Get pet type with invalid ID format",
        "request": {
            "method": "GET",
            "path": "/api/pettypes/abc",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pettypes/abc",
                "timestamp": "2023-10-01T00:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:22.668209"
    },
    {
        "test_name": "Update pet type with valid data",
        "request": {
            "method": "PUT",
            "path": "/api/pettypes/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1,
                "name": "dog"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "dog"
            }
        },
        "timestamp": "2024-09-18T15:44:26.570678"
    },
    {
        "test_name": "Update pet type with invalid ID",
        "request": {
            "method": "PUT",
            "path": "/api/pettypes/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": -1,
                "name": "dog"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pettypes/-1",
                "timestamp": "2023-10-01T00:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:26.570678"
    },
    {
        "test_name": "Update pet type with missing name field",
        "request": {
            "method": "PUT",
            "path": "/api/pettypes/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pettypes/1",
                "timestamp": "2023-10-01T00:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:26.570678"
    },
    {
        "test_name": "Delete existing pet type",
        "request": {
            "method": "DELETE",
            "path": "/api/pettypes/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "cat"
            }
        },
        "timestamp": "2024-09-18T15:44:30.387266"
    },
    {
        "test_name": "Delete non-existing pet type",
        "request": {
            "method": "DELETE",
            "path": "/api/pettypes/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet type not found.",
                "path": "/api/pettypes/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:30.387266"
    },
    {
        "test_name": "Delete pet type with invalid ID",
        "request": {
            "method": "DELETE",
            "path": "/api/pettypes/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pettypes/-1",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "[Path '/petTypeId'] Instance type (-1) does not match any allowed primitive type (allowed: [\"integer\"])",
                        "empty": false
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:44:30.387266"
    },
    {
        "test_name": "Get pet details with valid petId",
        "request": {
            "method": "GET",
            "path": "/api/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "ownerId": 1,
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:44:35.504112"
    },
    {
        "test_name": "Get pet details with non-existent petId",
        "request": {
            "method": "GET",
            "path": "/api/pets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet not found.",
                "path": "/api/pets/999",
                "timestamp": "2023-10-04T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:35.504112"
    },
    {
        "test_name": "Get pet details with invalid petId format",
        "request": {
            "method": "GET",
            "path": "/api/pets/abc",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pets/abc",
                "timestamp": "2023-10-04T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:35.504112"
    },
    {
        "test_name": "Update pet successfully with valid data",
        "request": {
            "method": "put",
            "path": "/api/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:44:39.585474"
    },
    {
        "test_name": "Update pet with missing required fields",
        "request": {
            "method": "put",
            "path": "/api/pets/2",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 2,
                "name": "Bella"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400
            }
        },
        "timestamp": "2024-09-18T15:44:39.585474"
    },
    {
        "test_name": "Update pet with non-existing petId",
        "request": {
            "method": "put",
            "path": "/api/pets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 999,
                "name": "Max",
                "birthDate": "2021-05-10",
                "type": {
                    "id": 2,
                    "name": "dog"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "error": "Not Found",
                "message": "Pet not found",
                "status": 404
            }
        },
        "timestamp": "2024-09-18T15:44:39.586472"
    },
    {
        "test_name": "Delete existing pet",
        "request": {
            "method": "DELETE",
            "path": "/api/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:44:43.982994"
    },
    {
        "test_name": "Delete pet with non-existing ID",
        "request": {
            "method": "DELETE",
            "path": "/api/pets/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "error": "Not Found",
                "message": "Pet not found.",
                "status": 404,
                "timestamp": "2023-10-01T00:00:00Z",
                "path": "/api/pets/999",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:43.982994"
    },
    {
        "test_name": "Delete pet with invalid ID (negative)",
        "request": {
            "method": "DELETE",
            "path": "/api/pets/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400,
                "timestamp": "2023-10-01T00:00:00Z",
                "path": "/api/pets/-1",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:43.982994"
    },
    {
        "test_name": "Get Owner Details - Valid Owner ID",
        "request": {
            "method": "GET",
            "path": "/api/owners/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        },
        "timestamp": "2024-09-18T15:44:48.378314"
    },
    {
        "test_name": "Get Owner Details - Owner Not Found",
        "request": {
            "method": "GET",
            "path": "/api/owners/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "path": "/api/owners/999",
                "timestamp": "2023-10-01T12:00:00Z",
                "message": "Owner not found",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:48.378314"
    },
    {
        "test_name": "Get Owner Details - Bad Request with Invalid Owner ID",
        "request": {
            "method": "GET",
            "path": "/api/owners/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "path": "/api/owners/-1",
                "timestamp": "2023-10-01T12:00:00Z",
                "message": "Request failed schema validation",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:48.378314"
    },
    {
        "test_name": "Update owner with valid data",
        "request": {
            "method": "PUT",
            "path": "/api/owners/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        },
        "timestamp": "2024-09-18T15:44:54.796154"
    },
    {
        "test_name": "Update owner with missing required fields",
        "request": {
            "method": "PUT",
            "path": "/api/owners/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "lastName": "",
                "address": "110 W. Liberty St.",
                "city": "Madison"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners",
                "schemaValidationErrors": [
                    {
                        "message": "[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: [\"string\"])",
                        "empty": false
                    }
                ],
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:44:54.796154"
    },
    {
        "test_name": "Update owner with non-existent ownerId",
        "request": {
            "method": "PUT",
            "path": "/api/owners/999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Owner not found.",
                "path": "/api/owners",
                "timestamp": "2023-10-01T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:54.796154"
    },
    {
        "test_name": "Delete owner successfully",
        "request": {
            "method": "DELETE",
            "path": "/api/owners/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        },
        "timestamp": "2024-09-18T15:44:59.644466"
    },
    {
        "test_name": "Delete owner with non-existent ID",
        "request": {
            "method": "DELETE",
            "path": "/api/owners/9999",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "path": "/api/owners/9999",
                "timestamp": "2023-10-01T12:00:00Z",
                "message": "Owner not found",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:59.644466"
    },
    {
        "test_name": "Delete owner with invalid ID format",
        "request": {
            "method": "DELETE",
            "path": "/api/owners/abc",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "path": "/api/owners/abc",
                "timestamp": "2023-10-01T12:00:00Z",
                "message": "Request failed schema validation",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:44:59.644466"
    },
    {
        "test_name": "Get existing pet details",
        "request": {
            "method": "GET",
            "path": "/api/owners/1/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "Leo",
                "birthDate": "2020-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "ownerId": 1,
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:45:02.979005"
    },
    {
        "test_name": "Get pet details with non-existing owner",
        "request": {
            "method": "GET",
            "path": "/api/owners/999/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Pet not found.",
                "path": "/api/owners/999/pets/1",
                "timestamp": "2023-10-10T10:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:45:02.979005"
    },
    {
        "test_name": "Get pet details with invalid petId",
        "request": {
            "method": "GET",
            "path": "/api/owners/1/pets/-1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/1/pets/-1",
                "timestamp": "2023-10-10T10:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:45:02.979005"
    },
    {
        "test_name": "Update pet with valid data",
        "request": {
            "method": "PUT",
            "path": "/api/owners/1/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "2022-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                }
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 204,
            "body": {}
        },
        "timestamp": "2024-09-18T15:45:07.700800"
    },
    {
        "test_name": "Update pet with invalid owner ID",
        "request": {
            "method": "PUT",
            "path": "/api/owners/-1/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "2022-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                }
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/-1/pets/1",
                "timestamp": "2023-01-01T00:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:45:07.700800"
    },
    {
        "test_name": "Update pet with missing required fields",
        "request": {
            "method": "PUT",
            "path": "/api/owners/1/pets/1",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/1/pets/1",
                "timestamp": "2023-01-01T00:00:00Z",
                "schemaValidationErrors": [
                    {
                        "message": "Missing required fields: birthDate, type"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:45:07.701792"
    },
    {
        "test_name": "Successful retrieval of visits",
        "request": {
            "method": "GET",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "id": 1,
                    "description": "rabies shot",
                    "date": "2023-10-01",
                    "petId": 1
                }
            ]
        },
        "timestamp": "2024-09-18T15:45:16.342990"
    },
    {
        "test_name": "No visits found",
        "request": {
            "method": "GET",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": []
        },
        "timestamp": "2024-09-18T15:45:16.342990"
    },
    {
        "test_name": "Not Modified response",
        "request": {
            "method": "GET",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": []
        },
        "timestamp": "2024-09-18T15:45:16.342990"
    },
    {
        "test_name": "Bad Request response",
        "request": {
            "method": "GET",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequest",
                "exMessage": "Invalid request parameters."
            }
        },
        "timestamp": "2024-09-18T15:45:16.342990"
    },
    {
        "test_name": "Not Found response",
        "request": {
            "method": "GET",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFound",
                "exMessage": "Visits not found."
            }
        },
        "timestamp": "2024-09-18T15:45:16.342990"
    },
    {
        "test_name": "Server error response",
        "request": {
            "method": "GET",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 500,
            "body": {
                "status": 500,
                "error": "Internal Server Error",
                "path": "/api/visits",
                "timestamp": "2023-10-01T12:00:00Z",
                "message": "Unexpected error occurred.",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:45:16.342990"
    },
    {
        "test_name": "Add visit with valid data",
        "request": {
            "method": "POST",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "description": "rabies shot",
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:45:20.811243"
    },
    {
        "test_name": "Add visit with missing description",
        "request": {
            "method": "POST",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1,
                "date": "2023-10-01",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400
            }
        },
        "timestamp": "2024-09-18T15:45:20.811243"
    },
    {
        "test_name": "Add visit with invalid ID",
        "request": {
            "method": "POST",
            "path": "/api/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "description": "rabies shot",
                "id": -1,
                "date": "2023-10-01",
                "petId": 1
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400
            }
        },
        "timestamp": "2024-09-18T15:45:20.811243"
    },
    {
        "test_name": "Successful retrieval of vets",
        "request": {
            "method": "GET",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "firstName": "James",
                    "lastName": "Carter",
                    "id": 1,
                    "specialties": [
                        {
                            "id": 1,
                            "name": "radiology"
                        }
                    ]
                }
            ]
        },
        "timestamp": "2024-09-18T15:45:24.995293"
    },
    {
        "test_name": "Not modified response",
        "request": {
            "method": "GET",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": []
        },
        "timestamp": "2024-09-18T15:45:24.995293"
    },
    {
        "test_name": "Bad request response",
        "request": {
            "method": "GET",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequest",
                "exMessage": "Invalid request parameters"
            }
        },
        "timestamp": "2024-09-18T15:45:24.995293"
    },
    {
        "test_name": "Add vet with valid data",
        "request": {
            "method": "POST",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "firstName": "James",
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:45:28.622256"
    },
    {
        "test_name": "Add vet with missing firstName",
        "request": {
            "method": "POST",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "lastName": "Carter",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400
            }
        },
        "timestamp": "2024-09-18T15:45:28.622256"
    },
    {
        "test_name": "Add vet with invalid lastName",
        "request": {
            "method": "POST",
            "path": "/api/vets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "James",
                "lastName": "",
                "id": 1,
                "specialties": [
                    {
                        "id": 1,
                        "name": "radiology"
                    }
                ]
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400
            }
        },
        "timestamp": "2024-09-18T15:45:28.622256"
    },
    {
        "test_name": "Retrieve specialties successfully",
        "request": {
            "method": "GET",
            "path": "/api/specialties",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "id": 1,
                    "name": "radiology"
                },
                {
                    "id": 2,
                    "name": "surgery"
                }
            ]
        },
        "timestamp": "2024-09-18T15:45:38.508980"
    },
    {
        "test_name": "Check for not modified response",
        "request": {
            "method": "GET",
            "path": "/api/specialties",
            "headers": {
                "If-None-Match": "some-etag",
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": {}
        },
        "timestamp": "2024-09-18T15:45:38.508980"
    },
    {
        "test_name": "Handle bad request response",
        "request": {
            "method": "GET",
            "path": "/api/specialties",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequest",
                "exMessage": "Invalid parameters"
            }
        },
        "timestamp": "2024-09-18T15:45:38.508980"
    },
    {
        "test_name": "Add specialty with valid data",
        "request": {
            "method": "POST",
            "path": "/api/specialties",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 1,
                "name": "radiology"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "radiology"
            }
        },
        "timestamp": "2024-09-18T15:45:41.227120"
    },
    {
        "test_name": "Add specialty with missing name",
        "request": {
            "method": "POST",
            "path": "/api/specialties",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": 2
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "schemaValidationErrors": [
                    {
                        "message": "Field 'name' is required."
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:45:41.227120"
    },
    {
        "test_name": "Add specialty with invalid ID",
        "request": {
            "method": "POST",
            "path": "/api/specialties",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "id": -1,
                "name": "surgery"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "schemaValidationErrors": [
                    {
                        "message": "Field 'id' must be greater than or equal to 0."
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:45:41.227120"
    },
    {
        "test_name": "Get pet types successfully",
        "request": {
            "method": "GET",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "id": 1,
                    "name": "cat"
                },
                {
                    "id": 2,
                    "name": "dog"
                }
            ]
        },
        "timestamp": "2024-09-18T15:45:45.141141"
    },
    {
        "test_name": "Get pet types not modified",
        "request": {
            "method": "GET",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": []
        },
        "timestamp": "2024-09-18T15:45:45.141141"
    },
    {
        "test_name": "Get pet types bad request",
        "request": {
            "method": "GET",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequest",
                "exMessage": "Invalid request"
            }
        },
        "timestamp": "2024-09-18T15:45:45.141141"
    },
    {
        "test_name": "Add valid pet type",
        "request": {
            "method": "POST",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "dog"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "id": 1,
                "name": "dog"
            }
        },
        "timestamp": "2024-09-18T15:45:50.191739"
    },
    {
        "test_name": "Add pet type with missing name",
        "request": {
            "method": "POST",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400,
                "path": "/api/pettypes",
                "timestamp": "2023-10-01T00:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:45:50.191739"
    },
    {
        "test_name": "Add pet type with invalid name length",
        "request": {
            "method": "POST",
            "path": "/api/pettypes",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": ""
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "status": 400,
                "path": "/api/pettypes",
                "timestamp": "2023-10-01T00:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:45:50.191739"
    },
    {
        "test_name": "Get all pets successfully",
        "request": {
            "method": "GET",
            "path": "/api/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "id": 1,
                    "name": "Leo",
                    "birthDate": "2020-01-01",
                    "type": {
                        "id": 1,
                        "name": "cat"
                    },
                    "ownerId": 1,
                    "visits": []
                }
            ]
        },
        "timestamp": "2024-09-18T15:45:53.665091"
    },
    {
        "test_name": "Get pets with no pets available",
        "request": {
            "method": "GET",
            "path": "/api/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": []
        },
        "timestamp": "2024-09-18T15:45:53.665091"
    },
    {
        "test_name": "Get pets and receive Not Modified response",
        "request": {
            "method": "GET",
            "path": "/api/pets",
            "headers": {
                "If-None-Match": "some-etag",
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 304,
            "body": {}
        },
        "timestamp": "2024-09-18T15:45:53.665091"
    },
    {
        "test_name": "Add pet with valid details",
        "request": {
            "method": "POST",
            "path": "/api/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "2023-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {
                "name": "Leo",
                "birthDate": "2023-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "id": 1,
                "ownerId": 1,
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:46:04.490115"
    },
    {
        "test_name": "Add pet with missing name",
        "request": {
            "method": "POST",
            "path": "/api/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "birthDate": "2023-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pets",
                "schemaValidationErrors": [
                    {
                        "message": "'name' is a required property"
                    }
                ],
                "timestamp": "2023-10-01T00:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:46:04.491114"
    },
    {
        "test_name": "Add pet with invalid birthDate format",
        "request": {
            "method": "POST",
            "path": "/api/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "01-01-2023",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "visits": []
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/pets",
                "schemaValidationErrors": [
                    {
                        "message": "'birthDate' must match format 'date'"
                    }
                ],
                "timestamp": "2023-10-01T00:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:46:04.491114"
    },
    {
        "test_name": "Retrieve all owners without last name filter",
        "request": {
            "method": "GET",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "firstName": "George",
                    "lastName": "Franklin",
                    "address": "110 W. Liberty St.",
                    "city": "Madison",
                    "telephone": "6085551023",
                    "id": 1,
                    "pets": []
                }
            ]
        },
        "timestamp": "2024-09-18T15:46:08.763470"
    },
    {
        "test_name": "Retrieve owners with last name filter",
        "request": {
            "method": "GET",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "lastName": "Franklin"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": [
                {
                    "firstName": "George",
                    "lastName": "Franklin",
                    "address": "110 W. Liberty St.",
                    "city": "Madison",
                    "telephone": "6085551023",
                    "id": 1,
                    "pets": []
                }
            ]
        },
        "timestamp": "2024-09-18T15:46:08.763470"
    },
    {
        "test_name": "Handle not found case when querying non-existent last name",
        "request": {
            "method": "GET",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "lastName": "Nonexistent"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "OwnerNotFoundException",
                "exMessage": "No owners found with last name 'Nonexistent'."
            }
        },
        "timestamp": "2024-09-18T15:46:08.763470"
    },
    {
        "test_name": "Successful owner addition",
        "request": {
            "method": "POST",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 201,
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023",
                "id": 1,
                "pets": []
            }
        },
        "timestamp": "2024-09-18T15:46:15.986059"
    },
    {
        "test_name": "Missing lastName field",
        "request": {
            "method": "POST",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "6085551023"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "path": "/api/owners",
                "timestamp": "2023-10-01T12:00:00Z",
                "message": "Request failed schema validation",
                "schemaValidationErrors": [
                    {
                        "message": "Missing required field 'lastName'"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:46:15.986059"
    },
    {
        "test_name": "Invalid telephone format",
        "request": {
            "method": "POST",
            "path": "/api/owners",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "firstName": "George",
                "lastName": "Franklin",
                "address": "110 W. Liberty St.",
                "city": "Madison",
                "telephone": "invalid_number"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "path": "/api/owners",
                "timestamp": "2023-10-01T12:00:00Z",
                "message": "Request failed schema validation",
                "schemaValidationErrors": [
                    {
                        "message": "[Path '/telephone'] Instance type (string) does not match the required pattern '^[0-9]*$'"
                    }
                ]
            }
        },
        "timestamp": "2024-09-18T15:46:15.986059"
    },
    {
        "test_name": "Add pet to owner successfully",
        "request": {
            "method": "POST",
            "path": "/api/owners/1/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "2023-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                }
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 201,
            "body": {
                "name": "Leo",
                "birthDate": "2023-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                },
                "id": 1,
                "ownerId": 1,
                "visits": []
            }
        },
        "timestamp": "2024-09-18T15:46:22.737787"
    },
    {
        "test_name": "Add pet with missing required fields",
        "request": {
            "method": "POST",
            "path": "/api/owners/1/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/1/pets",
                "schemaValidationErrors": [
                    {
                        "message": "Missing required property: birthDate"
                    },
                    {
                        "message": "Missing required property: type"
                    }
                ],
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:46:22.737787"
    },
    {
        "test_name": "Add pet to non-existing owner",
        "request": {
            "method": "POST",
            "path": "/api/owners/999/pets",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "name": "Leo",
                "birthDate": "2023-01-01",
                "type": {
                    "id": 1,
                    "name": "cat"
                }
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Owner not found",
                "path": "/api/owners/999/pets",
                "timestamp": "2023-10-01T12:00:00Z"
            }
        },
        "timestamp": "2024-09-18T15:46:22.737787"
    },
    {
        "test_name": "Add visit with valid data",
        "request": {
            "method": "POST",
            "path": "/api/owners/1/pets/1/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "date": "2023-10-15",
                "description": "rabies shot"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 201,
            "body": {
                "id": 1,
                "date": "2023-10-15",
                "description": "rabies shot",
                "petId": 1
            }
        },
        "timestamp": "2024-09-18T15:46:29.823141"
    },
    {
        "test_name": "Add visit with missing description",
        "request": {
            "method": "POST",
            "path": "/api/owners/1/pets/1/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "date": "2023-10-15"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "status": 400,
                "error": "Bad Request",
                "message": "Request failed schema validation",
                "path": "/api/owners/1/pets/1/visits",
                "timestamp": "2023-10-15T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:46:29.823141"
    },
    {
        "test_name": "Add visit with invalid ownerId",
        "request": {
            "method": "POST",
            "path": "/api/owners/-1/pets/1/visits",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "date": "2023-10-15",
                "description": "rabies shot"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "status": 404,
                "error": "Not Found",
                "message": "Owner not found",
                "path": "/api/owners/-1/pets/1/visits",
                "timestamp": "2023-10-15T12:00:00Z",
                "schemaValidationErrors": []
            }
        },
        "timestamp": "2024-09-18T15:46:29.823141"
    },
    {
        "test_name": "Successful request to root path",
        "request": {
            "method": "GET",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:46:32.248276"
    },
    {
        "test_name": "Bad request without parameters",
        "request": {
            "method": "GET",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequest",
                "exMessage": "Invalid request"
            }
        },
        "timestamp": "2024-09-18T15:46:32.248276"
    },
    {
        "test_name": "Not found for invalid endpoint",
        "request": {
            "method": "GET",
            "path": "/invalid",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFound",
                "exMessage": "Resource not found"
            }
        },
        "timestamp": "2024-09-18T15:46:32.248276"
    },
    {
        "test_name": "Successful PUT request",
        "request": {
            "method": "PUT",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:46:35.365348"
    },
    {
        "test_name": "PUT request with Bad Request",
        "request": {
            "method": "PUT",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequestException",
                "exMessage": "Invalid input"
            }
        },
        "timestamp": "2024-09-18T15:46:35.365348"
    },
    {
        "test_name": "PUT request for Not Found",
        "request": {
            "method": "PUT",
            "path": "/nonexistent",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFoundException",
                "exMessage": "Resource not found"
            }
        },
        "timestamp": "2024-09-18T15:46:35.365348"
    },
    {
        "test_name": "Successful redirect to Swagger",
        "request": {
            "method": "POST",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:46:37.674808"
    },
    {
        "test_name": "Bad request with invalid payload",
        "request": {
            "method": "POST",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {
                "invalidKey": "invalidValue"
            },
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequestException",
                "exMessage": "Invalid request payload"
            }
        },
        "timestamp": "2024-09-18T15:46:37.674808"
    },
    {
        "test_name": "Not found error on invalid endpoint",
        "request": {
            "method": "POST",
            "path": "/invalid-endpoint",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFoundException",
                "exMessage": "Endpoint not found"
            }
        },
        "timestamp": "2024-09-18T15:46:37.674808"
    },
    {
        "test_name": "Successful deletion of resource",
        "request": {
            "method": "DELETE",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:46:40.652133"
    },
    {
        "test_name": "Bad request due to invalid parameters",
        "request": {
            "method": "DELETE",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "InvalidRequest",
                "exMessage": "Request cannot be processed"
            }
        },
        "timestamp": "2024-09-18T15:46:40.652133"
    },
    {
        "test_name": "Resource not found",
        "request": {
            "method": "DELETE",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "ResourceNotFound",
                "exMessage": "The requested resource was not found"
            }
        },
        "timestamp": "2024-09-18T15:46:40.653129"
    },
    {
        "test_name": "Successful PATCH request",
        "request": {
            "method": "PATCH",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 200,
            "body": {}
        },
        "timestamp": "2024-09-18T15:46:43.509296"
    },
    {
        "test_name": "PATCH request with bad request",
        "request": {
            "method": "PATCH",
            "path": "/",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 400,
            "body": {
                "className": "BadRequestException",
                "exMessage": "Invalid request"
            }
        },
        "timestamp": "2024-09-18T15:46:43.510295"
    },
    {
        "test_name": "PATCH request to non-existent endpoint",
        "request": {
            "method": "PATCH",
            "path": "/non-existent",
            "headers": {
                "Content-Type": "application/json"
            },
            "body": {},
            "query": {}
        },
        "expected_response": {
            "status_code": 404,
            "body": {
                "className": "NotFoundException",
                "exMessage": "Endpoint not found"
            }
        },
        "timestamp": "2024-09-18T15:46:43.510295"
    }
]